
rapid quality assurance with requirements smells


henning femmera,∗, daniel méndez fernándeza, stefan wagnerb, sebastian edera


asoftware & systems engineering, technische universität münchen, germanybinstitute of software technology, university of stuttgart, germany


abstract


context: bad requirements quality can cause expensive consequences during the software developmentlifecycle, especially if iterations are long and feedback comes late. objectives: we aim at a light-weightstatic requirements analysis approach that allows for rapid checks immediately when requirements are writtendown. method: we transfer the concept of code smells to requirements engineering as requirements smells.to evaluate the beneﬁts and limitations, we deﬁne requirements smells, realize our concepts for a smelldetection in a prototype called smella and apply smella in a series of cases provided by three industrial anda university context. results: the automatic detection yields an average precision of 59% at an averagerecall of 82% with high variation. the evaluation in practical environments indicates beneﬁts such as anincrease of the awareness of quality defects. yet, some smells were not clearly distinguishable. conclusion:lightweight smell detection can uncover many practically relevant requirements defects in a reasonablyprecise way. although some smells need to be deﬁned more clearly, smell detection provides a helpful meansto support quality assurance in requirements engineering, for instance, as a supplement to reviews.


keywords:requirements engineering, quality assurance, automatic defect detection, requirementssmells


contents


1introduction2


2related work32.1the notion of smells in software engi-3


2.2quality assurance of software require-ments3


2.35


3requirements smells83.1requirements smell terminology. . .8


3.2requirements smells based on iso 291489


4smella: a prototype for requirementssmell detection10


4.1requirements parsing11


4.211


4.312


4.4findings presentation12


5requirements smell detection in theprocess of quality assurance15


6evaluation166.1case study design16


6.1.116


6.1.2case and subjects selection . .17


6.1.3data collection procedure . . .17


6.1.418


6.1.519


6.219


6.2.1case and subjects description .20





arxiv:1611.08847v1  [cs.se]  27 nov 2016


6.2.2rq 1: how many requirementssmells are present in the artifacts? 21


6.2.3rq 2.1: how accurate is thesmell detection?25


6.2.4rq 2.2: which of these smellsare practically relevant in which29


6.2.5rq 3:which requirementsquality defects can be detected30


6.2.6rq 4: how could smells help33


6.2.7evaluation of validity34


7conclusion357.135


7.2relation to existing evidence36


7.336


7.437


7.537


appendix arequirements checklist 41


1. introduction


defects in requirements, such as ambiguities or in-complete requirements, can lead to time and costoverruns in a project [56].some of the issues re-quire speciﬁc domain knowledge to be uncovered. forexample, it is very diﬃcult to decide whether a re-quirements artifact is complete without domain knowl-edge. other issues, however, can be detected moreeasily: if a requirement states that a sensor shouldwork with suﬃcient accuracy without detailing whatsuﬃcient means in that context, the requirement isvague and consequently not testable. the same holdsfor other pitfalls such as loopholes: phrasing that acertain property of the software under developmentshould be fulﬁlled as far as possible leaves room forsubjective (mis-)interpretation and, thus, can havesevere consequences during the acceptance phase of aproduct [24, 33].to detect such quality defects, quality assuranceprocesses often rely on reviews. reviews of require-ments artifacts, however, need to involve all relevant


stakeholders [65], who must manually read and un-derstand each requirements artifact. moreover, theyare diﬃcult to perform. they require a high domainknowledge and expertise from the reviewers [65] andthe quality of their outcome depends on the quality ofthe reviewer [75]. on top of all this, reviewers couldbe distracted by superﬁcial quality defects such as theaforementioned vague formulations or loopholes. wetherefore argue that reviews are time-consuming andcostly.therefore, quality assurance processes would beneﬁtfrom faster feedback cycles in requirements engineer-ing (re), which support requirements engineers andproject participants in immediately discovering cer-tain types of pitfalls in requirements artifacts. suchfeedback cycles could enable a lightweight qualityassurance, e.g., as a complement to reviews.since requirements in industry are nearly exclu-sively written in natural language [58] and naturallanguage has no formal semantics, quality defects inrequirements artifacts are hard to detect automati-cally. to face this challenge of fast feedback and theimperfect knowledge of a requirement’s semantics, wecreated an approach that is based on what we callrequirements (bad) smells. these are concrete symp-toms for a requirement artifact’s quality defect forwhich we enable rapid feedback through automaticsmell detection.in this paper, we contribute an analysis of whetherand to what extent requirements smell analysis cansupport quality assurance in re. to this end, we


1. deﬁne the notion of requirements smells and in-tegrate the requirements smells1 concept into ananalysis approach to complement (constructiveand analytical) quality assurance in re,


2. present a prototypical realization of our smelldetection approach, which we call smella, and


3. conduct an empirical investigation of our ap-proach to better understand the usefulness of


1in context of our studies, we use the iso/iec/ieee29148:2011 standard [33] (in the following: iso 29148) asbasis for deﬁning requirements quality. the standard suppliesa list of so-called requirements language criteria, such asloopholes or ambiguous adverbs, which we use to deﬁne eightsmells (see also the smell deﬁnition in sect. 3.2).


2


a requirements smell analysis in quality assur-ance.our empirical evaluation involves three industrialcontexts: the companies daimler ag as a represen-tative for the automotive sector, wacker chemie agas a representative for the chemical sector, and tech-divison gmbh as an agile-specialized company. wecomplement the industrial contexts with an academicone, where we apply smella to 51 requirements arti-facts created by students. with our evaluations, weaim at discovering the accuracy of our smell analysistaking both a technical and a practical perspectivethat determines the context-speciﬁc relevance of thedetected smells. we further analyze which require-ments quality defects can be detected with smells, andwe conclude with a discussion of how smell detectioncould help in the (industrial) quality assurance (qa)process.


previously published material


this article extends our previously published work-shop paper [24] in the following aspects: we providea richer discussion on the notion of requirementssmell and give a precise deﬁnition. we introduceour (extended) tool-supported realization of our smellanalysis approach and outline its integration into theqa process. we extend our ﬁrst two case studies withanother industrial one as well as with an investigationin an academic context to expand our initial empiricalinvestigations by


1. investigating the accuracy of our smell detectionincluding precision, recall, and relevance from apractical perspective,


2. analyzing which quality defects can be detectedwith smells and


3. gathering practitioner’s feedback on how theywould integrate smell detection in their qa pro-cess considering both formal and agile processenvironments.


outline


the remainder of this paper is structured as follows.in sect. 2, we describe previous work in the area. insect. 3, we deﬁne the concept of requirements smellsand describe how we derived a set of requirements


smells from iso 29148. we introduce the tool real-ization in sect. 4 and discuss the integration of smelldetection in context of quality assurance in sect. 5.in sect. 6, we report on the empirical study that weset up to evaluate our approach, before concludingour paper in sect. 7.


2. related work


in the following, we discuss work relating to theconcept of natural language processing and smells ingeneral, followed by quality assurance in re, beforecritically discussing currently open research gaps.


2.1. the notion of smells in software engineeringthe concept of code smells was, to the best of ourknowledge, ﬁrst proposed by fowler and beck [27]to answer the question at which point the quality ofcode is so low that it must be refactored. accordingto fowler and beck, the answer cannot be objectivelymeasured, but we can look for certain concrete, visiblesymptoms, such as duplicated code [27] as an indicatorfor bad maintainability [35]. this concept of smells,as well as the list that fowler and beck proposed, ledto a large ﬁeld of research. zhang et al. [76] providean in-depth analysis of the state of the art in codesmells. the metaphor of smells as concrete symptomshas since then been transferred to quality of otherartifacts including (unit) test smells [72] and smells forsystem tests in natural language [31]. ciemniewskaet al. [12], further characterize diﬀerent defects of usecases through the term use case smell. in our work,we extend the notion of smells to the broader contextof requirements engineering and introduce a concretedeﬁnition for the term requirements smell.


2.2. quality assurance of software requirementsthe concept of requirements smells is located inthe context of re quality assurance (qa), which isperformed either manually or automatically.


manual qa. various authors have worked on qa forsoftware requirements by applying manual techniques.some put their focus on the classiﬁcation of qualityinto characteristics [15], others develop comprehen-sive checklists [2, 6, 50, 39, 38]. regarding qa, some


3


develop constructive qa approaches, such as creatingnew re languages, e.g. [17], to prevent issues up front,others develop approaches to make analytic qa, suchas reviews, more eﬀective [69]. in a recent empiricalstudy on analytical qa, parachuri et al. [60] manu-ally investigate the presence of defects in use cases.to sum it up, these works on manual qa provideanalytical and constructive methods, as well as (vary-ing) lists for defects. they strengthen our conﬁdencethat today’s requirements artifacts are vulnerable toquality defects.


automatic qa. various publications discuss the au-tomatic detection of quality violations in re. wesummarize existing approaches and tools, their pub-lications, and empirical evaluations in table 2. wealso created an in-depth analysis of in total 27 relatedpublications evaluating which quality defects or smellsthe approaches opt for in their described detection.in the following, we will ﬁrst explain two related ar-eas (automatic qa for redundancy and for controlledlanguages), before discussing automatic qa for ambi-guity in general. for ambiguity, we ﬁrst describe thoseapproaches that conducted empirical evaluations ofprecision or recall of quality defects related, but notidentical to, the ones of iso 29148. afterwards, we fo-cus on publications that mention the same criteria asin the iso 29148 (see table 1 for this list and their re-spective empirical evaluations) and discuss the chosenapproaches and results. we publish the complete listof each quality defect that is detected by each of the27 papers, as well as the precision and recall (whereprovided), online as supplementary material [25].


automatic qa for redundancy. one speciﬁc area ofqa is avoiding redundancy and cloning. whereasjuergens et al. [34] use conqat to search for syn-tactic identity resulting from a copy-and-paste reuse,falessi et al. [21] aim at detecting similar content,therefore using methods from information retrieval(such as latent semantic analysis [52]).rago etal. [62] extend this work speciﬁcally for use cases.their tool, reqalign, classiﬁes each step with a se-mantic abstraction of the step. these publicationsanalyze the performance of their approaches, and de-


pending on the artifact and methods achieve precisionand recall close to 1 (see table 2).


automatic qa for controlled languages. another spe-ciﬁc area is the application of controlled language andthe qa of controlled language. reta [4] speciﬁcallyanalyzes requirements that are written via certainrequirements patterns (such as with the ears tem-plate [54]). their goal is to detect both conformanceto the template but also some of the ambiguities as de-ﬁned by berry et al [7]. the authors report on a casestudy where they look at the template conformancein depth, indicating that template conformance canbe classiﬁed with various nlp suites to a high accu-racy (precision > 0.85, recall > 0.9), both with andwithout glossaries. however, the performance of am-biguity detection (such as the detection of pronouns)is not further discussed in the publication. similarly,aqusa [51] analyzes requirements written in userstory format (c.f. [14] for a detailed introduction intouser stories), and detects various defects, such as miss-ing rationales, where they achieve a precision of 0.63-1.circe [1, 29] is a further tool that assumes that re-quirements are written in such requirements patternsand detects violations of context- and domain-speciﬁcquality characteristics by building logical models. theauthors report on six exemplary ﬁndings, which weredetected in a nasa case study. however, despitetheir value to automatic qa, such approaches requirevery speciﬁc requirements structure.


automatic qa for ambiguity in general. the remain-ing approaches listed in table 2 aim at detectingambiguities in unconstraint natural language. sincethe quality defects detected by the approaches byciemniewska et al. [12], kof [45], hera by knauss etal. [41, 42], kiyavitskaya et al. [40], resi by körneret al. [46, 47, 48], and alpino by debruijn et al. [16]are not the ones discussed in iso 29148 and since wecould not ﬁnd an evaluation of precision and recall ofthese approaches, we omit discussing these approachesin-depth here. an analysis of what these approachesfocus on in detail as well as their evaluation can befound in short in table 2 and in full length in our sup-plementary material online [25]. in the following, weﬁrst report on those publications that focus on criteria


4


diﬀerent from iso 29148, but which report precisionor recall. afterwards, we describe publications thataim at detecting quality violations of iso 29148 (seetable 1).first, chantree et al. [11] target the speciﬁc gram-matical issue of coordination ambiguity (detectingproblems of ambiguous references between parts of asentence), mostly through statistical methods, suchas occurrence and co-occurrence of words. in a casestudy, they report on a precision of their approachmostly between 54% and 75%.even though theydo not explicitly diﬀerentiate between the detectedambiguities and the concept of pronouns. second,gleich et al. [30] base their approach on the ambigu-ity handbook, as deﬁned by berry et al. [7], as wellas company-speciﬁc guidelines. they compare theirdictionary- and pos-based approach against a goldstandard which they created by letting people high-light ambiguities in requirements sentences. the goldstandard deviates substantially, however, from what isconsidered high quality in their guidelines. therefore,they create an additional gold standard, mostly basedon the guideline rules. consequently, their precision2


varies between 34% for the pure experts opinion, to97% for a more guideline-based gold standard. third,krisch and houdek [49], focus on the detection ofpassive voice and so-called weak words. they presenttheir dictionary- and pos-based approach to practi-tioners and ﬁnd many false positives, similar to ourrq 3. in average, a precision of 12% is reported forthe weak words detection. these approaches focus onvery related, but not identical quality violations orsmells.


automatic qa for iso 29148 criteria. lastly, wespeciﬁcally focus on those approaches that reportto detect the criteria from the iso 29148 standard.table 1 provides an overview of these works and theirrespective evaluations.


2gleich et al. calculate their metrics based on the combina-tion of all ambiguities; unfortunately, they do not diﬀerentiate,e.g. by the type of ambiguity. also, to our knowledge, thegold standard does not diﬀerentiate between the types. thisprevents a direct comparison to their work.


the arm tool [74] deﬁnes quality in terms of the(now superseeded) ieee 830 standard [32] and pro-poses generic metrics, instead of giving feedback di-rectly to requirements engineers. the metrics arecalculated through counting how often a set of pre-deﬁned terms (per metric) occurs in a document, in-cluding a metric of what we call loopholes. eventhough they report on a case study with 46 speciﬁ-cations from nasa, only a quantitative overview isreported3. the quars tool [19, 18] is based on theauthor’s experience. bucchiarone et al. [10] describethe use of quars in a case study with siemens andshow some exemplary ﬁndings. sytwo [22] adoptsthe quality model of quars and applies it to usecases. loopholes and subjectivity are part of thequars quality model. also rqa is built on a dif-ferent, proprietary quality model, as described bygénova et al. [28], which includes negative terms aswell as pronouns as quality defects. these works alsobuilt upon extending natural language with nlp an-notations, such as pos tags and searching throughdictionaries for certain problematic phrases. however,we could not ﬁnd a detailed empirical investigationof these tools, e.g. with regards to precision and re-call. sree is an approach by tjong and berry [70],which aims at detection of ambiguities with a recallof 100%. therefore, they completely avoid all nlpapproaches (since they come with imprecision), andbuild large dictionaries of words. the tool includesdetection of loopholes, as well as pronouns; however,they report only on an aggregated precision for allthe diﬀerent types of ambiguities (66-68%) from twocase studies. in our previous paper [24], we searchedfor violations of iso 29148, yet we provided only aquantitative analysis, as well as qualitative examples.as mentioned before, reta also issues warnings forpronouns, however, the evaluation in their paper [4]focusses on template conformance.


2.3. discussion


previous work has led to many valuable contribu-tions to our ﬁeld. to explore open research gaps, wenow critically reﬂect on previous contributions from


3see also our rq 1 in sect. 6.


5


table 1: related work on criteria of iso-29148 standard, detailed supplementary material can be foundonline [25]


armquarsrqasreesmellareta[74][19][18][22][10][28][70][24][4]


ambiguous adv. & adj.e/qcomparativese/qloopholes (or options)qe/qe/qeeq*/p*e/qnegative termsoe/qnon-veriﬁable termse/qpronounsoq*/p*e/qosubjectivitye/qe/qeee/qsuperlativese/q


legend: o=no empirical analysis, e=examples from case, q=quantiﬁcation, p=precision analyzed,r=recall analyzed, *=aggregated over multiple smells


an evaluation, a quality deﬁnition and a technicalperspective.


first, one gap in existing automatic qa approach-es is the lack of empirical evidence, especially underrealistic conditions. only few of the introduced contri-butions were evaluated using industrial requirementsartifacts.those who do apply their approach onsuch artifacts focus on quantitative summaries ex-plaining which ﬁnding was detected and how oftenit was detected. some authors also give examples ofﬁndings, but only few works analyze this aspect indepth with precision and recall, especially in the fuzzydomain of ambiguity (see table 2). when looking atthe characteristics that are described in iso 29148,we have not seen a quantitative analysis of precisionand recall. furthermore, reported evidence does notinclude qualitative feedback from engineers who aresupposed to use the approach, which could revealmany insights that cannot be captured by numbersalone. however, we postulate that the accuracy ofquality violations very much depends on the respectivecontext. this is especially true for the fuzzy domain ofnatural language where it is important to understandthe (context-speciﬁc) impact of a ﬁnding to rate itsdetection for appropriateness and eventually justifyresolving the issue.


second, the existing approaches are based on pro-prietary deﬁnitions of quality, based on experienceor, sometimes, simply on what can be directly mea-sured. the arm tool [74] is loosely based on the


ieee 830 [32] standard. however, as the recent liter-ature survey by schneider and berenbach [67] states:“the iso/iec/ieee 29148:2011 is actually the stan-dard that every requirements engineer should be fa-miliar with”. we are not aware of an approach thatevaluates the current iso 29148 standard [33] in thisrespect. as table 1 shows, for most language qualitydefects of iso 29148, there has not yet been a toolto detect these quality defects. to all our knowledge,for neither of these factors, there is an diﬀerentiatedempirical analysis of precision and recall. yet, manyother quality models (most notably from the ambigu-ity handbook by berry et al. [7]) and quality violationscould lead to requirements smells, as far as they com-ply with the deﬁnition given in the next section.


finally, taking a more technical perspective, ourrequirements smell detection approach does not fun-damentally diﬀer from existing approaches. similarto previous works, we apply existing nlp techniques,such as lemmatization and pos tagging, as well asdictionaries. for the rules of the iso 29148 standard,no parsing or ontologies (as used in other approaches)were required. however, to detect superlatives andcomparatives in german, we added a morphologicalanalysis, which have not yet seen in related work.


in summary, in our contribution, we extend thecurrent state of reported evidence on automatic qafor requirements artifacts via systematic studies interms of distribution, precision, recall, and relevance,as well as by means of a systematic evaluation with


6


table 2: related approaches and tools, and their evaluation, detailed supplementary material can be found online [25]


tool/approachpurpose (unless ambiguity det.)publicationsevaluationprecisionrecall


conqatredundancy[34]e/q/p0.27-1–(falessi)redundancy[21]q/p/rup to 96up to 96reqalignredundancy[62]q/p/r0.630.86


retastructured language rules[4]e/q/p/r0.85-0.940.91-1aqusauser story rules[51]e/q/p0.63-1–circestructured language rules[29] [1]e––


(ciemniewska)[12]e––(kof)[44]e/q––(kiyavitskaya)[40]e/q––resi[46] [47] [48]e/q––hera[41] [42]e––alpino[16]e/q––


(chantree)[11]e/p/r0.6-10.02-0.58gleich[30]e/q*/p*/r*0.34-0.970.53-0.86(krisch)[49]e/q/p0.12–


armre artifact metrics[74]q––quars / sytwo[19] [18] [22] [10]e/q––rqa[28]o––sree[70]q*/p*0.66-0.68*–smella[24]e/q––


legend: o=no empirical analysis, e=examples from case, q=quantiﬁcation, p=precision analyzed, r=recall analyzed,*=aggregated over multiple smells


7


practitioners under realistic conditions. we performthis on both existing, as well as new quality defectstaken from the iso 29148. therefore, we extend ourpreviously published ﬁrst empirical steps [24] to closethese gaps by thorough empirical evaluation.


3. requirements smells


we ﬁrst introduce the terminology on requirementssmells as used in this paper. in a second step, wedeﬁne those smells we derived from iso 29148 andwhich we use in our studies, before describing the toolrealization in the next section.


3.1. requirements smell terminology


code smells are supposed to be an imprecise in-dication for bad code quality [27].we apply thisconcept of smells to requirements and deﬁne it asfollows: a requirements smell is an indicator of aquality violation, which may lead to a defect, with aconcrete location and a concrete detection mechanism.in detail, we consider a smell as having the followingcharacteristics:


1. a requirements smell is an indicator for a qual-ity violation of a requirements artifact. for thisdeﬁnition, we understand requirements quality interms of quality-in-use, meaning that bad require-ments artifact quality is deﬁned by its (potential)negative eﬀects on activities in the software life-cycle that rely on these requirements artifacts(see also [26]).


2. a requirements smell does not necessarily leadto a defect and, thus, has to be judged by the con-text (supported e.g. by (counter-/)indications).whether a requirements smell ﬁnding is or isnot a problem in a certain context must be indi-vidually decided for that context and is subjectto reviews and other follow-up quality assuranceactivities.


3. a requirements smell has a concrete locationin an entity of the requirements artifact itself,e.g. a word or a sequence. requirements smellsalways provide a pointer to a certain location that


qa must inspect. in this regard, it diﬀers fromgeneral quality characteristics, e.g. completeness,that only provide abstract criteria.


4. a requirements smell has a concrete detectionmechanism. due to its concrete nature, require-ments smells oﬀer techniques for detection of thesmells. these techniques can, of course, be moreor less accurate.


furthermore, we deﬁne a quality defect as a concreteinstance or manifestation of a quality violation in theartifact, in contrast to a ﬁnding which is an instanceof a smell. however, like a smell indicates for a qualityviolation, the ﬁnding indicates for a defect. fig. 1visualizes the relation of these terms.


instance


quality model


requirements smells


indicates for


re 


entity


supported by


indicates for


detects


automated by


present in


instance of


decreases


findingquality 


defect


smellquality 


violation


quality-in-


use


smell 


detector


figure 1: terminology of requirements smells (sim-pliﬁed)


in the following, we will focus on natural languagerequirements smells, since requirements are mostlywritten in natural language [58]. furthermore, the realbeneﬁts of smell detection in practice should comewith automation. therefore, the remainder of thepaper discusses only requirements smells where thedetection mechanism can be executed automatically(i.e. it requires no manual creation of intermediate orsupporting artifacts).


8


3.2. requirements smells based on iso 29148


we develop a set of requirements smells based onan existing deﬁnition of quality. for the investiga-tions in scope of this paper, we take the iso 29148requirements engineering standard [33] as a baseline.the reasons for this are two-fold.first, the iso 29148 standard was created to har-monize a set of existing standards, including theieee 830:1998 [32] standard. it diﬀerentiates betweenquality characteristics for a set of requirements, suchas completeness or consistency, and quality character-istics for individual requirements, such as unambiguityand singularity. the standard furthermore describesthe usage of requirements in diﬀerent project phasesand gives exemplary contents and structure for re-quirements artifacts. therefore, we argue that thisstandard is based on a broad agreement and accep-tance. recent literature studies come to the sameconclusion [67].second, the standard provides readers with a listof so-called requirements language criteria which sup-port the choice of proper language for requirementsartifacts. the authors of the standard argue thatviolating the criteria results “in requirements that areoften diﬃcult or even impossible to verify or may allowfor multiple interpretations" [33, p.12]. for deﬁningour smells, which we describe next, we refer to thissection of the standard and use all the deﬁned require-ments language criteria. we employ those criteriaas a starting point and deﬁne the smells by addingthe aﬀected entities (e.g. a word) and an explana-tion. here, we do not discuss the impact smells haveon the quality-in-use. essentially, smells hinder theunderstandability of requirements and consequentlytheir subsequent handling and their veriﬁcation (fora richer discussion, see also previous work in [26]).our current understanding is based on the ex-amples given by the standard.a subset ofthe language criteria,namelysubjective lan-guage,ambiguous adverbs and adjectives andnon-verifiable terms,as deﬁned in [33],arestrongly related, essentially since subjective languageis a special type of ambiguity, which may lead to is-sues during veriﬁcation. since the intention of thiswork is to start with the standard as a deﬁnition of


quality, in the following, we will remain with the pro-vided deﬁnition based on the language criteria andleave the development of a precise and complete setof requirements smells to future work. in detail, weuse the requirements language criteria to derive thesmells summarized next.


smell name:subjective languageentity:wordexplanation:subjective language refers towords of which the semantics isnot objectively deﬁned, such asuser friendly, easy to use, costeﬀective.example:the architecture as well as theprogramming must ensure a sim-ple and eﬃcient maintainabil-ity.


smell name:ambiguous adverbs and ad-jectivesentity:adverb, adjectiveexplanation:ambiguous adverbs and adjec-tives refer to certain adverbs andadjectives that are unspeciﬁc bynature, such as almost always, sig-niﬁcant and minimal.example:if the (...) quality is too low, afault must be written to the errormemory.


smell name:loopholesentity:wordexplanation:loopholes refer to phrases thatexpress that the following require-ment must be fulﬁlled only to acertain, imprecisely deﬁned ex-tent.example:as far as possible, inputs arechecked for plausibility.


9


smell name:open-ended, non-verifiabletermsentity:wordexplanation:open-ended, non-veriﬁable termsare hard to verify as they oﬀer achoice of possibilities, e.g. for thedevelopers.example:the system may only be acti-vated, if all required sensors (...)work with suﬃcient measure-ment accuracy.


smell name:superlativesentity:adverb, adjectiveexplanation:superlatives refer to requirementsthat express a relation of the sys-tem to all other systems.example:the system must provide the sig-nal in the highest resolution thatis desired by the signal customer.


smell name:comparativesentity:adverb, adjectiveexplanation:comparatives are used in require-ments that express a relation ofthe system to speciﬁc other sys-tems or previous situations.example:the display (...)contains theﬁelds a, b, and c, as well asmore exact build infos.


smell name:negative statementsentity:wordexplanation:negative statements are “state-ments of system capability notto be provided"[33]. some arguethat negative statements can leadto underspeciﬁcation, such as lackof explaining the system’s reac-tion on such a case.example:the system must not sign oﬀusers due to timeouts.


smell name:vague pronounsentity:pronounexplanation:vague pronouns are unclear rela-tions of a pronoun.example:the software must implementservices for applications, whichmustcommunicatewithcon-troller applications deployed onother controllers.


smell name:incomplete referencesentity:text referenceexplanation:incomplete references are refer-ences that a reader cannot follow(e.g. no location provided).example:[1] “unknown white paper". pe-ter miller.


4. smella:a prototype for requirementssmell detection


requirements smell detection, as presented in thispaper, serves to support manual quality assurancetasks (see also the next section). the smell detectionis implemented on top of the software quality analysistoolkit conqat,4 a platform for source code analysis,which we extended with the required nlp features.in the following, we introduce the process for the au-tomatic part of the approach, i.e. the detection andreporting of requirements smells. to the best of ourknowledge, there is no tool, other than the ones men-tioned in related work, that detect and present thesesmells in natural language requirements documents.the process takes requirements artifacts in vari-ous formats (ms word, ms excel, pdf, plain text,comma-separated values) and consists of four steps(see also fig. 2):


1. requirements parsing of the requirements arti-facts into single items (e.g. sections or rows),resulting in plain texts, one for each item


4http://www.conqat.org


10


requirements


annotationidentiﬁcationparsing


spec a1


spec b1


sec1req1req2req3


sec2req1req2


sec1req1req2req3


pos tagging


morphologic analysis


lemmatization


1234


presentation


overview 


dashboard


smell 


viewer


figure 2: the overall smell detection process


2. language annotation of the requirements withmeta-information


3. findings identiﬁcation in the requirements, basedon the language annotations


4. presentation of a human-readable visualizationof the ﬁndings as well as a summary of the results


the techniques behind these steps are explained inthe following section.


4.1. requirements parsing


our current tool is able to process several ﬁle for-mats: ms word, ms excel, pdf, plain text andcomma-separated values (csv). depending on theformat, the ﬁles are parsed in diﬀerent ways. plaintext and pdf are taken as is and parsed ﬁle by ﬁle.microsoft word ﬁles are grouped by their sections.for microsoft excel and csv ﬁles, we deﬁne thosecolumns that represent the ids or names (if there areany), and those columns should be used as text inputto detect smells.if a ﬁle is written in a known template, such as acommon template for use cases, we can make use ofthis template to understand structural defects, suchas lacking content items in a template. in the remain-der of this paper, however, we focus on the naturallanguage requirements smells as provided by the isostandard.


4.2. language annotationfor the annotation and smell detection steps, weemploy three techniques from natural language pro-cessing (nlp) [36]. table 3 additionally shows whichof the techniques we use for which smell.


pos tagging: for two smells, we use part-of-speech(pos) tagging. given a sentence in natural lan-guage, it determines the role and function ofeach single word in the sentence. the output isa so-called tag for each word indicating, for in-stance, whether a word is an adjective, a particle,or a possessive pronoun. we used the stanfordnlp library [71] and the rftagger [66] for this.both are statistical, probabilistic taggers thattrain models similar to hidden markov modelsbased on existing databases of tagged texts. adetailed introduction into the technical details ofpos tagging is beyond the scope of this paperbut can be found, for example, in [36]. we usepos tagging to determine so-called substitutingpronouns. these are pronouns that do not re-peat the original noun and, thus, need a human’sinterpretation of its dependency.


morphological analysis: based on pos tagging,we perform a more detailed analysis of text anddetermine a word’s inﬂection. this includes, interalia, determining a verb’s tense or an adjective’scomparison. we use this technique to analyze if


11


adjectives or adverbs are used in their compara-tive or superlative form.


dictionaries & lemmatization: for the remain-ing ﬁve smells, we use dictionaries based on theproposals of the standard [33] and on our ex-periences from ﬁrst experiments in a previouswork [24]. we furthermore apply lemmatizationfor these words, which is a normalization tech-nique that reproduces the original form of a word.in other words, if a lemmatizer is applied to thewords were, is or are, the lemmatizer will re-turn for all three the word be. lemmatizationis in its purpose very similar to stemming (see,e.g. the porter algorithm [61]), yet not basedon heuristics but on the pos tag as well as theword’s morphological form. for requirementssmells, the diﬀerence is signiﬁcant: for example,the words use and useful stem to the same wordorigin (use), but to diﬀerent lemmas (i.e. mean-ings; use and useful). whereas the lemma use ismostly clear to all stakeholders, the lemma usefulis easily misinterpreted.


4.3. findings identiﬁcation


based on the aforementioned information, we iden-tify ﬁndings. this step actually ﬁnds the parts of anartifact that exhibit bad smells. dependent on theactual smell, we use diﬀerent techniques, as shown intable 3. if the smell relates to a grammatical aspect,we search through the information from pos taggingand morphological analyses. for example, for thesuperlatives smell, we report a ﬁnding if an adjec-tive is, according to morphologic analysis, inﬂectedin its superlative form. if the smell does not relateto grammatical aspects but rather the semantics ofthe requirements, we identify the smell by matchingthe lemma of a word against a set of words from pre-deﬁned dictionaries. since the requirements underanalysis in our cases did not contain references, in-complete references are not part of our tool at present.


4.4. findings presentation


we implemented the presentation of ﬁndings ina prototype, which we call smella (smell analysis).


smella is a web-based tool that enables viewing, re-viewing and blacklisting ﬁndings as well as a hotspotanalysis at an artifact level. in the smella presenta-tion, we display the complete requirements artifactand annotate ﬁndings in a spell checker style. thisfollows the idea of smells as only indications that mustbe evaluated in their context. lastly, the system givesdetailed information when a user hovers a ﬁnding (seefig. 3). in the following, we shortly describe the fea-tures of smella in detail to provide the reader with arough understanding of the prototype.


view ﬁndings: at the level of a single artifact, wepresent the text of the artifact and its structure.we mark all ﬁndings in the text. with a click onthe markers, more information about the ﬁndingis displayed. the tool provides an explanation ofthe rationale behind this smell and possible im-provements for the ﬁnding depending on the smell(every smell has a message for improvements).


review ﬁndings: we allow the user to write a re-view and to set a status for each ﬁnding, bothsupporting feedback mechanisms within and be-tween project teams. a user has the possibilityto accept or reject a ﬁnding but also to set a cus-tom state, for example under review. accepting aﬁnding means the ﬁnding needs to be addressed.if a ﬁnding is rejected, the ﬁnding does not needto be addressed. the semantics of the customstatus is open to the reviewer.


blacklist ﬁndings: smells are only indicators forissues. therefore, users can reject ﬁndings. ifa ﬁnding is rejected by the user, the ﬁnding isremoved from the visualization and will not bepresented to the user anymore.


disable smells: often, users are interested in only asubset of smells or even just one smell. therefore,we allow the user to hide all ﬁndings of particularsmells and to select the smells she wants to displayin the artifact view.


analyze hotspots: in this view, we present all ar-tifacts in a colored treemap (see fig. 4). everybox in the treemap is one artifact, with the color


12


figure 3: a sample output from the smell detection tool (detailed artifact view) with some smells disabledand some ﬁndings blacklisted


13


figure 4: a sample output from the smell detection tool (hotspot analysis view)


14


table 3: detection techniques for smells


smell namedetection mechanism


subjective languagedictionaryambiguous adverbs and adjectivesdictionaryloopholesdictionaryopen-ended, non-veriﬁable termsdictionarysuperlativesmorphological analysis or pos taggingcomparativesmorphological analysis or pos taggingnegative statementspos tagging and dictionaryvague pronounspos tagging: substituting pronouns.incomplete referencesnot in scope of this study


of the box indicating the number of ﬁndings: themore red an artifacts is, the more ﬁndings it con-tains (the more it “smells” bad). the artifactsare grouped by their folder structure. the toolprovides a summarized treemap for all smellsas well as a separate treemap for all individualsmells. with these treemaps, users can identifyartifacts or groups of artifacts exhibiting a highnumber of ﬁndings – for one single smell but alsofor all smells together. this feature supports theidentiﬁcation of candidates for in-depth reviews.


5. requirements smell detection in the pro-cess of quality assurance


the requirements smell detection approach de-scribed in previous sections serves the primary purposeof supporting quality assurance in re. the detectionprocess itself is, however, not restricted to particu-lar quality assurance tasks, nor does it depend on aparticular (software) process model as we will showin sect. 6. hence, a smell detection, similar to thenotion of quality itself, always depends on the viewsin a socio-economic context. thus, how to integratesmell detection into quality assurance needs to be an-swered according to the particularities of that context.in the following, we therefore brieﬂy outline the rolesmell detection can generally take in the process ofquality assurance. more concrete proposals on howto integrate it into speciﬁc contexts are given in ourcase studies in sect. 6.


we postulate the applicability of the requirementssmell detection in the process of both constructiveand analytical quality assurance (see fig. 5). fromthe perspective of a constructive quality assurance,authors can use the smell detection to increase theirawareness of potential smells in their requirementsartifacts and to remove smells before releasing an ar-tifact for, e.g., an inspection. external reviewers inturn, can then use the smell detection to prepare an-alytical, potentially cost-intensive, quality assurancetasks, such as a fagan inspection [20]. such an in-spection involves several reviewers and would beneﬁtfrom making potential smells visible in advance. iter-ative inspection approaches are also known as phasedinspections, as deﬁned by knight and myers [43].


we furthermore believe that one major advantageis that the scope of our smell detection is not toenforce resolving a potential smell but to increasethe awareness of the like and to make transparentlater reasoning why certain decisions have been taken.please note that two diﬀerent roles (e.g. requirementsengineer and qa engineer) can take two diﬀerent view-points on the same smell, respectively its criticalityand whether it should be resolved or not. in addition,a ﬁnding could be unambiguous to the author, butunclear to the target group of readers (represented bythe reviewers). therefore, one contribution of our tool-supported smell detection is also to actively foster thecommunication between reviewers and authors and toenable continuous feedback between both roles. forthis reason, we enable stakeholders in smella to com-


15


automatic 


smell detection


constructive qaanalytical qa


detectsmells


authorreviewer


feedback


view ﬁndings & review ﬁndings


view ﬁndings & review ﬁndings


create / update


visualizesmells


figure 5: a suggestion for applying requirements smell detection in qa


ment on detected smells and make explicit whetherthey need to be resolved or whether and why theyhave been accepted or rejected.


6. evaluation


for a better, empirical understanding of smells inrequirements artifacts, we conducted an exploratorymulti-case study with both industrial and academiccases. we particularly rely on case study researchover other techniques, such as controlled experiments,because we want to evaluate our approach in practicalsettings under realistic conditions. for the designand reporting of the case study, we largely follow theguidelines of runeson and höst [63].


6.1. case study design


our overall research objective is as follows:


research objective: analyze whether automaticanalysis of requirements smells helps in requirements


artifact quality assurance.


to reach this aim, we formulate four research ques-tions (rq). in the following, we introduce those re-search questions, the procedures for the case andsubjects selection, the data collection and analysis,and the validity procedures.


6.1.1. research questionsrq 1: how many smells are present in require-ments artifacts? to see if the automatic detectionof smells in requirements artifacts could help in qa,we ﬁrst need to verify that requirements smells existin the real world. the answer to this question fostersthe understanding how widespread the smells underanalysis are in industrial and academic requirementsartifacts.rq 2: how many of these smells are relevant?not only the number of detected smells is important.if many of the detected smells are false positives andnot relevant for the requirements engineers and devel-opers, it would hinder qa more than it would help.


16


as relevancy is a rather broad concept, we break downrq 2 into two sub-questions.rq 2.1: how accurate is the smell detec-tion? the ﬁrst sub-question looks at the moretechnical view on relevance. we want to ﬁndfalse positives and false negatives to determinethe precision and recall of the analysis in termsof correct detection of the deﬁned smell.rq 2.2: which of these smells are practi-cally relevant in which context? this sec-ond sub-question is concerned with practical rel-evance.we investigate whether practitionerswould react and change the requirement whenconfronted with the ﬁndings.rq 3: which requirements quality defects canbe detected with smells? after we understood howrelevant the analyzed requirements smells are, wewant to understand their relation to existing qualitydefects in requirements artifacts. hence, we need tocheck whether, and if so, which defects in requirementsartifacts correspond to smells, as we understand smellﬁndings as indicators for defects.rq 4: how could smells help in the qa pro-cess? finally, we collect general feedback from prac-titioners whether (and how) smell detection could bea useful addition to qa for requirements artifacts andwhether as well as how they would integrate the smelldetection into their qa process.


6.1.2. case and subjects selectionour case and subject selection is opportunistic butin a way that maximizes variation and, hence, eval-uates the smell detection in very diﬀerent contexts.this is particularly important for investigating re-quirements artifacts under realistic conditions, alsodue to the large variation in how these artifacts man-ifest themselves in practice. a prerequisite for ourselection is the access to the necessary data. to geta reasonable quantitative analysis of the number ofsmells (rq 1) and qualitative analysis of the rela-tion of smells and defects (rq 3), we complementour three industrial cases with a case in an academicsetting. there, various student teams are asked toprovide software with a certain set of (identical) func-tionality for a customer as part of a practical course.this is also a realistic setting but provides us with a


higher number of speciﬁcations and reviews than inthe industrial cases.we will refer to the subjects of the industrial casesas practitioners and we will call the latter subjectsstudents.


6.1.3. data collection procedurewe used a 6-step procedure to collect the datanecessary for answering the research questions.


1. collect requirements artifact(s) for each case. weretrieved the requirements artifacts to be ana-lyzed in each case. for one case, the require-ments were stored in microsoft word documents.for the other cases, this involved extracting therequirements from other systems, either a propri-etary requirements management tool (resultingin a list of html ﬁles), or the online task manage-ment system jira, which led to a set of comma-separated values ﬁles. for the student projects,the students handed in their ﬁnal artifacts eitheras a single pdf or as a pdf with the generalartifact and another pdf with the use cases.where authors explicitly structured requirementsin numbered requirements, user stories or usecases, we counted these artifacts.


2. run the smell detection via smella. we appliedour detection tool as introduced in sect. 4.4 onthe given requirements artifacts, which generateda list of smells per artifact.


3. classify false positives. for all cases in which wewanted to present our results to practitioners, wereviewed each detected ﬁnding. in pairs of re-searchers, we classiﬁed the ﬁndings as either trueor false positive. we classiﬁed a ﬁnding as falsepositive if the ﬁnding was not an instance of thesmell, e.g. because the results of the linguisticanalysis was incorrect.5for artifacts contain-ing more than 10 ﬁndings of a smell, we onlyinspected a set of 10 random ﬁndings (of that


5for example, if the linguistic analysis incorrectly classiﬁedthe word provider in the sentence “as a provider, i want [. . . ]”as a comparative adjective.


17


smell) per artifact. the same holds for case d,where we inspected 10 random ﬁndings of eachcategory for the whole case.


4. inspect documents for false negatives.tocalculate the recall of the smell detection,for each case we randomly selected one ar-tifact that a pair of researchers inspectedfor false negatives.to ease the manualinspection,we grouped the smells subjec-tive language,ambiguous adverbs and ad-jectives, loopholes, non-verifiable terms(as ambiguity-related smells). we classiﬁedwhether a ﬁnding is a true or false negative basedon the same conditions as in the previous step.


one common cause for false negatives fordictionary-based smells can be that an ambigu-ous phrase is not part of the dictionary. sincewe developed the dictionaries based on existingdictionaries, such as the standard, these dictio-naries are not yet complete and must be furtherdeveloped. however, since this is an issue that isnot a problem of the smell detection approach ingeneral, but rather a conﬁguration task, we didnot take these ﬁndings into consideration for therecall.


5. get rating by practitioners. we selected a subsetof the true positive ﬁndings so that we cover allsmells with a minimum of two ﬁndings per smellas far as the artifacts allowed. when we foundrepeating or similar ﬁndings, e.g. multiple similarsentences with the same smell, we also includedone of these ﬁndings into the set.


we presented this subset to the practition-ers and interviewed them, ﬁnding by ﬁnding,through three closed questions (see also table 9):q1: would you consider this smell as relevant?q2: have you been aware of this ﬁnding before?q3: would you resolve the ﬁnding? of these,the former two must be answered with yes orno. for the last question, we also needed to takethe criticality into account. therefore, in casepractitioners answered that they would resolve aﬁnding, we also asked whether they would resolveit immediately, in a short time (i.e. within this


project iteration) or in a long time (e.g. if it hap-pens again). in addition to these three questions,we took notes of qualitative feedback, such asdiscussions.


6. interview practitioners. in addition to the rat-ings, we performed open interviews with prac-titioners about their experience with the smelldetection and how they might include it in theirquality assurance process. we took notes of theanswers.


7. get review results from students. lastly, the stu-dents performed reviews of the artifacts of otherstudent teams. they documented and classiﬁedfound problems according to a checklist (see ta-ble a.11) without awareness of the smell ﬁndingsin their artifacts. we then collected the reviewreports from the students.


6.1.4. analysis procedurewe structure our analysis procedure into sevensteps. each step leads to the results necessary foranswering one of our research questions.


1. calculate ratios of ﬁndings per artifact. to un-derstand whether smells are a common issue inrequirements artifacts, we compared the quanti-tative summaries of smells in the various artifactsand domains. to enable a comparison betweendiﬀerent types of requirement artifacts, we usedthe number of words in each artifact as a measureof size. hence, we ﬁnally reported the ratio ofﬁndings per 1000 words for each smell and allsmells in total. this provided answers for rq 1.


2. calculate ratios of ﬁndings for parts of user sto-ries. in one case, we had a common structure ofthe requirements, because they were formulatedas user stories. to get a deeper insight into thedistribution of smells and ﬁndings, we calculatedthe ratios of ﬁndings per 1000 words for eachpart. we divided the user stories into the partswe counted the words and ﬁndings in each part.this provided further insights into the answer forrq 1.


18


3. calculate ratios of false positives. after a roughoverview obtained under the umbrella of rq 1describing the number of ﬁndings for each smellof the varying artifacts, we wanted to better un-derstand the smell’s relevance. the ﬁrst stepwas to calculate the ratios of false positive as weclassiﬁed them in step 3 of the data collection.we reported false positive rates overall and foreach smell. this provides the ﬁrst part of theanswer to rq 2.1.


4. calculate ratios of false negatives. the preci-sion of a smell detection is tightly coupled withthe recall. therefore, we calculated the ratio ofdetected smell ﬁndings to all existing ﬁndings,according to our manual inspection, as describedin step 4 of the data collection procedure. thisprovides the second part of the answer to rq 2.1.


5. calculate ratio of irrelevant smells. we were notonly interested in errors in the linguistic analysisbut also in how relevant the correct analyseswere for the practitioners. hence, we calculatedand reported the ratios of ﬁndings consideredirrelevant by the practitioners.this answersrq 2.2.


6. compare defects from reviews with ﬁndings. fromthe students, we received review reports for eachartifact. as the eﬀort to check them all wouldhave been overwhelming, we took a random sam-ple of 20% of the artifacts. for each of the defectsdetected in the review, we checked if there is acorresponding ﬁnding from a smell. this answersrq 3.


7. interpret interview notes. to answer ﬁnally rq 4,we analyze the interview transcripts and code theanswers given by the interviewees manually.


6.1.5. validity procedurefirst, we used peer debrieﬁng in the sense that alldata collection and analyses were done by at least tworesearchers. analysis results were also checked by allresearchers. this researcher triangulation especiallyincreases the internal validity. furthermore, we kept


an audit trail in a subversion system to capture allchanges to documents and analyses.second, we performed all the classiﬁcations of ﬁnd-ings into true and false positives in pairs. this alreadyhelped to avoid misclassiﬁcations. to further checkour classiﬁcations, we afterwards did an independentre-classiﬁcation of randomly selected 10% of the ﬁnd-ings and calculated the inter-rater agreement. wediscussed to clarify which ﬁndings we consider falsepositives and repeated the classiﬁcations until wereached an acceptable agreement. the same proce-dure held for the inspection of artifacts to detect falsenegatives, which we also conducted in pairs. further-more, we also independently re-classiﬁed one of theartifacts to understand the inter-rater agreement onthe false negatives. overall, our analysis for false pos-itives and relevance of the ﬁndings is also a validityprocedure in the sense that we check in rq 2 theresults from rq 1.third, we discussed with the practitioners whatrelevance of smells means in the context of the studyto avoid misinterpretations. furthermore, we gave thestudents review guidelines to give them an indicationwhat quality defects in requirements artifacts mightbe. both serve in particular as mitigation to threatsto the internal and the construct validity.fourth, we performed the analysis of the corre-spondence between smells and defects with a pair ofresearchers. this pair derived a classiﬁcation of thefound and not found defects. both other researchersreviewed the classiﬁcation, and we improved it itera-tively until we reached a joint agreement.fifth, we performed member checking by showingour transcriptions and interpretations for rq 4 to theinterviewed practitioners and incorporating feedback.finally, to support the external validity of the re-sults of our study, we aimed at selecting cases withmaximum variation in their domains, sizes, and howthey document requirements.


6.2. results


in the following, we report on the results of our casestudies. we ﬁrst describe the cases and subjects underanalysis, before we answer the research questions. weend by evaluating the validity of the cases.


19


6.2.1. case and subjects descriptionthe ﬁrst three cases contain requirements producedin diﬀerent industrial contexts: embedded systemsin the automotive industry, business information sys-tems for the chemical domain and agile developmentof web-based systems. while the ﬁrst two representrather classical approaches to requirements engineer-ing, the third case applies the concept of user stories,as it is popular in agile software development. thefourth case is in an academic background and employsboth use cases and textual requirements. regardingsubject selection, for each industrial case we selectedpractitioners involved in the company, domain andspeciﬁcation. we executed the ﬁndings rating (step 5)and the interviews regarding the qa process (step 6)with the same experts, so that their answer in step 6is based on their experience with practical, real ex-amples. in the following, we describe the cases, aswell as the experts or students for each case. table 4provides a quantitative overview of the cases.


case a: daimler ag. daimler ag is a multinationalautomotive corporation headquartered in stuttgart,germany. at daimler, we analyzed six diﬀerent re-quirements artifacts (a1–a6) which were written byvarious authors. the requirements artifacts describefunctionality in diﬀerent domains of engine control aswell as driving information. in this case, requirementsare written down in the form of sentences, identiﬁedby an id. the authors are domain experts who arecoached on writing requirements.the requirements artifacts a1–a6 consist of 323requirements in total (see table 4). all of the artifactsof daimler analyzed in our study were created bydomain experts in a pilot phase after a change in therequirements engineering process as part of a softwareprocess improvement endeavour.for rq 2.2., wereviewed 22 ﬁndings with an external coach who worksas a consultant for requirements engineering and hastightly collaborated with the group for many years.


case b: wacker chemie ag. in the second case, weanalyzed requirements artifacts of business informa-tion systems from wacker chemie ag. wacker is aglobally active company working in the chemical sec-tor and headquartered in munich, germany. the


systems that we analyzed fulﬁl company-internal pur-poses, such as systems for access to wacker buildingsor support systems for document management.we analyzed three wacker requirements artifactsthat were written by ﬁve diﬀerent authors. at wacker,functional requirements are written as use cases (in-cluding ﬁelds for name, description, role and pre-condition) whereas non-functional requirements aredescribed in simple sentences. the artifacts consistedof 53 use cases and 13 numbered requirements (seetable 4). for the reviews of the ﬁndings in rq 2.2,we selected 18 ﬁndings and discussed them with thechief software architect, who also has several yearsof experience in quality assurance.


case c: techdivision. for the third case, we ana-lyzed the requirements of the agile software engineer-ing company techdivision gmbh. techdivision hasaround 70 employees, working in 3 locations in ger-many. they focus mainly on web development, i.e.creating product portals and e-commerce solutions fora variety of companies, as well as web consulting, espe-cially focusing on search engine optimizations. manyof their products involve customisation of magento6


or typo37 frameworks.in their projects, techdivision follows an agile soft-ware development process using either scrum [68] orkanban [3] methodologies. for their requirements,techdivision applies user stories [14], which they writeand manage in atlassian jira8. user stories at tech-divison follow the common connextra format: as a[role], i want [feature], so that [reason]. we willalso follow this terminology here.the systems under analysis consist of two onlineshopping portals, a customer-relationship system anda content-management system, all of which we cannotname for non-disclosure-agreement reasons. in total,we analyzed over 1,000 user stories containing roughly28,000 words. for rq 2.2, we met with an experiencedscrum master and a long-term developer, who haveworked on several projects for techdivision.


6http://www.magento.com7http://www.typo3.org8https://atlassian.com/software/jira


20


case d: university of stuttgart. the requirements ofcase d were created by 52 groups of three 2nd-yearstudents each during a compulsory practical course inthe software engineering programme at the universityof stuttgart. we removed one artifact, because it wasincorrectly encoded, thus resulting in 51 requirementsartifacts for this analysis.


2000400060008000


figure 6: variation of size of requirements artifactsin case d in words


the resulting requirements artifacts diﬀer vastly instyle; hence, we were unable to count them in terms ofrequirements, but instead only counted the structureduse cases as provided by the authors, and quantiﬁedthe artifacts by word size.the average size of arequirements artifact was 4,471 words (min: 1,425,max: 8,807, see fig. 6) and contained 19 use cases(min: 6, max: 39), thus creating a set of artifacts ofnearly a quarter of a million words, including morethan 950 use cases.for practical reasons, we could not evaluate eachresearch question in each case: for example, rq 3depends on the existence of reviews with documentedresults, which is often not existent in practice. fur-thermore, depending the answers of rq 4 on the po-tentially less experienced students from case d wouldintroduce a threat to the validity of our evaluation.


table 5 shows the mapping between research ques-tions and study objects. the interviews for rq 2.2and rq 4 lasted 60 minutes for each case a and band 120 minutes for case c.


table 5: study objects usage in research questions


case


rq 1: distribution


rq 2.1: precision


rq 2.1: recall


rq 2.2: relevance


rq 3: defect types


rq 4: qa process


a: daimler✓✓✓✓b: wacker✓✓✓✓c: techdivision✓✓✓✓✓d: univ. of stuttgart✓✓✓✓


6.2.2. rq 1: how many requirements smells arepresent in the artifacts?under this research question, we quantify the num-ber of ﬁndings that appear in requirements. table 6shows the number of ﬁndings for each case, each re-quirements artifact and each smell and also puts thesenumbers in relation to the size of the artifact. weanalyzed requirements of the size of more than 250kwords, on which the smell detection produced in totalmore than 11k ﬁndings, thus revealing roughly 44ﬁndings per thousand words.table 6 shows that all requirements artifacts containﬁndings of requirements smells. they vary from 5ﬁndings for the smallest9 case (a3) up to 572 for thelargest case (c4). the number of ﬁndings stronglycorrelates with the size of the artifact (see fig. 7,spearman correlation of 0.9). hence, in the remainder,we normalize the number of ﬁndings by the size of theartifact.the artifacts of daimler have an average of 26 ﬁnd-ings per thousand words, in contrast to 41 for both


9in terms of total number of words


21


g


g


g


g


020004000600080001000012000


0100200300400500


number of words in artifact


number of findings in artifact


a1a2


a3


a4a5


a6


b1


b2b3


c1


c2


c3


c4


d6


d11


d13


d15


d16


d19


d20


d22


d24


d28


d31


d32


d34


d41


d42


d43


d45


d49


g


daimler


wacker


techdivision


stuttgart


figure 7: number of ﬁndings strongly correlates with size of artifact (for readability reasons, for the stuttgart cases (blue) onlyids of less correlating artifacts are displayed).


22


wacker and techdivision and 43 for the artifacts pro-duced by the students. best to analyze the variancewithin a requirements artifact seems case d, in whichmultiple teams had a similar background and projectsize. fig. 8 shows the variance between the artifactsof case d with an average of 44 ﬁndings, a minimumof 26 ﬁndings (d11) and a maximum of 75 ﬁndings(d32) per 1,000 words.


g


g


g


3040506070


figure 8: number of ﬁndings per 1,000 words in cased


when inspecting the diﬀerent requirements smells,we can see that the most common smells are vaguepronouns with 25 ﬁndings per 1,000 words, followedby the negative words smell with 6 ﬁndings andthe loophole smell with 4 ﬁndings.the least of-ten smells are non-verifiable terms with 1 ﬁndingper 1,000 words, and ambiguous adverbs and ad-jectives with 0.25 ﬁndings per 1,000 words. in fact,the most common smell, vague pronouns, appears100 times more often than the ambiguous adverbsand adjectives. to analyze the variance in depth,we again take the students’ artifacts for reference.fig. 9 shows the relative number of ﬁndings acrossthe projects.


interpretation. weinterpretthequantitativeoverview along three variables: projects, contexts andthe diﬀerent requirements smells.


projects when comparing at project level, we seethat cases a1–a6 (with outlier a5) and c1–c4(with outlier c3) show quite similar numbers.in contrast b1 to b3 vary between 28 and 68ﬁndings per 1,000 words.when looking intothe most extreme outliers b3 and d32, we see asystematic error that creates a large number ofﬁndings: both projects repeatedly explain whatthe system should10 do instead of what it mustdo. 16 of 19 loopholes ﬁndings in b3 and 29of 37 loophole ﬁndings in d32 root from thisproblem. this can lead to diﬃcult issues in con-tracting as requirements that are phrased witha should are commonly understood as optional(see e.g. rfc2119 [9] for a detailed explanation).


hence, we could see a surprising consistency intwo of three industrial case studies. the wackerdata varies, so does the students case. in bothcases, the negative extremes point at issues thatpotentially have expensive consequences.


context the four cases diﬀer strongly in their con-text: they write down requirements in diﬀer-ent forms, vary in their software developmentmethodology and also produce software for dif-ferent domains. when comparing the ﬁndingsat the domain level, we see that daimler arti-facts with an average of 26 ﬁndings per thousandwords contain less ﬁndings than both wacker andtechdivision with 41 ﬁndings and the artifactsproduced by the students with 43 ﬁndings.


our partners reported that there have been train-ings for the authors of the cases a1–a6 recently,which could explain the diﬀerence. another rea-son could be the strong focus that the automotivedomain puts on requirements and requirementsquality in contrast to the other domains. lastly,also the strict process in this domain could be a


10soll is a german modal verb that is less strict than anenglish must.


23


g


g


g


g


g


g


g


g


g


g


g


g


g


gg


subjectiveloopholesvague p.superlativesnegativescomparativesnon−verifiableamb. adverbs


01020304050


figure 9: variation of smells per 1,000 words in case d


24


reason for this striking diﬀerence of the daimlerrequirements. unsurprisingly, the students’ re-quirements form the lower end of the scale, yetnot by much.


requirements smells when comparing the eightsmells, we see a strong variance between the num-ber of ﬁndings, both in absolute as well as relativevalues. a qualitative inspection indicates reasonsfor the most occurring smells. first, the smelldetection for vague pronouns ﬁnds all substi-tuting pronouns in the requirements. especiallyin german, in many sentences the reference ofthe pronoun can sometimes be derived from gen-der and grammatical case of the word, thus cor-rectly detecting pronouns, but not vague pro-nouns. rq 2.1 quantiﬁes this issue. second, themost common indication for loophole ﬁndingsis the aforementioned use of the word should. wediscuss this case in-depth with practitioners inrq 2.2. third, we will also inspect reasons forthe high number of negative words ﬁndings inrq 2.1 and rq 2.2.


answer to rq 1. the number of ﬁndings in require-ments artifacts strongly correlates with the size ofthe artifact. there are roughly 44 ﬁndings per 1,000words and some contexts show a striking similarityin the number of ﬁndings for their artifacts. in ourcases, the automotive requirements had a lower num-ber of ﬁndings whereas student artifacts containeda higher number of ﬁndings relative to the size ofthe artifacts. the most common ﬁndings are for thesmells loopholes and vague pronouns.


to understand the capabilities of the smell detec-tion, we need to understand precision as metric indi-cating how many of the detected ﬁndings are correct,as well as recall as a metric indicating how many ofthe correct ﬁndings are detected.


precision. to understand to which extent the num-bers of ﬁndings for certain smells in rq 1 are causedby the detection mechanism, we inspected a randomsample of 616 ﬁndings by taking equivalent sets of


ﬁndings from each project and manually classifyingwhether the ﬁnding fulﬁlls the smell deﬁnition. wecould not inspect the same number of ﬁndings of eachsmell for each project, because some projects only hadfew or even no ﬁndings of a certain smell (see numberof ﬁndings per project in table 6).table 7 and fig. 10 show the summary of this anal-ysis: the precision of the detection of the subjec-tive language smell revealed only three false pos-itives in total, thus leading to a precision of 0.96.non-verifiable words, loophole, and ambiguousadverbs and adjectives smells range between 0.70and 0.81, hence leading to roughly one mistake in foursuggestions. comparative and superlative smellsrange around 0.5 which would mean that every sec-ond ﬁnding is correct. at the rear end of the listare the negative words and vague pronouns smellswith one correct ﬁnding in three to four suggestions.across all smells, the precision is between 0.48 (over allinspections) and 0.59, if we take the varying numberof inspected ﬁndings between the smells into account.to understand these numbers, we qualitatively in-spected the false positive classiﬁcations, revealing thefollowing main reasons for false positives:


grammatical errors in real world language.


the ﬁrst issue that creates false positives is thefact that our study analyzes real world language.some of the requirements, especially in casec, contained a number of grammatical ﬂaws aswell as dialectal phrases, which lead to wrongresults in the automatic morphologic analysisand automatic pos tagging and consequentlyalso to false positives during smell detection.


vague pronouns. the smell detection for vaguepronouns showed the lowest precision. in thedetection of this smell, we look for substitutingpronouns, which are pronouns where the nounis not repeated after the pronoun11, of which wecharacterize only every fourth ﬁnding as a defect.the reason behind this poor performance, be-sides a number of false positives due to the poorgrammar mentioned before, is the comparably





25


large number of grammatical exponents of thegerman language. in addition to number andthree grammatical genders, the german languagealso has four grammatical cases. therefore, invarious instances of substituting pronouns, thereis only one grammatical possibility of what thepronoun could refer to.


findings in conditions. a third reason for falsepositives is that the smell detection, so far, takesvery little context into account. for example, thecomparatives smell aims at detecting require-ments that deﬁne properties of the system rela-tive to other systems or circumstances12. whensearching for grammatical comparatives in re-quirements, roughly 48% of the cases are of theaforementioned kind. in roughly the same num-ber of cases, however, the comparative describes acondition. for example, if the requirement statesthat if the system takes more than 1 second to re-spond [. . . ], the comparison is not against anothersystem or circumstance but against absolute num-bers. therefore, in this case, the comparativedoes not indicate a problem (one could even arguethat this is an indicator for good quality).


a similar problem holds for the negativephrases smell: the smell detection aims at re-vealing statements of what the system should notdo. often, however, the negative is mentionedin conditions. for example, if the requirementsexpress what to do if the user input is not zero[. . . ], the negation relates to a condition and notto a property of the system.


recall. when analyzing the accuracy of an automaticdetection, we must look not only at precision, butalso at recall, i.e. the ratio of all detected ﬁndings toall defects of a certain type in an artifact. to thisend, we inspected one artifact of each case, in total a


12as discussed in sect. 3.2, the problem of comparatives inrequirements is validation: how can we understand whethera system fulﬁlls a requirements if that requirement is statedin a relative instead of an absolute way? what if the systemin comparison changes its properties, would this render therequirement suddenly unfulﬁlled?


set of roughly 16,200 words, and manually identiﬁedthe ﬁndings in each artifact. due to the problems ofdistinguishing the various ambiguity-related smells,we analyzed the recall of these four smells as if itwas one smell, without further diﬀerentiation (seesection 6.1.3).the manual inspection revealed 200 ﬁndings in thisartifact sample and an average recall of 0.82. table 8and fig. 10 show the summary of the results: the com-parison shows a recall between 0.84 and 0.95 for fourof the ﬁve investigated smells. the highest recall wasachieved by the comparative requirements smell,with 0.95, which means that the smell detection missedone in 20 ﬁndings. the ﬁfth smell, with the lowestrecall, is superlative requirements smell with arecall of 0.5. however, this smell is one of the rarestof the smells, as one can also see in the results to rq1. therefore our analysis of the recall of this smell isbased on few data points. hence, we suggest to takethe recall of this smell with care, and suggest thatfuture studies should investigate this issue in moredepth.a further analysis of the false negatives shows thatthe smell detection missed ﬁndings because of impre-cisions in the nlp libraries (i.e. stanford nlp [71] forlemmatization and pos tagging and rftagger [66]for morphologic analysis). for the dictionary-basedsmells, the lemmatization did not correctly deducethe correct lemma, e.g. it did not understand thata certain word was a plural of a lemma.if onlythe lemmatized version of the word, i.e. the singularform, is in the dictionary, then the smell detectordoes not correctly identify the smell. in the false neg-ative cases for the comparative and superlativerequirements smell, rftagger did not correctlyclassify the inﬂection.


interpretation. the study revealed that the precisionstrongly varies between the diﬀerent smells. qual-itative analysis provided further insights describednext.we can now explain the high number of ﬁndingsfor vague pronouns in rq 1. if we assume that aquarter of the ﬁndings are correct, the number ofﬁndings in this category is closer to the remainingsmells. also, we could see that while there are certain


26


reasons of impreciseness that root from the studyobjects themselves and are, thus, unavoidable, thereis plenty of space for optimization. first, existingtechniques from nlp could be applied to improvecertain smells, such as the vague pronouns. second,from the examples we have seen, we would argue thatthe application of heuristics could heavily improve theprecision of existing smell detection techniques. forexample, if we exploit the information available frompos tagging, we can ﬁnd out whether a comparisonrefers to a number or numerical expression.regarding recall, our analysis shows only a slightvariance between the smells, with the only outlierbeing the superlative requirements smell; how-ever, since this is a very rare smell, this recall is basedon only few data points, therefore, we must considerthis result with care. when inspecting the reasonsfor false negatives, we found that optimizations couldbe made through the lemmatizer. future research inthis direction should compare whether the accuracy oflemmatizers as reported in the ﬁeld of computationallinguistics also holds for requirements engineering ar-tifacts. furthermore, we analyzed requirements ingerman language where lemmatization is a more dif-ﬁcult problem than in english, since the languagemakes stronger use of inﬂections (e.g. with cases orgender). hence, smell detectors based on lemmatiza-tion for the english language might work better thanthe results indicate in our analysis.in general, the precision and recall are thereforecomparable to other approaches with related purposes(see sect. 2). however, is it suﬃcient for an applicationof requirements smells in practice?first, when looking at precision, we must take intoaccount that the current state of practice consistsstill of manual work and that the cost for runningan automatic analysis is virtually zero. nevertheless,checking a false positive ﬁnding takes eﬀort which aninspector could rather spend in reading the documentin more detail. however, as we see a high variation inthe precision over diﬀerent smells, we need to discussthese separately. several of the smells have a preci-sion of 0.7 and higher which is considered acceptablein static code analysis [8]. for other requirementssmells, the precision is below 0.5. this means thatevery other ﬁnding will be a false positive. this can


be critical in the eﬀort spent in vain and annoy auser of the smell detection. yet, we follow menzies etal. [57] that a low precision can be still useful “whenthere is little or no cost in checking false alarms.” inour experience, the cost of checking a ﬁnding is oftenjust a few seconds.


second, when looking at recall, most of the smelldetections reach a recall of more than 80%. variouspublications, most prominently kiyavitskaya [40] andberry et al. [5], argue that a recall close to 100% is abasic requirement for any tool for automatic qa inre. the core argument is that with a lower recall, re-viewers stop checking these aspects and consequentlymiss defects, and that reviewers need to check thecomplete artifact anyway. however, if taking the ex-ample of spell checkers and grammar checks, these arestill used on a daily basis, although they are far awayfrom 100% recall. therefore, one could consequentlyalso argue that the precision is more important thanthe recall.


in any case, whether the reported precision and re-call are suﬃcient in industry needs further research inthe future. as mentioned above, it mainly depends ontwo factors: the required investment versus the gainedbeneﬁt (similar to the concept of technical debt). forthe required investment, we argue that, based on ourexperience of analyzing the various cases presentedhere, one can quickly iterate through the detectedﬁndings with low investment. to further support thisdiscussion, the following research question analyzesthe aspect of the beneﬁts to practitioners in moredetail.


answer to rq 2.1. as shown in tables 7 and 8, andas shown in fig. 10, the precision is on average around59%, with an average recall of 82%, but both varybetween smells. we consider this reasonable for a taskthat is usually performed manually. however, this alsodepends on the relevance of ﬁndings to practitioners,which we analyze in rq 2.2. the study also revealsimprovements for future work through the applicationof deeper nlp.


27


gggg


g


g


g


g


0.00.20.40.60.81.0


0.00.20.40.60.81.0


precision


recall


subjectivelanguage


ambiguous


adverbs


and


adjectives


loopholes


non−


verifiable


terms


superlative


requirements


comparative


requirements


negative


words


vague


pronouns


figure 10: precision and recall of the discussed smell detection approaches.


28


table 8: recall of smell detection within sample of 4artifacts (16,271 words)


smell


findings in artifacts


findings identiﬁed correctly


recall


ambiguity-related s.74640.86superlative requirements s.420.50comparative requirements s.21200.95negative words s.64540.84vague pronouns s.37340.92


average4034.80.82overall2001740.87


relevant in which context?to understand whether the requirements smellshelp detecting relevant problems, we ﬁrst performeda pre-study, in which we confronted practitioners ofdaimler and wacker with ﬁndings. the pre-study,which we reported in femmer et al. [24], aimed atreceiving qualitative and tacit feedback. it showedthat requirements smells can in fact indicate relevantdefects.in contrast, in this study we analyze relevance inspeciﬁc categories by interviewing practitioners attechdivision on their opinion on the ﬁndings in termsof relevance, awareness, and whether these practition-ers would resolve the suggested ﬁnding.


quantitative observations. table 9 reports the 20 ﬁnd-ings that we discussed with techdivision. in summary,we can see that they considered 65% of the ﬁndingsas relevant for their context. furthermore, they havenot been aware of 45% of the ﬁndings. lastly, theywould act on 50% of the presented ﬁndings and on40% even immediately.


qualitative observations (true positives). the ﬁnd-ings that the tool produces mostly constituted formsof underspeciﬁcation. for example, in finding #1 (seetable 9): "as a searcher, i want to see the checkboxesin the diﬀerent categories displayed more clearly, sothat. . . " (for similar examples, see findings 3, 4, 14,16, and 20). in this case, as in many of the other exam-ples, the practitioners stated that no developer couldimplement this story properly. they also recalledvarious discussions in estimation meetings on whatwas to be done to complete these types of stories13.in the previous research questions, we have seen thatrequirements smells are able to detect loopholes inrequirements, such as the usage of the word should. tounderstand the relevance of this ﬁnding in the contextof an agile company, we also discussed the loopholein finding #6. when we pointed out the ﬁnding, theyresponded that they considered expressing what thesystem should do in user stories problematic. theyconsidered this defect a low risk, as the developersunderstood ("if you are told that you should take outthe trash, you understand that it is an imperative.")and their user stories did never turn out to be of legalrelevance. they concluded that they want to avoidthis, but it has no immediate urgency in a projectsituation.iso 29148 discusses the use of negative state-ments ("capabilities not to be provided"). in a previ-ous study [24] practitioners expressed their reluctanceof this criterion. in contrast, in this study, practition-ers said they would act upon 2 out of 3 of the negativestatements (findings #9–11) that we presented tothem as they revealed unclear requirements. in onecase they even remembered that this led to discussionsabout the implementation during the sprint. table 9shows many more, similar examples.


qualitative observations (false positives). also inter-esting are those cases that practitioners considered not


13note that discussions can have diﬀerent objectives, i.e. whatis to be implemented and how. for these, how to implement astory is the team’s task and thus discussions can help ﬁndingthe best way. in contrast, what the product owner wants isoutside of the team’s scope and therefore should not be a matterof discussion.


29


relevant in their context or where practitioners saidthey would not act upon. summarized, the reasonswere the following:


domain and context knowledge: somestoriesthat were unclear to outsiders were understand-able for someone knowing the system underconsideration. for example, in user story #18 itwas unclear to the ﬁrst and second author whattheir refers to. it was clear, however, to bothpractitioners with knowledge about the system.


process requirement: in finding #8, the smell re-veals another conspicuous ﬁnding: the developershould put as low eﬀort as possible into the im-plementation of this story. in the discussion, thereason for this was that the customer did notwant to pay much for this implementation. thusthe story should only be fulﬁlled if it was possibleto be fulﬁlled cheaply. while the practitionerstold us they would not change anything aboutthis story, they agreed that the smell pointedout something that violates common user storypractice.


finding in reason part: in four cases, the practi-tioners agreed to the ﬁnding but considered itirrelevant as the ﬁnding was inside the reasonpart of the user story. this is due to this part ofthe user story only serving as additional informa-tion. this reason part is not used in testing noris the information directly relevant for implemen-tation. the main purpose is to understand thebusiness value and to indicate the major goal tothe team, similar to goals and goal modeling intraditional requirements engineering [50].


answer to rq 2.2. in summary, the practitionersexpressed that 65% of the discussed ﬁndings wererelevant, as they lead to lengthy discussions and un-necessary iterations in estimation. they also saw theproblem of legal binding, but in contrast to the prac-titioners of case a and b, they considered these ﬁnd-ings less relevant. due to these results, they expressedtheir strong interest in exploring smell detection forprojects; we will explain the results of this discussionin rq 4.


further observations of quality defects in diﬀerentparts of a user storywe considered especially the last explanation for re-jecting ﬁndings (ﬁnding in reason part of a user story)particularly interesting. we had noticed that the rea-son part was often written in a rather imprecise way.to be able to quantify this aspect, we automaticallysplit user stories according to the language patternsand quantiﬁed the distribution of words as well asﬁndings over the diﬀerent parts of user stories.table 10 shows the results of this analysis. thenumber of words is roughly distributed as follows: 11%of the words of a user story describe the role, 55% ofthe words describe the feature and 34% describe thereason. of the 1,082 user stories, 290 had no reasonpart at all. due to this uneven distribution, similar asin the previous analyses, we normalize the number ofﬁndings by the number of words in each part resultingin the number of ﬁndings per 1,000 words.only 1% of the ﬁndings are located in the rolepart. in fact, when we inspected these ﬁndings, theywere false positives due to the grammatical problemsdescribed in the previous section. the absence ofﬁndings in this section is expected, as this part ofthe user story only names the role and does not oﬀermany chances for smells as described in sect. 3.2. forthe remainder, 46% of the ﬁndings are located in thefeature and 53% are located in the reason part. inrelation to its size, the diﬀerence is striking: with 64ﬁndings per 1,000 words, the reason has nearly doublethe number of ﬁndings of the feature part and nearly70% more ﬁndings than the average requirement, asin summary, the reason part of user stories is par-ticularly prone to smells, but the qualitative analysisin rq 2.2 reveals that practitioners consider ﬁndingsin this section to be less relevant. this investigationcould support further application of requirementssmells in practice by helping to prioritize smells ac-cording to their location.


6.2.5. rq 3: which requirements quality defects canbe detected with smells?for 44 of the 51 requirements artifacts the stu-dents provided technical reviews. we qualitativelyanalyzed the results of 10 randomly selected reviews


30


(around 20%). the inspected reviews were conductedby 5–7 reviewers (mean: 5.6), took 90 minutes andresulted in 18–69 defects (mean: 38.1). we iteratedthrough the 381 defects documented in the reviewsand evaluated whether the smell detection producedﬁndings indicating these defects. if no smell indicatedthe defect, we openly classiﬁed the defects. we didnot quantify these results, because the resulting num-bers would assume and suggest that the distributionof defects is representative for regular projects, whichwe are unsure about (i.e. because of a high number ofspelling and grammatical issues).the classiﬁcation of the defects and their compari-son with the detected smells resulted in the followinglist of of defects indicated by requirements smells:


sentence not understandable. in some instances,when the defect suggested changing the sentenceto improve understandability, these sentenceswere highlighted especially by the vague pro-nouns and negative statements smells.


improper legal binding. various requirements ar-tifacts had issues with improper legal binding.in one case, the reviewers recognized this anddemanded the use of the term must. the loop-holes smell pinpointed at this issue.


unspeciﬁed/unmeasurable nfrs. varioussmells,especiallythesuperlatives smell,indicated at defects of underspeciﬁcation withinnon-functional requirements.


the remaining defects were not indicated by re-quirements smells.


interpretation. the quantitative distribution of de-fects is not necessarily representative for industryprojects and, thus, has not been not analyzed. the re-views clearly show that manual inspection discoveredthe same defects as in the previous research question:understandability, legally binding terminology andunderspeciﬁed requirements. these are issues with re-gards to representation but also the content describedin the artifact. we argue that these issues are com-mon for requirements artifacts. requirements smellscan therefore indicate relevant defects from multiple,


independent sources (manual inspection, interviewswith practitioners, independent manual reviews) formultiple, independent cases.


answer to rq 3. automatic smell detection can pointto issues in both representation (e.g. improper legalbinding) and content (underspeciﬁed/unmeasurablenfrs). the analysis of the reported defects indicatesthat more defects could be automatically detected(see section further discussion on detectability of de-fects described next). nevertheless, just as for staticcode analysis, we see that automatic analysis can notindicate all defects and thus must be accompanied byreviews [73]. the fourth research question aims atanalyzing this aspect in depth.


further discussion on detectability of defects. duringthe analysis, if no smells indicated the defect, weopenly classiﬁed the defects. while discussing theresulting list of defects and the degree to which theyare detectable within the group of authors, we cameup with a classiﬁcation which is broader as initiallyplanned while designing the study. this classiﬁcationconsiders whether a defect:


• already can be detected• could be detected, but is not implemented yetin our detection


• cannot be detected at the moment, but should besoon


• cannot be detected at all and probably won’t besoonthis classiﬁcation is purely based on our knowledgeof existing related work and our subjective expecta-tions gained during the data analysis process. theclassiﬁcation yielded in a map visualised in fig. 11.the ﬁgure is structured in two dimensions: on thevertical axis, we group the defects into defects relatingto the content, and defects relating to representation.furthermore, on the horizontal axis, we map the itemsaccording to the expected precision and completenesswe believe the detection could be (i.e. the classiﬁ-cation above). the further left an item, the moreprecise and complete we expect a smell detection tobe; the items on the right we assume to be close toimpossible to detect in a general case.


31


detected&


by&requirements&smells


sentence not understandable


unspeciﬁed/unmeasurable nfrs


improper legal binding


incorrect information


unintuitive use case ﬂow or diagrams


language'seman*cs


semantic clones


missing mandatory items


terminology


presenta*on'and'structure


representa5oncontent


singularity in uc


encodingunnatural itemizationsunintuitive structure of table


unappealing imageunreadable image


underspeciﬁed termsunnecessary terms in glossary


naming violating convention 


undeﬁned domain-speciﬁc terms


inconsistent usage of terms


incomplete information


spelling


grammar


language mixture


wrong word (language)


semantically contradicting information


detectable


by&requirements&smells


rather&not&detectable


by&requirements&smells


wrong word (domain)


structural redundancy / cloning


structurally inconsistent diagrams 


figure 11: findings in requirements reviews, classiﬁed by content/representation and detection


32


with the defects that our current approach does notreveal, this research question shows that more defectscould be detected: these are namely defects withterminology, singularity in use cases and structuralissues focusing on the content such as the absenceof mandatory elements in the artifact [37], structuralredundancy [34] or structural inconsistency betweencontent. it remains unclear how far more enhancedlanguage analysis with more sophisticated nlp andontologies can enable to understand language. in anycase, when a defect remains subtle and vague in itsdeﬁnition, such as an unintuitive structuring or design,we only see potential for automation if a defect canbe deﬁned precisely. for problems relating to thedomain itself (e.g. incomplete information about thedomain or incorrect information with regards to thedomain), we consider it impossible to detect issuesunless formalizing the concepts of the domain.


6.2.6. rq 4: how could smells help in the qa pro-cess?


after the interviews and analysis, we asked all in-volved practitioners whether or not they think re-quirements smell detection is a helpful support, andwhether and how they would integrate it in theircontext. we asked those questions openly and tran-scribed the answers for validation by the intervieweesand later coding. in the following, we report on theresults structured by topics. where applicable, weprovide the verbatim answers in relation to their cases(a, b or c).


overall evaluation. in general,all practitionersagreed on the usefulness of the smell detection even ifconsidering diﬀerent perspectives that arise from theirprocess setting. one practitioner (case c) reportsthat he expects one beneﬁt in using smell detection isthat it would lead to a reduction of the time spent foreﬀort estimations (in context of agile methods), as theproduct owner could beneﬁt from the smell detectionon the ﬂy and, thus, avoid misinterpretations later.


quotes on overall evaluation


a.“i think that smells can help to analyze aspeciﬁcation.”


b.“the method of requirements smells is avaluable extension in the area of require-ments engineering and gives helpful inputconcerning the quality of speciﬁed require-ments in early development phases.”


c.“i think such a smell detection is of highvalue to make sure that our team is con-fronted with already quality assured [user]stories. this can reduce the time in our ef-fort estimations, because the product ownerwould directly notice on the ﬂy what couldlead to misinterpretations later.”


integration into process. when asked for how thepractitioners would integrate the smell detection intotheir process setting, we got varying answers depend-ing on the process. the practitioner relying moreon rich process models (case b) could imagine usinga smell detection either as a support for the personwriting the requirements or as part of a more funda-mental qa method for the company. but also thepractitioner relying more on the agile methods (casec) could imagine using requirements smells as a sup-port for the person writing the requirements or incontext of analytical qa. in addition, one potentialuse is seen in context of problem management. im-portantly, all practitioners see the full potential of asmell detection only if integrated in their existing toolchain (see also quotes on constraints and limitations).


quotes on integration into process


b.“i like to compare requirements smells tothe “check spelling aid" known e.g. frommicrosoft word. so for me requirementssmells are intuitive and lightweight andshould be used and integrated within require-ments engineering and quality assuranceprocesses.”


c.“as a product owner, i would use a smelldetection could help in analytical qa, as itcould reveal when a problem occurs repeat-edly, either in a project or in the companyas a whole.”


33


constraints and limitations. one facet we considerespecially interesting when using qualitative data isthe chance to reveal further ﬁelds of improvement.we therefore concentrate now on the constraints thatwould hamper the usage of a smell detection. onefacet we believe to be important is that practitionerswant to avoid additional eﬀort when using smell detec-tion in their context. furthermore, the practitionerof case a believes that the automatic smell detectionrequires a common understanding on the notion of requality. he further indicates that the smell detectionshould explicitly take into account that some criteriacannot be met at every stage of a project.


quotes on constraints and limitations


a.“first, the people who need to write thespeciﬁcation received training which givesthe required performance criteria. second,abstraction levels must be taken into ac-count during the smell detection process,since at higher abstraction levels diﬀerentcriteria cannot be met (e.g. vague pronounsor subjective language).”


b.“as a product owner, i would use a smelldetection on the ﬂy provided that it wouldnot mean additional eﬀort [such as by hav-ing to use another tool].”


answer to rq 4. our practitioners provided a generalagreement on potential beneﬁts of using smell detec-tion a quality assurance context. when asked howthey would integrate the requirements smell detection,they see possibility for both analytical and construc-tive qa, provided, however, this integration wouldnot increase the required eﬀort, e.g. by integratingthe detection into existing tool chains.


6.2.7. evaluation of validitywe use the structure of threats to validity from [64]to discuss the evaluation of the validity of our study.


construct validity. in our evaluation, we analyzedrequirements smells in the terms of false positives,relevance and relation to quality defects. there arethreats that the understanding of these terms variesand, thus, the results are not repeatable. yet, we are


conﬁdent that our validity procedures described inwe classiﬁed a subset of the ﬁndings independently,and afterwards compared (inter-rater agreement co-hen’s kappa: 0.53) and discussed the results.wesubsequently reclassiﬁed a diﬀerent subset of ﬁndingsagain, which lead to an inter-rater agreement (cohen’skappa) of 0.72. for the classiﬁcation of false negatives,we reclassiﬁed one document separately, calculatingthe percentage of agreement on false positives14. thislead to an agreement of 88%.we consider both of these substantial agreements,especially in the inherently ambiguous and complexdomain of re. thus, we consider this threat as suﬃ-ciently controlled.


internal validity. a threat to the internal validity ofour results is that the experience of the students aswell as the practitioners might play a role in their rat-ings of relevance or detection of quality defects. wemitigated this threat by choosing only practitionersfor the ratings and interviews who had several yearsof experience. the students are only in the secondyear. we cannot mitigate this threat but consider theeﬀect to be small. there might be some defects notfound by the students that could have been indicatedby a smell as well as unfound defects undetectableby smells. hence, future studies will add to the clas-siﬁcation but are unlikely to change it substantially.personal pride could potentially have an impact onthe answers to a rq 2.2, if practitioners are not ableto professionally discuss their own work products. inour cases, however, all practitioners openly acceptedthe discussions (as can be seen in their answers). eventhough we carefully supervised this threat, we havenot found signs of personal bias in the cases involved.finally, the students might also have been inﬂuencedby the review guidelines we provided. yet, none ofthe investigated smells was explicitly listed in the


14we did not employ cohen’s kappa here, since the numberof true positives (non-smell words) would strongly dominate theresult and therefore skew the inter-rater agreement. instead,we calculated the ratio of ﬁndings which both rating teamsindependently classiﬁed as false positive to the number ofﬁndings which only one of the teams classiﬁed false positive.


34


guidelines. instead, the guideline contained ratherhigh-level aspects such as “unambiguity”. althoughwe consider this threat to be a minor one, it is stillpresent.


external validity. as requirements engineering is adiverse ﬁeld, the main threat to the external validityof our results is that we do not cover all domainsand ways of specifying requirements. we mitigatedthis threat to some degree by covering at least severaldiﬀerent domains and study objects, of which some arepurely textual requirements artifacts, some use cases,and some user stories. we argue that this representsa large share of today’s requirements practices.


reliability. our study contains several classiﬁcationsand ratings performed by people. this constitutes athreat to the reliability of our results. we are conﬁ-dent, however, that the peer debrieﬁng and memberchecking procedures helped to reduce this threat.


7. conclusion


in this paper, we deﬁned requirements smells andpresented an approach to the detection of require-ments smells which we empirically evaluated in amulti-case study.in the following, we summarizeour conclusions, relate it to existing evidence on thedetection of natural language quality defects in re-quirements artifacts, and we discuss the impact andlimitations of our approach and its evaluation. weclose with outlining future work.


7.1. summary of conclusionsfirst, we proposed a light-weight approach to de-tect requirements smells. it is based on the naturallanguage criteria of iso 29148 and serves to rapidlydetect requirements smells. we deﬁne the term re-quirement smell as an indicator of a quality violation,which may lead to a defect, with a concrete loca-tion and a detection mechanism, and we also givedeﬁnitions of a concrete set of smells.second, we developed an implementation that isable to detect requirements smells by using part-of-speech (pos) tagging, morphological analysis anddictionaries. we found that it is possible to provide


such tool support and outlined how such a tool couldbe integrated into quality assurance.third, in the empirical evaluation, our approachshowed to support us in automatically analysing re-quirements of the size of 250k words. findings werepresent throughout all cases but in varying frequenciesbetween 22 and 67 ﬁndings per 1,000 words. outliersindicated serious issues. an investigation of the de-tection precision showed an average precision around0.59 over all smells, again varying between 0.26 and0.96. the recall was on average 0.82, but also variedbetween 0.5 and 0.95. to improve the accuracy, wedescribed concrete improvement potential based onreal world, practical examples.a further analysis of reviews and practitioner’s opin-ions strengthen our conﬁdence that smells indicatequality defects in requirements.for these qualitydefects, practitioners explicitly stated the negativeimpact of discovered ﬁndings on estimation and im-plementation in projects.the study also showed,however, that while requirements smell detectioncan help during qa presumedly in a broad spectrumof methodologies followed (including agile ones), therelevance of requirements smells varies between cases.hence, it is necessary to tailor the detection to thecontext of a project or company. we analyzed thisfactor in depth, demonstrating that the reason part ofa user story contains most ﬁndings (absolutely and rel-atively), but practitioners consider these ﬁndings lessrelevant as they argue that this part is not commonlyused in implementation or testing. this raises thequestion of the relevance of this part at all, at leastfrom a quality assurance perspective, which shouldbe investigated in future work.our comparison with defects found in reviews fur-thermore showed that the requirements smell detec-tion partly overlaps with results from reviews. as aresult, we provide a map of defects in requirementsartifacts in which we give a ﬁrst indication whererequirements smells can provide support and wherethey cannot.therefore, we provide empirical evidence from mul-tiple, independent sources (manual inspection, inter-views with practitioners, independent manual reviews)for multiple, independent cases, showing that require-ments smells can indicate relevant defects across dif-


35


ferent forms of requirements, diﬀerent domains, anddiﬀerent methodologies followed.


7.2. relation to existing evidenceexisting approaches in the direction of automaticqa for re are based on various quality models, in-cluding the ambiguity handbook by berry et al. [7],the now superseeded ieee 830 standard [32] and pro-prietary models. yet, according to a recent literaturereview by schneider and berenbach [67], iso 29148is the current standard in re “that every require-ments engineer should be familiar with”. however,no detailed empirical studies (see table 1) exist forthe quality violations described in iso 29148. whencomparing to similar, related quality violations, alsofew empirical, industrial case studies exist (see ta-ble 2). gleich et al. [30] and chantree et al. [11] reportfor conceptually similar problems, a precision of thedetection between 34% and 75% (97% in a specialcase), and a recall between 2% and 86%. krisch andhoudek [49] report a lower precision in an industrialsetting. the precision and recall for the detection ofthe smells, which we developed based on the descrip-tion in the standard, are in a similar range to theaforementioned. in summary, this work provides adetailed empirical evaluation on the quality factors ofiso 29148, including a deeper understanding of bothexisting and novel factors.we also take a ﬁrst step from the opposite perspec-tive: so far, to all our knowledge, all related workstarts from a certain quality model and goes intoautomation. our results to rq 3 provides a biggerpicture for understanding in how far quality defects inrequirements could be addressed through automaticanalysis in general.our results to rq 2.2 furthermore provides evi-dence for the claim by gervasi and nuseibeh [29] that“lightweight validation can discover subtle errors inrequirements.”more precisely, our work indicatesthat automatic analysis can ﬁnd a set of relevant de-fects in requirements artifacts by providing evidencefrom multiple case studies in various domains andapproaches. the responses by practitioners to theﬁndings do, to some extent, contradict the claim byshould have 100% recall”. practitioners responded


very positively on our ﬁrst prototype and the smellsit ﬁnds. yet, obviously, more detailed and broaderevaluations, especially conducted independently byother researchers not involved in the development ofsmella, should follow.


7.3. impact/implicationsfor practitioners, requirements smells provide away to ﬁnd certain issues in a requirements artifactwithout expensive review cycles. we see three mainbeneﬁts of this approach: first, the approach, justas static analysis for code, can enable project leadsto keep a basic hygiene for their requirements arti-facts. second, the review team can avoid discussingobvious issues and focus on the important, diﬃcult,domain-speciﬁc aspects in the review itself. third,the requirements engineers receive a tool for immedi-ate feedback, which can help them to increase theirawareness for certain quality aspects and establishcommon guidelines for requirements artifacts.yet, the low precision for some of the smells mightcause unnecessary work checking and rejecting ﬁnd-ings from the automatic smell detection. hence, atleast for now, it is advisable to concentrate on thehighly accurate smells.for researchers, this work sharpens the term re-quirements smell by providing a deﬁnition and a tax-onomy. by implementing and rating concrete smellﬁndings, we also came to the conclusion, however, thatnot all of the requirements defects from iso/iec/-ieee 29148 can be clearly distinguished as require-ments smells. in particular, the diﬀerence betweensubjective language, ambiguous adverbs and adjec-tives, non-veriﬁable terms, and loopholes was not al-ways clear to us during our investigations (see rq 2.1).therefore, we, as a community, can take our smelltaxonomy as a starting point, but we also need tocritically reﬂect on some smells to further reﬁne thetaxonomy.finally, empirical evidence in re is, in general, dif-ﬁcult to obtain because many concepts depend onsubjectivity [55]. one issue increasing the level ofdiﬃculty in evidence-based research in re remainsthat most requirements speciﬁcations are written innatural language. therefore, they do not lend them-selves for automated analyses. requirements smell


36


detection provides us with a means to quantify theextent of certain defects in a large sample of require-ments artifacts while explicitly taking into accountthe sensitivity of ﬁndings to their context. hence,this allows us to consider a whole new spectrum ofquestions worth studying in an empirical manner.


7.4. limitationswe concentrated on a ﬁrst set of concrete require-ments smells based on our interpretation of the some-times imprecise language criteria of iso/iec/ieee29148. there are more smells, also with diﬀerent char-acteristics than the ones we proposed and analyzed.in addition, even though we diversiﬁed our study ob-jects over domains, methods and diﬀerent types ofrequirements, we cannot generalize our ﬁndings toall applicable contexts. we therefore consider thepresented results only a ﬁrst step towards the contin-uous application of requirements smells in softwareengineering projects.


7.5. future workour work focuses on requirements smells basedon iso/iec/ieee 29148. future work needs to clar-ify and extend this taxonomy based on related workand experience in practice. this also includes thedevelopment of other requirements smell detectiontechniques to increase our understanding about whichdefects can be revealed by requirements smells andwhich defects cannot.second, this ﬁrst study gained ﬁrst insights into theusefulness of requirements smells for qa. we further-more sketched an integration of requirements smellsinto a qa process. yet, a full integration and the con-sequences must be analyzed in depth. in particular,we need to understand whether smell detection as asupporting tool, similar to spell checking, as pointedout by on of our participants, enables requirementsengineers to improve their requirements artifacts.lastly, requirements smells focus on the detectionof issues in requirements artifacts. they require athorough understanding of the impact of a qualitydefect, which is hence also part of the requirementssmell taxonomy. this link must be carefully evaluatedand analyzed in practice. our preliminary works onthis topic [23, 59] provide ﬁrst ideas in that direction.


acknowledgments


we would like to thank elmar juergens, michaelklose, ilona zimmer, joerg zimmer, heike frank,jonas eckhardt as well as the software engineeringstudents of stuttgart university for their supportduring the case studies and feedback on earlier draftsof this paper.this work was performed within the project q-eﬀekt; it was partially funded by the german federalministry of education and research (bmbf) undergrant no. 01is15003 a-b. the authors assume respon-sibility for the content.


bibliography

