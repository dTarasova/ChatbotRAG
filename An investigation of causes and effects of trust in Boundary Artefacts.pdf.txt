
information and software technology 158 (2023) 107170


available online 9 february 2023


contents lists available at sciencedirect


information and software technology


journal homepage: www.elsevier.com/locate/infsof


an investigation of causes and effects of trust in boundary artefacts


raquel ouriques a,∗, fabian fagerholm a,b, daniel mendez a,c, baldvin gislason bern d


a blekinge institute of technology, karlskrona, 37179, swedenb aalto university, espoo, fi-00076, finlandc fortiss, munich, 80805, germanyd axis communications, lund, 22369, sweden


a r t i c l ei n f o


keywords:software developmentboundary artefacttrusttrusting beliefs


a b s t r a c t


context: boundary artefacts (bas) support software development activities in many aspects because it carrieslots of information in the same object that can be used and interpreted by several social groups withinan organisation. when the bas are inconsistent regarding their content, such as many meanings or lack ofcontextual information, their efficiency is reduced because stakeholders will not trust them.objective: this study aimed to understand the implications of differences in the perception of trust on softwareprojects and their influence on stakeholders’ behaviour.methods: we conducted an exploratory case study to observe the creation and utilisation of one specific baand the implications of differences in trust and their influence on stakeholders’ behaviour.results : our investigation has shown that practitioners adding and adjusting existing content do not entirelyunderstand the stakeholders’ needs. together with the partial management of the content, trust is impacted.when the content of bas does not meet the trust factors, specifically reliability and predictability, thestakeholders cannot execute their tasks appropriately, and several implications affect the software developmentproject. additionally, they create workarounds to supply their needs.conclusion: the differences in trust in bas affect software projects in different areas of the organisation andinterfere with the task execution of various stakeholders. the decrease in trust results from inconsistenciesin the content associated with the lack of management of the ba. a structured strategy for representing andmanaging a ba’s content seems appropriate to increase trust levels and efficiency.


1. introduction


boundary artefacts (bas) are central objects that tie together teamsin multiple social worlds along the software development lifecyclewhile holding different meanings [1,2]. they are used to steer collab-orative work between various stakeholders. for instance, a use casedescribing how users intend to interact with the system is definedfrom a requirements perspective. it serves as a basis for various otheractivities such as project organisation and management (e.g. effortestimation), design, and (acceptance) testing.the bas are essential for effective collaboration because they con-tain relevant information that supplies different groups with differentneeds. they materialise mainly as electronic or printed documents and,for the most part, are produced and used by humans. being central re-sources and extensively used, disregarding the methodology adopted toguide software development processes, they provide value by condens-ing practitioners’ knowledge in different formats, such as architecturedescriptions, requirements specifications, test cases, etc. [3,4].


∗corresponding author.


software development teams, especially when geographically dis-persed, rely on bas for efficient coordination and knowledge sharing.the successful handling of such artefacts depends on how peoplemanipulate and interpret information, and how they use technologyto spread knowledge. such complexity increases when a ba requirescontributions from different social groups with distinct perspectives andknowledge background [3,5].while providing benefits such as shared understanding and knowl-edge resources to distinct groups, bas can also fail in their purpose.misunderstandings can happen when the artefact is not plastic enoughto accommodate the different meanings. in other cases, it requiresmore contextual information so stakeholders can process the availableinformation, or constant updates are necessary to satisfy needs [6–8].as such inconsistencies occur, stakeholders’ usage can be under-mined, and the efficiency of these artefacts is reduced. for example,when a ba is mismanaged, learning across diverse groups becomeslimited and integrating additional knowledge is difficult [9]. more-over, when a ba do not comply with sufficient level of detail and


received 17 october 2022; received in revised form 2 february 2023; accepted 6 february 2023


information and software technology 158 (2023) 107170


2


r. ouriques et al.


practitioners neglect the management of such artefacts, stakeholderswill not be able to find relevant and updated content. in worst cases,the workload can increase due to redesigning solutions that could beavoided if artefacts were properly managed [4].


in this circumstance, when practitioners do not feel confident in


using the ba, trust decreases, and unknown consequences to the soft-ware projects can come into sight. this situation can also create anunpleasant environment with a weak sense of community that can bedeveloped and encourage demand for accountability [5,10,11].


as trustworthy bas are crucial for executing software development


activities successfully, it is important to understand how practitionerscreate and use them, and what the implications are when there is alack of trust in the bas. trust is an essential factor that determinesthe adoption of artefacts and the extent to which a practitioner feelsconfident using it [10,12].


software engineering researchers have examined bas in several past


studies. most studies explore how companies benefit from using themfor information sharing and collaboration among teams [13–16]. onthe other hand, bas must be trustworthy so that practitioners can relyon them to execute their tasks. however, to the best of our knowledge,this aspect has not been examined so far.


in this investigation, we address this gap by reporting on a study


examining the creation and utilisation of one specific ba and analysinghow trust affects stakeholder behaviour towards it.


in particular, we aim at the following contributions:


• an empirical investigation of how a ba is created, utilised, and


managed in a software development environment.


• an analysis of the implications of a decreased level of trust and


how they influence the stakeholders’ behaviour towards the ba.


• a discussion of the possible implications for future research and


potential solutions for managing the analysed ba.


this manuscript is organised as follows: in section 2, we present


a brief background to our study and discuss related work. section 3describes the research method. in section 4, we present the findings ofour study. in section 5, we discuss the implications that our findingshave and future research. in section 6, we then discuss the threats tothe validity of our study before concluding our manuscript in section 7.


2. background and related work


in this section, we first introduce the basic notion of boundary


artefacts (bas) as background of our study before discussing relatedwork.


2.1. boundary artefacts


the concept of boundary artefacts is not new and originates in


the discipline of ecology [8,17,18]. two main terms are commonlyused in the literature: boundary objects and boundary artefacts. as wefocus on the software engineering discipline, we use the term boundaryartefact (ba) due to its proximity to the field. while we refer to mendezet al. [19] for a more elaborate discussion and definition of the term, anartefact is, in simple terms, a work product that is produced, modified,or used by a sequence of tasks that have value to a role, such as code,test cases, or a requirements documentation.


the original introduction of the term boundary artefact roots back


to 1989 and was coined in a study developed for the museum ofvertebrate zoology [17]. the authors define it as ‘‘objects which areboth plastic enough to adapt to local needs and the constraints ofthe several parties employing them, yet robust enough to maintain acommon identity across sites’’.


the boundary does not refer to a limit, edge, or periphery but a


shared space structure. these objects carry an interpretative flexibilitycharacteristic, which means that different groups gather informationand interpret it differently from the same object [20].


star and griesemer [17] detail four types of bas:


• repositories, which are traditional and standardised piles of ob-


jects such as a library.


• ideal type, which denotes objects with a high level of abstraction


that are adaptable to all domains. however, due to its vaguecharacteristic, it suits better for communicating.


• coincident boundaries, i.e. objects which, while possessing dif-


ferent contents, have the same boundaries. they fit organisa-tions with geographically distributed stakeholders that need theinformation to work autonomously while cooperating with acommonly shared referent.


• standardised forms, which are objects with a rigid structure for


adding information.


bas are, thus, useful objects that can support software development


in many aspects, including being the source of information to manystakeholders within an organisation. however, the fast-paced changesto the software products can affect the flow of information in theseobjects [21].


as boundary artefacts grow, they can lose flexibility because too


many boundaries are crossed. when there is an overload of meanings,a ba can lose value to its stakeholders, resulting in workarounds toavoid the ba at all [7,17,22].


practitioners need to manage the different borders and information


needs of other stakeholders to keep the ba useful with shared under-standing [3,11]. as we recognise the importance of ba for softwareengineering, we want to understand why people avoid using them.the circumstances around the creation and management of the ba canaffect how people trust them, and as a consequence, the ba can be moreor less valuable or attractive, which may explain why they are used ornot.


2.2. work related to trust in (boundary) artefacts


as the notion of trust has been explored in several disciplines,


there is still no consensus about its exact definition. the term acquiresdifferent meanings depending on the context investigated [11,12].


a large number of definitions of trust connect to human behaviour


towards another. in this context, trust refers to how individuals dependvoluntarily on other individuals’ behaviour. due to its vague trait,it is complex to evaluate. to make it possible to describe, severalauthors proposed trusting beliefs, which are favourable factors thathelp to describe what causes a person to consider another persontrustworthy [10,23].


several authors discuss and provide different attributes for trusting


beliefs. they depend on the context. the most cited ones are frommcknight et al. [23]: benevolence, competence, honesty/integrity, andpredictability. however, these beliefs focus on aspects of human socialinteraction and denote assessments that people make about each other.


based on previous research, trust in inanimate software artefacts


has been investigated under the premise that people perceive theseartefacts as social actors, as if they possess human attributes [24,25].


in an extensive study in information technology artefacts, lansing


and sunyaev [12] scrutinised the trust literature to identify trustingbeliefs applied to inanimate software artefacts. from this perspective,an information technology artefact should be:


• reliable: perception that the artefact provides accurate content.• predictable: confidence that the resource is always provisioned


as requested.


• provide the required functionality: perform as needed for the task


environment.


in our study at hands, we reuse those three trusting beliefs.a few studies in the software engineering field focus further on trust


in artefacts. reviewing empirical studies, lansing and sunyaev devel-oped a conceptual model to describe trust in the cloud service software


information and software technology 158 (2023) 107170


3


r. ouriques et al.


artefact. they comprehensively analyse the several trust constructs toreach a model contributing to theory-building on trust.koelmann [26] also provides a theoretical discussion around theconcept of trust. however, he focuses on an information technol-ogy artefact’s role in trust-related interactions. he further details theimplications that can arise in situations involving trust.regarding empirical studies, we also found an original work fo-cusing on trust in inanimate software artefacts. thatcher et al. [27]examined how trust is affected by information technology and itssupport in users post-adoption. we consider this work as relevant toour study as it initiated the development of new concepts regardingtrust constructs concerning inanimate software artefacts with evidencefrom an empirical investigation.paravastu et al. [25] explored how trust and trustworthiness applyto users’ satisfaction. their empirical investigation has shown dif-ferences between the two explored constructs, and user satisfactionis related to trustworthiness rather than trust in software artefacts.trust in inanimate software artefacts is little examined in the softwareengineering field, especially regarding artefacts produced during thedevelopment process, which are utilised as resources from one phaseto another.as software development becomes geographically dispersed, peopletend to rely more on artefacts to execute their tasks. to do so, theyneed to trust the information provided by the artefacts. in the interestof advancing research into trust in inanimate software artefacts, ourstudy adds to our understanding of how trust can affect stakeholders’behaviour in software projects.


3. research method


our study aims to examine the process of creating and utilising aba. we are especially interested in the implications of trust beliefs andhow they influence the stakeholders’ behaviour in this process.we developed our research questions (rq) through discussionsand brainstorming sessions with our company partner (introduced insection 4.1). we addressed four rqs:


rq1 how do practitioners decide how to represent knowledge andinformation in boundary artefacts and their expectations concern-ing their use?rq2 how do practitioners manage boundary artefacts?rq3 what are the implications of the differences in trust in boundaryartefacts to software development?rq4 how does a difference in the level of trust in boundary artefactsinfluence the stakeholders’ usage behaviour?


to answer these questions, we conducted a qualitative studyanalysing data on phenomena related to human behaviour [28]. wefollowed the principles of an exploratory case study to gather insightsinto creating and utilising the selected ba [29].we collected the data via a series of sources, including interviews,archive documents, chat via microsoft teamstm and a workshop. weexamined the interviews by two-level coding (see section 3.3) to iden-tify relevant codes that enabled us to answer our rqs and explain thetrust cycle (see fig. 6) [30].


3.1. research approach


fig. 1 depicts the approach that we developed to investigate theactions and interactions surrounding the ba. our approach focused onthree perspectives:


a. contributors we investigated how the practitioners addedcontent to the ba and their perception of whoare the stakeholders of the object and howthey utilise it.


fig. 1. research approach.


table 1description of the practitioners included in this study (interviews).


participantsroletype


p1senior engineercontributorp2senior engineerstakeholderp2senior engineerstakeholderp3specialist engineerstakeholderp4it product ownermanagementp5experienced engineerstakeholderp6senior engineerstakeholderp7senior engineercontributorp8senior engineerstakeholder


b. content management in this perspective, we identified content man-agement aspects associated with the ba. wepaid attention to existing guidelines for addingcontent, responsibilities, and ownership.c. stakeholders we explored how the stakeholders utilised theba. we examined their perception of trustingbeliefs in relation to the ba and how theyinfluenced the stakeholders’ behaviour.


this approach allowed us to identify misalignment between thecontent creation and management from the contributors’ side andevaluate the trust of the stakeholders concerning the ba.


3.2. data collection


the data for this study was collected by means of interviews, archivedocuments, workshop, and informal conversations with practitioners.the first and fourth authors had full access to the company networkand information and communication technologies (icts) through ded-icated employee accounts and devices set up and provided as part ofthe collaboration.we utilised semi-structured interviews and one unstructured. theinterview questions (see fig. 2) were selected according to the roleof each practitioner who was interviewed, be it contributors or stake-holders (see table 1) within the quality assurance unit, except for thecontent management approach. thus, the inter-stakeholders differencesare not of relevance to our analysis. in this approach, we used anunstructured interview due to the exploratory characteristic of theevent.we chose the trusting beliefs conceptualisation proposed by lansingand sunyaev [12] as our guide for elaborating the interview guide andanalysing the results. it represents a combination of several theories oftrust applied to inanimate software artefacts.


information and software technology 158 (2023) 107170


4


r. ouriques et al.


fig. 2. interview guide.


table 2description of the practitioners included in this study — workshop.


participantsroletype


p1senior engineercontributorp2senior engineerstakeholderp3specialist engineerstakeholderp4it product ownermanagementp5experienced engineerstakeholderp6senior engineerstakeholderp7senior engineercontributorp8senior engineerstakeholderp9engineerengineer invited for discussionp10expert engineerexperienced engineer invited for discussion


the interviews were conducted through microsoft teamstm and


lasted around 30 min. we also utilised microsoft teamstm for gatheringdata during the entire collaboration in informal chats with severalpractitioners. we initiated the data collection in september 2021 withthe interviews and finished in april 2022 with the workshop andinformal discussions with practitioners.


we gathered data from archival files, including confluencetm pages,


internal presentations, and descriptions of tools. we also collected datafrom a workshop planned for confirmation of the results and additionaldata.


the workshop lasted 1,5 h and happened in the last days of the


data collection. we had eight participants interviewed in the previousstep and two practitioners who had a close interest in the subject (seetable 2). the purpose was to validate the draft of the results and collectcomplementary data. we focused on the three aspects of our proposedapproach (see fig. 1).


we stored three data types (audio, video and text) in the maxqda1


software for qualitative and mixed methods research. the softwaresupported us in extracting the codes in the two-step coding cycledirectly from the data source.


3.3. data analysis


the data collection process and the analysis of the data were inter-


related. the first author transcribed the interviews and established theinitial codes. simultaneously, the first author contacted people alreadyinterviewed and other practitioners in the company to clarify internalprocesses and misunderstandings.


we performed a two-cycle coding [30]. in the first cycle, we as-


signed process codes to the data chunks. this coding method indicates


1 available at https://www.maxqda.com.


observable and conceptual action in the data and summarises data seg-ments. the research questions partially steered the codes. for example,when the chunk of data referred to rq1 and rq3, we often coded itas ‘‘contributing to the boundary object’’ and ‘‘trust implication’’ (seefig. 3).


in the second cycle, we broke down the codes generated in the first


cycle into smaller concepts that represented patterns in the data (seefig. 3). after concluding the second cycle, the first and the secondauthors gathered to analyse the generated codes. in this session, wediscussed all codes and how and why they were added, aiming forconsistency. we also examined the codes against the transcripts. wecorrected misunderstandings, consolidated the initial findings throughagreement, and identified gaps that required further clarification.


to increase reliability, we conducted a workshop with practitioners


participating in the study. we asked for confirmation of our findingsin relation to the three aspects of our approach, including contentcreation and management of the ba, the implication of trust beliefs,and practitioners’ behaviour changes. after the workshop, we adjustedour interpretations regarding the content management findings, whichchanged to partial content management. although we validated mostof the results, we still had open questions that required further investi-gation, including the stakeholders’ behaviour, which was later clarifiedin discussions with practitioners through microsoft teamstm.


3.4. ethical concerns


we followed the swedish research council [31] guidelines for


conducting ethical research. besides the guidelines, we also paid at-tention to how the interview guide was elaborated. we were carefulin designing a guide that would not raise intense emotions or causepsychological harm [32].


the participants knew the study’s goal and that they could choose


to remove their interview from the research before the research waspublished. we asked for permission to record the interviews and ex-plained that the data would be stored on the company’s computer only.moreover, every mention of specific pieces of data, such as quotes,would be anonymised.


when sampling the practitioners to participate, we decided based on


the following criteria: their role (creating content, managing or utilisingthe ba) and availability during the period we performed the interviews.


we had an intermediate step in our research where we conducted a


workshop to present a draft of the findings, aiming for validation andadditional data collection. during the workshop, we were cautious notto reveal participants’ names or the teams they belonged to, avoidingany discomfort.


regarding the data analysis, we avoided potential stigmatisation or


harm to specific populations by not collecting or analysing data relatedto the religion, race, or ethnicity of any participant in this study.


information and software technology 158 (2023) 107170


5


r. ouriques et al.


fig. 3. example of the two-cycle coding process.


4. results


in this section, we report on the results of our study, which investi-gates the creation and utilisation of one specific ba and the implicationsof trust and their influence on stakeholders’ behaviour. we divide thesubsections in tune with our rqs (see section 3).


4.1. case company


axis communications provides network solutions in video surveil-lance, access control, intercom, and audio systems. they collaboratewith thousands of technology and system integration partners aroundthe world to deliver solutions and support customers with focus onopenness and quality. axis has around 4000 employees in over 50countries and has its headquarters in lund, sweden, which is wherethe case study was centred.the axis os operating system for edge devices is used in more than200 of axis’ products. over 1000 research and development engineerswork directly or indirectly with developing axis os as a softwareproduct line. there are also other axis employees and axis partners thatare dependent on information about individual products in the axisos product portfolio, such as technical writers, support personnel anddevelopment partners.


4.2. description of the boundary artefact


the ba analysed in this study represents the core list of featuresof all of the products in a software product line of the company(covering over 200 products), and it is physically represented as anxml file. it stores all the developed features for the firmware used inthe company’s products, be it new, modified or deprecated features.teams with specific functions (approximately 48 teams), e.g., audio andstreaming, add the features and associated content to the ba.the artefact is handled as code and managed in the same sourcecode management tool used for the product code for the softwareproduct line. automated regression tests for the software product lineuse the ba so that discrepancies are detected in the build pipeline.those that need changes to the ba will create pull requests, representedby the dotted lines in fig. 4.


fig. 4 also displays a summary of the several internal stakeholdersin different parts of the organisation. customer and external partners(for example, application development partners) are also stakeholders.our investigation focused on the quality assurance department.the content of this ba is utilised in automated and manual for-mats, but mostly automated. the information is automatically retrieved


through a framework that collects product information using an api(application programming interface).through the automatic retrieving, information from the ba crossesseveral boundaries within the organisation, including marketing, globalservices, quality assurance, platform management, solution manage-ment, customer information, etc. at each boundary, the informationprovided by the ba serve different purpose.besides the mentioned department boundaries within the organi-sation, the ba represents a shared structure for teams with similaractivities but different goals and focuses. those characteristics resemblethe coincident boundaries artefact type described by star and griese-mer [17] (see section 2). it has the advantage of providing inputto perform tasks with different goals. teams work autonomously butcollaborate in this shared artefact.


4.3. representing and managing the content of the ba


in this subsection, we detail the process of adding content to the baand also the approach adopted to manage it, addressing both rq1 andrq2.so-called function teams add new features and make adjustmentsto existing ones. this process is meant to be flexible. creators in suchteams begin with rudimentary versions of the content and improvethem until they have a satisfactory version, such as descriptions andparameters.regarding the new features, the content addition is guided by amultidisciplinary team — having the goal of building a generic vo-cabulary that the whole company can use. they book sessions so thecreators can explain the new feature. the team then choose namesfor the features and make sure that the names are technically correctand easy to translate. the multidisciplinary team partially manages theartefact with the activities detailed in table 3.the management team also clear up the features that do not belongto the artefact and deprecate features that are no longer in use but keepthere as historical data.in our investigation, we found that those function teams perceivethe immediate users of the artefact. their focus is on automated use,while the manual extraction of the content is not widely known,exemplified by p1: ‘‘for me, i just know that part of this data goes to thedatabase, and part of this data goes to the feature lists that are generatedfrom this, are used to trigger the correct tests’’.as this happens, the stakeholders of the manual extraction do nothave their needs observed. we detail these findings in the followingsubsection and the discussion section.


information and software technology 158 (2023) 107170


6


r. ouriques et al.


fig. 4. depiction of the utilisation of the boundary artefact.


table 3activities for managing the ba.


activitydescription


obtaining an overview of the utilisationawareness of how the content is used but predominantly in the automated side and generation of information to customers.assigning responsibility for parts of the contentfinding owners for each feature.achieving flexibility in adding contentpossibility for incremental edits to the existing content by the teams.capturing knowledge about each featurethe multidisciplinary team establish meetings with creators for details about new features.establishing a common terminologydefining terms and names to be known by the whole company and customers.planning for future incrementspredicting that a feature has the potential to grow and list the future options to reduce the updates.controlling over modificationsevery modification generates an approval request which at least two people review.creating generic contentmaking features for different setups and not connected to a specific device.


4.4. implication of trusting beliefs


in this subsection, we detail our investigation of the differences intrust and the implications generated when the ba is not reliable orpredictable — answering the rq3.as the stakeholders rely on ba to execute their tasks, they expect theinformation stored in the artefact to fulfil their needs. several implica-tions can affect the development process when practitioners understandthat information does not meet favourable factors of trusting beliefs.the information provided by the ba meets the functionalityfavourable factor. one explanation is that most of the content is ina code format, read by developers and other tools that automaticallyextract the information. in this aspect, p2 commented: ‘‘well, the xmlis never human-readable. so, no, it doesn’t, but programmatically it works,of course. there is no problem in reliability for the code in the ba, butit is not human readable’’. to a stakeholder not involved in this level(development), a web version of the artefact displays the descriptionfor each feature. for those stakeholders, the web version meets thefunctionality factor.as to reliability, we found that the content stored in the bafailed the stakeholders. when the stored information is incorrect, theautomatic extraction can run tests that will fail, execute wrong tests, ornot even run them. p8 exemplifies saying: ‘‘it sometimes affects when weexecute new tests. the ba must be updated before the tests run on deviceswith the correct features’’. p7 adds, ‘‘there have been updates to the bathat broke tools that i used because it didn’t follow the xml standard orsomeone added something that simply didn’t work. so, there failed fromtime to time’’.when those issues occur, it is evident that the development processcan suffer a setback due to waiting time to fix them. the incorrectnessof the information can also generate mistakes in appointing tasks to thewrong practitioners. as we mentioned in the previous section, when thecontent creators of the ba are not familiar with the stakeholders’ needs,the content generated will not support the execution of their tasks. inthis regard, p6 stated: ‘‘i think it is important that the features have theright ownership to address tasks concerning that features to the right tester.the information can be fetched through other sources, but it takes longer,so the ba is a quick way to get it’’.


terminology occasionally causes misunderstanding because, de-pending on the department of the practitioners, they spend some timeunderstanding what the feature is about. regarding this issue, p2commented: ‘‘i need to land in the ba first to understand which featurei am looking for because the namings in the ba are not the same as thenamings that i’m used to. because it is not the same name i use in softwareterminology, sometimes it is confusing to figure out how a feature is activatedon the camera’’.regarding predictability, we examined if the practitioners had to,at any time, wait for information to be available. when the informationof the ba does not meet this criterion, the automated tests get delayed,which connects to the implications found in the reliability factor. inthis regard, p4 explains: ‘‘if it is missing, you sure have to wait. i am notthe one who put it in. so, i have to tell someone who has to go through thiswhole process, so there is a huge delay. i expect it to take a long time if itis not in there’’.at last, the lack of predictability generates the feeling of uncer-tainty about the availability of the information by stakeholders. as p3observed, ‘‘it sometimes affects when we can’t take in new tests. the baneeds to be updated before, so the tests are run on devices with the correctfeatures’’.the combination of the reported implications influences the stake-holders’ behaviour as they need to execute their tasks. we describe thisbehaviour in the following subsection.


4.5. change in behaviour


in this subsection, we explore how a difference in the level of trustin the ba influences the stakeholders’ behaviour (rq4).there are features with multiple implementations in the ba due todifferences among the products. in some situations, the stakeholdersfind it difficult to know if they can use one of those implementations.they cannot use it in other cases because the ba does not offer thenecessary implementations.to execute their tasks, the stakeholders create workarounds suchas complementary artefacts. they are made within the function teamsand address their specific need. this behaviour is derived from ourreliability investigation. when the information fails the stakeholder,they move towards another solution that will not be ideal, which is


information and software technology 158 (2023) 107170


7


r. ouriques et al.


fig. 5. summary of the findings.


this case. note the remark made by p4: ‘‘it is often that we can’t use theba in those cases, so we can’t make a test out of it. we have our own testsuite with our own made-up ba for many products’’.


the content is expected to be merged with the official ba. however,


there is no control over when those cases happen, how many teamscreate them, or if the content has been actually merged. p4 details thisprocess: ‘‘this artefact is official in the sense that we use it for our tests.no other usage than for test purposes. just my team, as far as i know. itgrows with the need to separate tests for products. we add that if we have atest that needs to be run depending on a feature. if the official ba had theseimplementations, we would not need it’’. during the workshop, we alsoconfirmed that this happens to other teams, which can be disastrous,according to one of the experienced engineers. besides, during ourinvestigation, one feature was missing in the ba.


to better visualise our research findings, we summarised them in


fig. 5. it shows the process of creation, management, and the implica-tions of the differences in trust in a software project. also, how theyinfluence stakeholders’ behaviour.


together these results provide important insights into how differ-


ences in trust over ba can affect software projects, more importantly,how they influence stakeholders’ behaviour when using the ba. in ourcase, this behaviour can be detrimental because the complementaryartefacts can remain unknown and possibly needed by other stakehold-ers. we believe that stakeholders might have other behaviours in adifferent context and use the ba in other ways or not even use them.we discuss the findings and potential solutions in the following section.


5. discussion


this study aimed to understand the implications of differences in


the perception of trust in bas on software projects and their influenceon stakeholders’ behaviour. our findings suggest that most negativeimplications and changes in stakeholders’ behaviour occur because ofinefficient management of the ba.


by abstracting the case results, we can establish a conceptual idea


of how the trust cycle of boundary artefacts functions. we state thattrusting beliefs about the ba influence how the stakeholders use the ba(see fig. 6). negative implications might emerge when practitioners donot perceive the ba as favourable in at least one of the investigatedtrusting beliefs, reliability, functionality, and predictability.


thus, the trust cycle is generalisable to different software devel-


opment companies with different sizes. the negative implications re-sulting from the inconsistencies, though, can be the same or othersbecause they are conditional to the context. for example, we did not


fig. 6. trust cycle.


find implications regarding the functional factor. other contexts ordifferent bas can reveal them — also, different behaviours.


as the ba carries many inconsistencies, the stakeholders can show


less confidence, reducing their trust in the ba. they will use the badifferently from how it was supposed to be used or not use it all. forthat reason, building up the value of the ba by increasing its trust levelsis critical when driving positive behaviour from stakeholders.


in our case, the partial control over the ba has caused several


negative implications and influenced the stakeholders’ behaviour increating complementary artefacts. given that there is a constellationof different teams contributing to and utilising the ba, we believe thatadopting a cooperative approach where the management of the ba isshared between practitioners is a good practice for managing the baand keeping it trustworthy. dividing the management work can reducethe workload compared to leaving the job to one or a few individuals.


also, the studied ba already has partial management of the content.


our suggestions lie in the distribution of the work for the wholeartefact. one example of this approach would be to divide the handlingof the ba between the content and the technical owner when havingmachine-readable artefacts.


to collaborate with this approach, we provide potential solutions


on two main levels. the first refers to the scope of the multidisci-plinary team that currently owns the ba. the second level concernsthe creation of the ba, which aspects should be observed.


information and software technology 158 (2023) 107170


8


r. ouriques et al.


management level


having a formal strategy for managing the entire content pre-


vents inconsistencies in the ba. this process can be done by assemblinginterconnected actors and defining roles and responsibilities for eachpart of the ba’s content to provide correct and timely information [3,33].


the incorrect information has caused complications to test execu-


tion, be it manual or automated. every time spent to fix those punctualissues with the ba can generate avoidable loops and increase costs forcorrective procedures [34,35].


such complications can be minimised by periodic evaluation and


feedback processes. stakeholders can evaluate the ba regarding thetrust aspects through a questionnaire, for example. in addition, the cre-ation of ways to receive and implement feedback can avoid reliabilityissues and prevent the need for accountability due to outdated or wrongcontent.


content creation level


the contributors of the ba have limited knowledge about the stake-


holders and the different usage of the content provided. yet, one crucialaspect of the ba is that the content represents its stakeholders’ needsand is a fundamental part of the ba’s design. we believe mapping thestakeholders, and their needs is a key point for designing bas. itrequires negotiations between contributors and stakeholders to reach aconsensus about the multiple domains of stored knowledge [5,36,37].


occasionally, terminology causes confusion and misinterpretation.


when building complex products, the amount of knowledge and itstypes are often large, creating different terminology levels. the liter-ature reports three main approaches for dealing with terminologyin bas, which vary depending on the terms’ novelty level [35].


• syntactic boundary: usually, a common lexicon is sufficient to


address the differences — other techniques include taxonomiesand store and retrieval technologies.


• semantic boundary: there is a need for common meanings to cre-


ate shared meanings to address the differences and dependenciesthat originated from the terms’ novelty. other techniques: cross-functional interactions/teams and boundary spanners/translators.


• pragmatic boundary: demand for artefacts that can be jointly


transformed. prototyping is a technique to be used.


accommodating experimental and evolutionary content is es-


sential for the case we focus on. it seems counter-intuitive to havesuch flexibility when ba are highly structured from its original char-acterisation. however, software development is a dynamic activity thatusually welcomes change while developing and producing experimentalcontent.


in the case we focus on, there is a frequent need to test new features


that are not yet implemented; thus, it is not in the formal ba. therefore,it is important to be flexible to accommodate this type of contentthat can be changed or removed. otherwise, the content will remainwithin the teams and probably not be known by others. in addition, astechnology evolves, the need to create content in different formats alsochanges. for that purpose, foresee how new content adapts becomesvaluable.


our study revealed how the differences in trust in bas affect soft-


ware projects in different areas of the organisation and interfere withthe task execution of various stakeholders. the decrease in trust resultsfrom inconsistencies in the content associated with the lack of manage-ment of the ba. a structured strategy for representing and managing aba’s content seems appropriate to increase trust levels and efficiency.


it should be noted that we have not investigated the impact of the


negative implications on the software project. although we revealedthem, we do not know how severe they are. a future study could


examine how to measure the implications’ severity level. the resultscould support practitioners in prioritising activities for making adjust-ments and fixes. this is particularly important when dealing with largeand well-established bas that would require an excessive workload forrestructuring them.


another aspect we believe is important for better-designing bas is


investigating the notions of value for different stakeholders. a qualita-tive study exploring the stakeholders’ perceptions of value and how toutilise them could shed light on creating bas. the nuances of value candiffer and provide different aspects that can offer additional value tothe stakeholders rather than only the correct content, for example. webelieve that if the artefact is well-planned from the beginning, there is achance that fewer issues will occur regarding how the artefact suppliesthe stakeholders’ needs.


lastly, the third research direction. we suggest replications of this


study to contribute to building a body of knowledge on implicationsto software projects when practitioners do not perceive the ba asfavourable concerning trusting beliefs. other cases could help us clas-sify negative implications by company size, number of stakeholders,bas not machine-readable, etc.


6. threats to validity


in this section, we discuss a number of threats to the validity of


our study. we followed the guidelines recommended by runesson andhöst [29], who classify such threats as a construct, internal, external,and reliability threats.


construct validity refers to how the theoretical constructs investi-


gated are represented by what the researcher has in mind and whatwas actually investigated during the interviews. in this aspect, weidentified one threat: the interpretation of the criteria to evaluatetrusting beliefs such as reliability, functionality and predictability. toreduce this threat, during the interviews, we defined each criterion. foreach of them, we had questions that helped the practitioner understandthem in the context of information in the artefacts (see fig. 2).


the internal validity concerns whether a third factor might be


affecting the factor in the investigation besides the ones already identi-fied. as we chose an exploratory study, this threat is minimised becausewe do not use pre-defined concepts to be confirmed. to diminishthis threat, we utilised a semi-structured interview guide that allowedthe practitioners to speak spontaneously. in addition, we validatedour findings in a workshop that worked as both a sanity check andadditional data collection.


external validity relates to the extent to which it is possible to


generalise the study’s results to other cases. also, to what extent dothe findings stimulate the interest of other practitioners. as a casestudy, our results provide analytical generalisation through plentifulcontextual information and discussion of the findings [29,38]. thefindings of this study extend to cases with common characteristics, suchas companies that develop hardware and software and utilise a bato store and distribute information about all features throughout thedevelopment process.


concerning the reliability threat, we discuss potential threats related


to how the analysis depends on a specific researcher. to minimise thisthreat, we provided an extensive description of our research approachand a detailed explanation of the coding process with examples of theraw data. also, we offered the semi-structured interview guide as atransparency action.


7. concluding remarks


boundary artefacts support task execution for many stakeholders


within a software development project. however, if practitioners do nottrust the artefact, they will probably not rely on them or have differentbehaviour towards them.


information and software technology 158 (2023) 107170


9


r. ouriques et al.


we conducted an empirical investigation through a case study


to reveal how people create, utilise and manage bas. moreover, weobserved how differences in trust affected software projects and howthey change the stakeholders’ behaviour.


our investigation has shown that practitioners who add new and


adjust existing content do not entirely understand the stakeholders’needs. in addition, the management of the content is partial. thesefindings indicate that parts of the content and stakeholders’ needs arenot supervised, impacting trust levels.


when practitioners do not perceive the ba as favourable in at least


one of the investigated trusting beliefs, specifically reliability and pre-dictability, the stakeholders cannot execute their tasks appropriately,and several implications affect the software project development. ad-ditionally, the stakeholders create workarounds to supply their needs.among those, they create complementary artefacts within their teams.


to function as planned, organisations need to increase the level


of trust of their bas, and the proper management of the content iscrucial for increasing this trust level. this management should includecreating content based on stakeholders’ needs and monitoring changes.future research could explore and develop other ways for support-ing practitioners in creating and managing such artefacts in softwaredevelopment environments.


credit authorship contribution statement


raquel ouriques: conceptualization, methodology, investigation,


formal analysis, resources, data curation, validation, writing – origi-nal draft, review & editing, visualization. fabian fagerholm: concep-tualization, validation, writing – review & editing, supervision. danielmendez: conceptualization, validation, writing – review & editing,supervision. baldvin gislason bern: writing – reviewing.


declaration of competing interest


no author associated with this paper has disclosed any potential or


pertinent conflicts which may be perceived to have impending conflictwith this work. for full disclosure statements refer to https://doi.org/


data availability


the data that has been used is confidential.


acknowledgements


we want to thank all practitioners at axis who participated and


contributed to this study. we would also like to acknowledge thatresearch profile project at blekinge institute of technology.

