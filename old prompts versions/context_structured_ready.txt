Query: How do I write a good requirement statement?
Context: draft  
title
what makes a good requirement?
was macht eine gute anforderung aus?
tags
requirements quality
anforderungsqualität
estimated duration
10 min
level
external ressources
international standards for systems and software 
engineering
requirements engineering quick check
requirements smells
dependencies
next item
id 1.1.1.9 - form of requirements  
goals (teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: syntactic minimality
there are no unnecessary syntactic elements in the speciﬁcations.
modularity
the speciﬁcation is organised in modules, separated according to certain topics.
traceability
each requirement has a rationale.
ease of perception
the speciﬁcations are well-suited to be understood by people not involved into the process.
rq 3
unambiguity
the requirements are stated unambiguously.
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: 5. singularity: it should define only one characteristic or constraint.
6. feasibility: each requirement should be achievable within the constraints of the project.
7. verifiability: it should be possible to verify that a requirement has been met.
8. correctness: it should accurately reflect the need of stakeholder.
9. conformity: each written requirement should follow the predefined structure.
Source: software4kmu learning nuggets.pdf

Context: and requires some practice to be effective. in essence, while structured language requirements maybe be a bit cumbersome to write 
down and read (often resembling the user-friendly charme of an instruction manual to a tax declaration form), they offer the benefit of 
clear structure and some basic quality criteria that make them easier to interpret (implement, and test).
example
Source: software4kmu learning nuggets.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Query: How do I write a good requirement statement?
Context: To write a good requirement statement, consider the following summarized insights based on the relevant columns from the DataFrame:

1. **Compatibility**: Ensure that the requirements support co-existence and interoperability, which are highly important for development. Aim for a compatibility score that reflects the necessity of these aspects.

2. **Maintainability**: Focus on aspects such as analysability, modularity, modifiability, reusability, and testability. A good requirement should facilitate easy maintenance and updates.

3. **Performance Efficiency**: Address time behavior, resource utilization, and capacity. Requirements should specify performance metrics to ensure efficiency.

4. **Portability**: Requirements should include adaptability, installability, and replaceability to ensure that the system can be easily moved or modified.

5. **Reliability**: Include aspects like availability, fault tolerance, maturity, and recoverability. A strong requirement statement should ensure that the system is reliable under various conditions.

6. **Security**: Incorporate elements of accountability, authenticity, confidentiality, integrity, and non-repudiation. Security requirements are crucial for protecting sensitive information.

7. **Usability**: Focus on accessibility, appropriateness, recognizability, learnability, operability, user error protection, and user interface aesthetics. A good requirement should enhance user experience.

8. **Documentation Granularity**: Specify the level of detail required in documentation to ensure clarity and completeness in requirements.

9. **Satisfaction with Requirements Engineering**: Assess how satisfied stakeholders are with the requirements engineering process, as this can influence the quality of requirement statements.

10. **Reasons for Satisfaction**: Understand the reasons behind satisfaction in requirements engineering, which can provide insights into effective practices and areas for improvement.

By addressing these aspects, you can create comprehensive and effective requirement statements that meet the needs of stakeholders and ensure successful project outcomes.
Source: napire data

Query: how do i write a good requirement statement?
Context: draft  
title
what makes a good requirement?
was macht eine gute anforderung aus?
tags
requirements quality
anforderungsqualität
estimated duration
10 min
level
external ressources
international standards for systems and software 
engineering
requirements engineering quick check
requirements smells
dependencies
next item
id 1.1.1.9 - form of requirements  
goals (teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: syntactic minimality
there are no unnecessary syntactic elements in the speciﬁcations.
modularity
the speciﬁcation is organised in modules, separated according to certain topics.
traceability
each requirement has a rationale.
ease of perception
the speciﬁcations are well-suited to be understood by people not involved into the process.
rq 3
unambiguity
the requirements are stated unambiguously.
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: and requires some practice to be effective. in essence, while structured language requirements maybe be a bit cumbersome to write 
down and read (often resembling the user-friendly charme of an instruction manual to a tax declaration form), they offer the benefit of 
clear structure and some basic quality criteria that make them easier to interpret (implement, and test).
example
Source: software4kmu learning nuggets.pdf

Context: 5. singularity: it should define only one characteristic or constraint.
6. feasibility: each requirement should be achievable within the constraints of the project.
7. verifiability: it should be possible to verify that a requirement has been met.
8. correctness: it should accurately reflect the need of stakeholder.
9. conformity: each written requirement should follow the predefined structure.
Source: software4kmu learning nuggets.pdf

Context: effective requirements accurately capture stakeholder needs, adhere to international standards, and are clear, unambiguous and 
feasible within the project constraints, ensuring successful software development. 
a comprehensive set of requirements should be complete, consistent and feasible. 
[englisch] key takeaway
german
Source: software4kmu learning nuggets.pdf

Query: how do i write a good requirement statement?
Context: To write a good requirement statement, consider the following summarized insights based on the relevant attributes from the DataFrame:

1. **Compatibility**: Aim for a compatibility score of approximately 0.42, indicating that co-existence and interoperability are important for development.

2. **Maintainability**: Focus on maintainability aspects, with an average score of about 0.56. This includes ensuring the requirements are analyzable, modular, modifiable, reusable, and testable.

3. **Performance Efficiency**: Strive for performance efficiency, which has an average score of around 0.58. This involves addressing time behavior, resource utilization, and capacity.

4. **Portability**: Portability is less emphasized, with a score of about 0.19. However, adaptability, installability, and replaceability should still be considered.

5. **Reliability**: Reliability is crucial, with an average score of approximately 0.59. This includes aspects like availability, fault tolerance, maturity, and recoverability.

6. **Security**: Security features should be prioritized, with an average score of about 0.50, focusing on accountability, authenticity, confidentiality, integrity, and non-repudiation.

7. **Usability**: Usability is highly important, with an average score of around 0.63. This encompasses accessibility, appropriateness, recognizability, learnability, operability, user error protection, and user interface aesthetics.

8. **Documentation Granularity**: There is insufficient data on documentation granularity, but it is essential to ensure that requirements are well-documented.

9. **Goals**: The average score for goals is about 0.35, indicating that clear objectives should be defined in the requirement statements.

10. **Quality Properties**: Quality properties have a lower emphasis, with an average score of approximately 0.27, suggesting that they should be clearly articulated in the requirements.

In summary, a good requirement statement should focus on compatibility, maintainability, performance efficiency, reliability, security, and usability while ensuring clear documentation and defined goals.
Source: napire data

Query: What is the level of detail for a requirement that I must provide as a business analyst?
Context: coverage of abstraction levels. requirements at different levels of detail, ranging 
from business goals to fine-grained technical requirements (e.g. concerning the system 
hardware), need to be included in the requirements document. high-level requirements 
provide a justification for detailed requirements and support the understandability of
Source: A Meta Model for Artefact-Orientation Fundamentals and Lessons Learned in Requirements Engineering.pdf

Context: detailed guidance on the concepts to use when specifying the contents. at
the same time, however, those more detailed models constrain the ease of use
as they implicate a higher learning curve. obviously, simpler artefact mod-
els have the opposite eﬀect. whereas they are easy to apply and understand,
they cannot give detailed guidance on creating detailed, syntactically consis-
Source: Artefact-based Requirements Engineering The AMDiRE Approach.pdf

Context: 1. the business analyst has the responsibility for the context speciﬁcation
and is expected to have the necessary domain knowledge, e.g. regarding
the business processes, typical stakeholders, or constraints and rules.
2. the requirements engineer has the responsibility for the requirements
speciﬁcation and serves also as a mediator between the business analyst
and the system architect.
Source: Artefact-based Requirements Engineering The AMDiRE Approach.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: 2. appropriateness: while the refined requirement is clearer, it may still be too broad and open to interpretation. let's make it more 
specific.
refined requirement: the system must include a menu bar with easily recognisable icons and labels for navigation, providing direct 
access to frequently used functions.
Source: software4kmu learning nuggets.pdf

Query: What is the level of detail for a requirement that I must provide as a business analyst?
Context: The analysis of the DataFrame regarding the level of detail for requirements that a business analyst must provide reveals the following insights:

1. **Responsibility for Requirements Elicitation**: The most common role responsible for requirements elicitation is the Business Analyst, with 115 occurrences.

2. **Documentation Granularity**: The DataFrame does not provide specific numerical values for documentation granularity, but it indicates that there are various approaches to documenting requirements.

3. **Elicitation Methods**:
   - **Refinement in Several Iterations**: This method is utilized by a portion of the respondents, indicating a preference for iterative refinement.
   - **Dedicated Project Phase**: Some respondents also engage in a specifically dedicated project phase for eliciting and refining requirements.
   - **Interviews**: This method is commonly used for requirements elicitation.
   - **Analysis of Existing Documents**: This approach is also employed, suggesting that existing documentation is a valuable resource.
   - **Prototyping**: A moderate number of respondents use prototyping as a method for elicitation.
   - **Workshops and Focus Groups**: This method is utilized by some, indicating collaborative approaches to gathering requirements.
   - **Reuse of Databases and Guidelines**: This is less frequently mentioned, suggesting it may not be a primary method.
   - **Design Thinking / Lean Startup**: This approach is mentioned but not widely used, indicating it may be less common in the context of requirements elicitation.

Overall, the level of detail required for requirements appears to involve a combination of iterative refinement, various elicitation methods, and a focus on collaboration and existing resources.
Source: napire data

Query: what is the level of detail for a requirement that i must provide as a business analyst?
Context: coverage of abstraction levels. requirements at different levels of detail, ranging 
from business goals to fine-grained technical requirements (e.g. concerning the system 
hardware), need to be included in the requirements document. high-level requirements 
provide a justification for detailed requirements and support the understandability of
Source: A Meta Model for Artefact-Orientation Fundamentals and Lessons Learned in Requirements Engineering.pdf

Context: large
1. incomplete and / or hidden requirements
17 (44%)
2. moving targets (changing goals, business pro-
cesses and / or requirements)
17 (44%)
3. communication ﬂaws between project team and
the customer
15 (38%)
4. time boxing / not enough time in general
14 (36%)
5. underspeciﬁed requirements that are too abstract
11 (28%)
plan-
driven
small
1. incomplete and / or hidden requirements
7 (64%)
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: 1. the business analyst has the responsibility for the context speciﬁcation
and is expected to have the necessary domain knowledge, e.g. regarding
the business processes, typical stakeholders, or constraints and rules.
2. the requirements engineer has the responsibility for the requirements
speciﬁcation and serves also as a mediator between the business analyst
and the system architect.
Source: Artefact-based Requirements Engineering The AMDiRE Approach.pdf

Context: instructions on how to describe use cases at munich re.
data collection. following the process as described in
sec. iii-b, the approach contained four phases: first, we
received and analysed a full set of 51 requirements engineering
artifacts that were created in the project, including use cases,
business rules and others. in the ﬁrst, 90-minutes workshop
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Query: what is the level of detail for a requirement that i must provide as a business analyst?
Context: The analysis of the DataFrame indicates the following relevant information regarding the level of detail for requirements that a business analyst must provide:

1. **Who is Responsible for Requirements Elicitation**: The most common role identified is the Business Analyst, which appears 115 times.

2. **Documentation Granularity**: The DataFrame does not provide specific numerical values for this column, but it is essential for understanding the level of detail required in documentation.

3. **Elicitation Methods**:
   - **Requirements Elicitation with Interviews**: This method is frequently used, indicating a preference for direct engagement with stakeholders.
   - **Requirements Elicitation with Analysis of Existing Documents**: This method is also utilized, suggesting that reviewing existing documentation is part of the requirements gathering process.
   - **Requirements Elicitation with Prototyping**: This method is employed, highlighting the importance of visualizing requirements through prototypes.
   - **Requirements Elicitation with Workshops and Focus Groups**: This collaborative approach is used, emphasizing the need for group discussions to refine requirements.
   - **Requirements Elicitation with Reuse Databases and Guidelines**: This method is less common, indicating that while it is used, it may not be the primary approach.
   - **Requirements Elicitation with External Experts**: This method is used by approximately 17% of the respondents, suggesting that consulting external expertise is considered valuable but not universally applied.

In summary, as a business analyst, it is crucial to provide detailed requirements through various elicitation methods, with a strong emphasis on interviews and collaborative workshops, while also considering documentation granularity.
Source: napire data

Query: Do all stakeholders need to review the requirements?
Context: ments artifacts, however, need to involve all relevant
stakeholders [65], who must manually read and un-
derstand each requirements artifact. moreover, they
are diﬃcult to perform. they require a high domain
knowledge and expertise from the reviewers [65] and
the quality of their outcome depends on the quality of
the reviewer [75]. on top of all this, reviewers could
Source: Rapid quality assurance with Requirements Smells.pdf

Context: 6. further refine and classification in order to achieve more clarity, completeness, and unambiguity​
7. conduct further analysis, refinement and completion as basis for further (stakeholder) feedback​
8. unless not approved by stakeholders, requirements remain candidates (or assumptions)​
9. since requirements elicitation is an iterative process, go back to 2.
requirements (elicitation) sources​
Source: software4kmu learning nuggets.pdf

Context: interested in the quality of the software system, while product 
managers also care about sustainability of the business model and 
balancing costs and quality of the product. 
in any case, capturing the stakeholders explicitly is important as 
they are the source for various information with respect to the 
operational context of a system and requirements (e.g. end users
Source: software4kmu learning nuggets.pdf

Context: compliance. moreover, stakeholders tend to want security 
requirement satisfaction to be very close to yes. third, the 
effort stakeholders might be willing to dedicate to satisfying 
sr also depends on the likelihood and impact of a failure to 
comply with them. this is even more challenging in the 
context of agile software projects because, apparently,
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: potential processes and use cases) for which corresponding
stakeholders are available. this way, the approach can be
conducted entirely including the creation of the business and
the requirements speciﬁcation. we deﬁne three main groups
of participants as study subjects:
1) industry participants: experts from industry responsible
proceedings of ease 2011
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Query: Do all stakeholders need to review the requirements?
Context: Based on the analysis of the DataFrame, the following relevant information regarding stakeholder involvement in reviewing requirements has been summarized:

1. **Who is Responsible for Requirements Elicitation**: The most common role responsible for requirements elicitation is the Business Analyst, with 115 occurrences.

2. **Stakeholders**: The majority of responses indicate that there are no stakeholders involved in the requirements review process, with 349 out of 455 entries indicating '0'.

3. **Documentation Granularity**: This column is not summarized in the output but is relevant for understanding how detailed the documentation is.

4. **Elicitation Iterations**: The DataFrame includes responses about whether requirements are refined in several iterations, which can indicate stakeholder involvement.

5. **Dedicated Project Phase for Elicitation**: Similar to the previous point, this indicates if there is a specific phase for stakeholder involvement in requirements elicitation.

6. **Do Not Elicit Requirements Themselves**: This column indicates whether the team does not elicit requirements themselves, which could imply reliance on stakeholders.

7. **Testers Participation in Reviews**: Approximately 44% of the entries indicate that testers participate in requirements reviews, suggesting some level of stakeholder involvement.

8. **Verification of Requirements**: Only about 6% of the entries indicate that the team does not verify or validate their requirements, which may suggest that some form of review is taking place.

In conclusion, while there is some involvement of stakeholders in the requirements review process, the majority of responses indicate a lack of stakeholder participation. Therefore, it can be inferred that not all stakeholders need to review the requirements, as many teams operate without direct stakeholder involvement in this aspect.
Source: napire data

Query: do all stakeholders need to review the requirements?
Context: ments artifacts, however, need to involve all relevant
stakeholders [65], who must manually read and un-
derstand each requirements artifact. moreover, they
are diﬃcult to perform. they require a high domain
knowledge and expertise from the reviewers [65] and
the quality of their outcome depends on the quality of
the reviewer [75]. on top of all this, reviewers could
Source: Rapid quality assurance with Requirements Smells.pdf

Context: compliance. moreover, stakeholders tend to want security 
requirement satisfaction to be very close to yes. third, the 
effort stakeholders might be willing to dedicate to satisfying 
sr also depends on the likelihood and impact of a failure to 
comply with them. this is even more challenging in the 
context of agile software projects because, apparently,
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: 6. further refine and classification in order to achieve more clarity, completeness, and unambiguity​
7. conduct further analysis, refinement and completion as basis for further (stakeholder) feedback​
8. unless not approved by stakeholders, requirements remain candidates (or assumptions)​
9. since requirements elicitation is an iterative process, go back to 2.
requirements (elicitation) sources​
Source: software4kmu learning nuggets.pdf

Context: interested in the quality of the software system, while product 
managers also care about sustainability of the business model and 
balancing costs and quality of the product. 
in any case, capturing the stakeholders explicitly is important as 
they are the source for various information with respect to the 
operational context of a system and requirements (e.g. end users
Source: software4kmu learning nuggets.pdf

Context: visualisation shows, there are stakeholders that will be directly 
interacting with the system, such as end users, and others that will 
maybe not interacting with the system. while all stakeholders 
constitute a potential source for requirements, the those interacting 
with the system will be used also in other content items to explore,
Source: software4kmu learning nuggets.pdf

Query: do all stakeholders need to review the requirements?
Context: Based on the analysis of the DataFrame, the following insights can be drawn regarding stakeholder involvement in reviewing requirements:

1. **Who is Responsible for Requirements Elicitation**: The most common role responsible for requirements elicitation is the Business Analyst, indicating a specific role often tasked with this responsibility.

2. **Stakeholder Involvement**: The majority of responses indicate that stakeholders are not involved in the requirements elicitation process, with a frequency of 349 out of 455 indicating '0' (not involved).

3. **Documentation Granularity**: The DataFrame suggests that there is a lack of detailed documentation practices, as indicated by the responses.

4. **Refinement of Requirements**: There are indications that requirements are refined in several iterations, but the extent of stakeholder involvement in this process is not clearly defined.

5. **Elicitation Practices**: A small percentage of respondents indicated that they do not elicit requirements themselves, suggesting that some teams may rely on others for this task.

6. **Verification and Validation**: A notable percentage of respondents (approximately 5%) indicated that they do not verify or validate their requirements, which raises concerns about the thoroughness of the requirements process.

In summary, while there are designated roles for requirements elicitation, the data suggests that not all stakeholders are actively involved in reviewing the requirements. This could lead to gaps in understanding and addressing stakeholder needs effectively. Therefore, it is advisable for all stakeholders to be involved in the review process to ensure comprehensive requirements gathering and validation.
Source: napire data

Query: How much time do I need to spend for Requirements Engineering?
Context: x 997 
industrial practices of requirements engineering for ml-enabled systems in brazil 
sbes’24, september 30 – october 04, 2024, curitiba, pr 
1 - 2 years 
3 - 4 years 
5 - 6 years 
7 - 8 years 
+9 years 
< 1 year 
data scientist 
business analyst 
project lead / project manager 
developer 
test manager / tester 
requirements engineer 
(a) participants' company size (n = 72)
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: comprehension on its industry readiness and objectively 
measuring effort and obtained benefits. the average 
application effort was reasonably low (15.5 hours) when 
compared to the obtained benefits (reducing defect rates by 
46 percent for requirements and 50 percent for designs). 
while the defect rate results were similar to those mentioned
Source: Supporting Defect Causal Analysis in Practice with Cross-Company Data on Causes of Requirements Engineering Problems.pdf

Context: presentations and workshop to evaluate the requirements against the customer’s expectations
roleplay to show-case the systems usage and respective requirements
prototyping of parts of systems, especially if the overall project is very large
involved stakeholders
at this phase of the requirement engineering lifecycle, the main responsibles are requirements engineers. they coordinate validation
Source: software4kmu learning nuggets.pdf

Context: 5 min
level
external ressources
research describing the importance of re
dependencies
id 1.1.1.1 - frequently encountered misconceptions  
next item
id 1.1.1.3 - what is a requirement?  
goals (teaching 
perspective)
to provide an understanding of the role and significance of requirements engineering in software 
development
content description 
(teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: 5 min
level
external ressources
dependencies
next item
id 1.1.1.2 - what is requirements engineering?  
goals (teaching 
perspective)
to clarify misconceptions and make a clear distinction between the myths and realities of requirements 
engineering in order to provide an interesting introduction into the following topics.
content description 
(teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Query: How much time do I need to spend for Requirements Engineering?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how much time do i need to spend for requirements engineering?
Context: x 997 
industrial practices of requirements engineering for ml-enabled systems in brazil 
sbes’24, september 30 – october 04, 2024, curitiba, pr 
1 - 2 years 
3 - 4 years 
5 - 6 years 
7 - 8 years 
+9 years 
< 1 year 
data scientist 
business analyst 
project lead / project manager 
developer 
test manager / tester 
requirements engineer 
(a) participants' company size (n = 72)
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: comprehension on its industry readiness and objectively 
measuring effort and obtained benefits. the average 
application effort was reasonably low (15.5 hours) when 
compared to the obtained benefits (reducing defect rates by 
46 percent for requirements and 50 percent for designs). 
while the defect rate results were similar to those mentioned
Source: Supporting Defect Causal Analysis in Practice with Cross-Company Data on Causes of Requirements Engineering Problems.pdf

Context: presentations and workshop to evaluate the requirements against the customer’s expectations
roleplay to show-case the systems usage and respective requirements
prototyping of parts of systems, especially if the overall project is very large
involved stakeholders
at this phase of the requirement engineering lifecycle, the main responsibles are requirements engineers. they coordinate validation
Source: software4kmu learning nuggets.pdf

Context: 5 min
level
external ressources
research describing the importance of re
dependencies
id 1.1.1.1 - frequently encountered misconceptions  
next item
id 1.1.1.3 - what is a requirement?  
goals (teaching 
perspective)
to provide an understanding of the role and significance of requirements engineering in software 
development
content description 
(teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: 5 min
level
external ressources
dependencies
next item
id 1.1.1.2 - what is requirements engineering?  
goals (teaching 
perspective)
to clarify misconceptions and make a clear distinction between the myths and realities of requirements 
engineering in order to provide an interesting introduction into the following topics.
content description 
(teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Query: how much time do i need to spend for requirements engineering?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: How to perform elicitation?
Context: 3. conduct structured elicitation by applying elicitation (and creativity) techniques​
 such as interviews, questionnaires… (more on techniques below)
4. document requirements, for example with the help of checklists and templates (e.g. volere or self-made)​
5. structure and transfer to models in order to provide a more structured representation: what belongs where?​
Source: software4kmu learning nuggets.pdf

Context: students.
6.1.3. data collection procedure
we used a 6-step procedure to collect the data
necessary for answering the research questions.
1. collect requirements artifact(s) for each case. we
retrieved the requirements artifacts to be ana-
lyzed in each case. for one case, the require-
ments were stored in microsoft word documents.
for the other cases, this involved extracting the
Source: Rapid quality assurance with Requirements Smells.pdf

Context: first run, however, showed that other elicitation techniques are also widely in use [42]. therefore,
we widened the choice of elicitation techniques as shown in table 9. to make it consistent with
common terminology, we adopted the elicitation techniques as described in the swebok [7]. table 9
also notes whether the corresponding proposition was supported in the first run or if it is a new
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: requirements are documented in protocols or meeting minutes from workshops and interviews. solely taking these needs and constraints as is would not serve any use, as they vary in granularity, 
may have duplicates or overlap with other requirements and they may have no common format. 
goals of requirements analysis
Source: software4kmu learning nuggets.pdf

Context: requirements elicitation can be done in multiple techniques which are adapted according to the stakeholder characteristics.
inhibition and distortion (e.g., by personal questions)
example 2: questionnaire-based survey
similar to interviews, but ​
no possibility to interact​
no possibility for inquiries​
usually conducted individually​
scales better than interviews​
Source: software4kmu learning nuggets.pdf

Query: How to perform elicitation?
Context: To perform requirements elicitation effectively, the following methods can be utilized based on their average usage in the provided DataFrame:

1. **Elicit and/or Refine Requirements in Several Iterations**: 69.9%
2. **Requirements Elicitation with Interviews**: 69.5%
3. **Requirements Elicitation with Analysis of Existing Documents**: 59.8%
4. **Requirements Elicitation with Workshops and Focus Groups**: 56.8%
5. **Requirements Elicitation with Prototyping**: 48.2%
6. **Requirements Elicitation with Observations**: 35.0%
7. **Requirements Elicitation with Design Thinking / Lean Startup**: 19.9%
8. **Requirements Elicitation with Risk Analyses**: 19.7%
9. **Requirements Elicitation with Reuse Databases and Guidelines**: 17.4%
10. **Requirements Elicitation with External Experts**: 17.2%

These methods indicate a structured approach to gathering and refining requirements, highlighting the importance of iterative processes and various elicitation techniques.
Source: napire data

Query: how to perform elicitation?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Context: shaping of ml-enabled systems. 
the survey also revealed that practitioners typically use traditional require- 
ments elicitation techniques (interviews, prototyping, scenarios, workshops, and 
observation). comparing the results to the elicitation techniques reported for 
traditional re [29], an observable difference is that requirements workshops are
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: first run, however, showed that other elicitation techniques are also widely in use [42]. therefore,
we widened the choice of elicitation techniques as shown in table 9. to make it consistent with
common terminology, we adopted the elicitation techniques as described in the swebok [7]. table 9
also notes whether the corresponding proposition was supported in the first run or if it is a new
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: 3. conduct structured elicitation by applying elicitation (and creativity) techniques​
 such as interviews, questionnaires… (more on techniques below)
4. document requirements, for example with the help of checklists and templates (e.g. volere or self-made)​
5. structure and transfer to models in order to provide a more structured representation: what belongs where?​
Source: software4kmu learning nuggets.pdf

Query: how to perform elicitation?
Context: To perform requirements elicitation effectively, the following methods can be utilized based on their average usage in the provided data:

1. **Elicit and/or Refine Requirements in Several Iterations**: 69.9%
2. **Requirements Elicitation with Interviews**: 69.5%
3. **Requirements Elicitation with Analysis of Existing Documents**: 59.8%
4. **Requirements Elicitation with Workshops and Focus Groups**: 56.8%
5. **Requirements Elicitation with Prototyping**: 48.2%
6. **Requirements Elicitation with Observations**: 35.0%
7. **Requirements Elicitation with Design Thinking / Lean Startup**: 19.9%
8. **Requirements Elicitation with Risk Analyses**: 19.7%
9. **Requirements Elicitation with Reuse Databases and Guidelines**: 17.4%
10. **Requirements Elicitation with External Experts**: 17.2%

These methods highlight the most effective approaches to gather and refine requirements in a project setting.
Source: napire data

Query: How to prioritize all requirements my team proposed in order to deliver the most value quicker?
Context: define priorities (0.38%) 
model evaluation metric 
choice (0.38%) 
balancing risks and benefits (0.38%) 
estimation issues (0.38%) 
incomplete/incorrect requirements (1.91%) 
end to end process (0.38%) 
scope definition (1.91%) 
accuracy checking (0.38%) 
defining/documenting requirements (2.29%) 
data science complexity (1.15%) 
unclear requirements (4.96%) 
lack of data science
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: be done." by focusing on the problem first and identifying solutions second, organizations can ensure that they meet the requirements 
of stakeholders, consider all project limitations and scope, and choose the best possible solution. this approach helps to streamline the 
process and achieve the desired outcomes more efficiently.
types and forms of requirements
Source: software4kmu learning nuggets.pdf

Context: viable and suﬃciently justiﬁed, the requirement candidates are prioritized in
a project prioritization state (similar to backlog prioritization), called m1. fi-
nally, the prioritized requirements are hand-shaken with the developer teams
in a state called m2 [18]. when a requirement is unclear at the m2 state, it
is pushed back to m1 for re-prioritization. similarly, a requirement is pushed
Source: Causality in Requirements Artifacts Prevalence, Detection, and Impact.pdf

Context: no. for the last question, we also needed to take
the criticality into account. therefore, in case
practitioners answered that they would resolve a
ﬁnding, we also asked whether they would resolve
it immediately, in a short time (i.e. within this
project iteration) or in a long time (e.g. if it hap-
pens again). in addition to these three questions,
we took notes of qualitative feedback, such as
Source: Rapid quality assurance with Requirements Smells.pdf

Context: the
objectives
of
the
customers.
in
particular,
most
customers
do
not
share
enough
details
of
their
organisation
(e.g.,
their
business
processes) for performing such calculations, mostly
for reasons of conﬁdentiality. this is especially true
when elaborating the value of single requirements
to the customers. consequently, the prioritisation of
Source: Field Study on Requirements Engineering Artefacts and Patterns.pdf

Query: How to prioritize all requirements my team proposed in order to deliver the most value quicker?
Context: To prioritize the requirements proposed by your team in order to deliver the most value quickly, you can consider the following summarized information based on the importance of various factors:

1. **Usability** (Importance: 0.645) - Focus on enhancing accessibility, recognizability, learnability, operability, and user interface aesthetics.
2. **Performance Efficiency** (Importance: 0.559) - Improve time behavior, resource utilization, and capacity.
3. **Maintainability** (Importance: 0.548) - Ensure the system is analyzable, modular, modifiable, reusable, and testable.
4. **Reliability** (Importance: 0.538) - Aim for high availability, fault tolerance, maturity, and recoverability.
5. **Security** (Importance: 0.409) - Address accountability, authenticity, confidentiality, integrity, and non-repudiation.
6. **Compatibility** (Importance: 0.376) - Ensure co-existence and interoperability with other systems.
7. **Safety** (Importance: 0.301) - Focus on minimizing risks to health or disaster.
8. **Portability** (Importance: 0.129) - Enhance adaptability, installability, and replaceability.

The columns related to satisfaction with requirements engineering and necessary changes did not provide sufficient data for analysis. 

By prioritizing the requirements based on these factors, your team can focus on delivering the most valuable features first, ensuring a more effective and efficient development process.
Source: napire data

Query: how to prioritize all requirements my team proposed in order to deliver the most value quicker?
Context: be done." by focusing on the problem first and identifying solutions second, organizations can ensure that they meet the requirements 
of stakeholders, consider all project limitations and scope, and choose the best possible solution. this approach helps to streamline the 
process and achieve the desired outcomes more efficiently.
types and forms of requirements
Source: software4kmu learning nuggets.pdf

Context: tive programming environments that can be used to process data and create ml 
models, appear as the most used tool for documenting requirements. again, this 
requirements overthinking (0.38%) 
project (0.38%) 
domain complexity (0.38%) strategic alignments (0.38%) 
solution uniqueness (0.38%) 
method (0.38%) 
difficulties in value creation (0.38%) 
define priorities (0.38%)
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: improve the analysis to be more detailed.  
more frequent meetings with the customer to align expectations. 
requirements reviews and frequent releases. 
improving the quality of the requirements documentation, or improving elicitation methods. 
developing requirements according to suggestions of the mps-sw reference model. 
improvement of the artefacts; adoption of software inspections.
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: viable and suﬃciently justiﬁed, the requirement candidates are prioritized in
a project prioritization state (similar to backlog prioritization), called m1. fi-
nally, the prioritized requirements are hand-shaken with the developer teams
in a state called m2 [18]. when a requirement is unclear at the m2 state, it
is pushed back to m1 for re-prioritization. similarly, a requirement is pushed
Source: Causality in Requirements Artifacts Prevalence, Detection, and Impact.pdf

Context: define priorities (0.38%) 
model evaluation metric 
choice (0.38%) 
balancing risks and benefits (0.38%) 
estimation issues (0.38%) 
incomplete/incorrect requirements (1.91%) 
end to end process (0.38%) 
scope definition (1.91%) 
accuracy checking (0.38%) 
defining/documenting requirements (2.29%) 
data science complexity (1.15%) 
unclear requirements (4.96%) 
lack of data science
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Query: how to prioritize all requirements my team proposed in order to deliver the most value quicker?
Context: To prioritize the requirements proposed by your team in order to deliver the most value quicker, you can consider the following summarized information based on the importance of various factors:

1. **Usability** (Importance: 0.631) - Focus on enhancing accessibility, recognizability, learnability, operability, and user interface aesthetics.
2. **Reliability** (Importance: 0.590) - Ensure the system is available, fault-tolerant, and mature, with good recoverability.
3. **Performance Efficiency** (Importance: 0.578) - Optimize time behavior, resource utilization, and capacity.
4. **Maintainability** (Importance: 0.561) - Improve analysability, modularity, modifiability, reusability, and testability.
5. **Security** (Importance: 0.504) - Strengthen accountability, authenticity, confidentiality, integrity, and non-repudiation.
6. **Compatibility** (Importance: 0.418) - Ensure co-existence and interoperability with other systems.
7. **Safety** (Importance: 0.285) - Address risks related to health or disaster.
8. **Portability** (Importance: 0.195) - Enhance adaptability, installability, and replaceability.

The satisfaction levels regarding requirements engineering were not available for analysis. However, focusing on the factors listed above, starting with Usability and Reliability, will likely yield the most value in the shortest time frame.
Source: napire data

Query: Can you generate user stories from the following requirement? Requirement: "The mobile app should allow users to reset their passwords using either email or SMS."
Context: example
the system must provide a search function that allows users to find products by name or category.
users must be able to export their data reports in csv format directly from their dashboard.
example
authorized users should be able to access advanced features depending on their preferences.
Source: software4kmu learning nuggets.pdf

Context: secure transactions by encrypting sensitive information and providing a confirmation email for each purchase. additionally, users 
have the option to track their orders and view their purchase history. the platform also features a user-friendly interface with intuitive 
navigation and responsive design for optimal viewing on various devices, including desktops, laptops, tablets, and smartphones.
Source: software4kmu learning nuggets.pdf

Context: ia4. 
passwords 
treatment 
must 
include 
complex passphrases, options to recover and 
reset the password and default passwords not 
allowed. 
for each user story, the generated reading technique 
focuses the reviewer to verify whether its security 
specifications contain any of the defect types. this happens 
when reviewers check the security specifications against the
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: we analyzed over 1,000 user stories containing roughly
28,000 words. for rq 2.2, we met with an experienced
scrum master and a long-term developer, who have
worked on several projects for techdivision.
6http://www.magento.com
7http://www.typo3.org
8https://atlassian.com/software/jira
case d: university of stuttgart. the requirements of
case d were created by 52 groups of three 2nd-year
Source: Rapid quality assurance with Requirements Smells.pdf

Context: we mitigated this threat
by directly asking the study subjects for the corresponding account names and deviations from the actual
naming convention. second, change requests may not have been accounted for politically motivated reasons.
change requests that were not billed for whatever reason appear in the account system with negative eﬀort.
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Query: Can you generate user stories from the following requirement? Requirement: "The mobile app should allow users to reset their passwords using either email or SMS."
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: can you generate user stories from the following requirement? requirement: "the mobile app should allow users to reset their passwords using either email or sms."
Context: ia4. 
passwords 
treatment 
must 
include 
complex passphrases, options to recover and 
reset the password and default passwords not 
allowed. 
for each user story, the generated reading technique 
focuses the reviewer to verify whether its security 
specifications contain any of the defect types. this happens 
when reviewers check the security specifications against the
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: secure transactions by encrypting sensitive information and providing a confirmation email for each purchase. additionally, users 
have the option to track their orders and view their purchase history. the platform also features a user-friendly interface with intuitive 
navigation and responsive design for optimal viewing on various devices, including desktops, laptops, tablets, and smartphones.
Source: software4kmu learning nuggets.pdf

Context: we analyzed over 1,000 user stories containing roughly
28,000 words. for rq 2.2, we met with an experienced
scrum master and a long-term developer, who have
worked on several projects for techdivision.
6http://www.magento.com
7http://www.typo3.org
8https://atlassian.com/software/jira
case d: university of stuttgart. the requirements of
case d were created by 52 groups of three 2nd-year
Source: Rapid quality assurance with Requirements Smells.pdf

Context: user stories.
with regards to whether a requirements engineering standard is mandatory or practised (see
proposition p 26 stating that requirements engineering standards are neither practised nor
mandatory is not supported by the data. quite to the contrary, it seems that the standards are
practised in most organisations regardless whether they are mandatory or not. the two answers
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: we mitigated this threat
by directly asking the study subjects for the corresponding account names and deviations from the actual
naming convention. second, change requests may not have been accounted for politically motivated reasons.
change requests that were not billed for whatever reason appear in the account system with negative eﬀort.
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Query: can you generate user stories from the following requirement? requirement: "the mobile app should allow users to reset their passwords using either email or sms."
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: How to structure big projects?
Context: to 20 person years as small-scale projects, from 20 to 120 person years as medium-scale projects, and above
120 person years as large-scale projects. the analysed projects are labelled with numbers and it is also
mentioned whether they are ﬁnished or still ongoing (in terms of further releases or increments). all of the
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: activities such as project organisation and management (e.g. effort
estimation), design, and (acceptance) testing.
the bas are essential for effective collaboration because they con-
tain relevant information that supplies different groups with different
needs. they materialise mainly as electronic or printed documents and,
for the most part, are produced and used by humans. being central re-
Source: An investigation of causes and effects of trust in Boundary Artefacts.pdf

Context: be done." by focusing on the problem first and identifying solutions second, organizations can ensure that they meet the requirements 
of stakeholders, consider all project limitations and scope, and choose the best possible solution. this approach helps to streamline the 
process and achieve the desired outcomes more efficiently.
types and forms of requirements
Source: software4kmu learning nuggets.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: with the project lead, we eliminated artifacts that were ir-
relevant to the guidelines and broke the remaining artifacts
down into entities. furthermore, when the project artifacts
did not follow the guideline rules, we extended the model
by the entities that were mentioned in the guidelines. then,
the project lead explained the current process of the project,
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Query: How to structure big projects?
Context: To structure big projects effectively, the following insights can be drawn from the summarized data:

1. **Project Management Approach**:
   - A significant number of projects lean towards agile methodologies, with a notable presence of hybrid approaches. This suggests flexibility in adapting to project needs.

2. **Responsibility for Requirements Elicitation**:
   - The role of a Business Analyst is most commonly associated with requirements elicitation, followed by Project Leads and Requirements Engineers. This indicates the importance of having dedicated roles for managing requirements.

3. **Requirements Refinement**:
   - A majority of projects engage in refining requirements through several iterations, highlighting the iterative nature of effective project management.

4. **Documentation Practices**:
   - Most projects document high-level requirements initially and refine them into detailed requirements as needed. This approach allows for adaptability while ensuring that essential requirements are captured early.

5. **Satisfaction with Requirements Engineering**:
   - A high level of satisfaction is reported regarding requirements engineering, suggesting that effective practices are in place to meet project needs.

6. **Common Problems**:
   - Communication flaws between the project and the customer are the most frequently cited problem, followed by incomplete or hidden requirements. Addressing these issues is crucial for project success.

7. **Causes of Problems**:
   - A lack of knowledge about the business customer and assumptions about unspecified requirements are common causes of problems. This emphasizes the need for clear communication and understanding of customer needs.

8. **Consequences of Satisfying Requirements**:
   - Positive outcomes include reliable and robust products, indicating that effective requirements management leads to successful project delivery.

9. **Top Challenges**:
   - Time constraints and changing project goals are significant challenges, suggesting that project timelines and scope management are critical areas to focus on.

10. **Improvement Areas**:
    - Regular communication and documentation updates are essential to mitigate risks associated with misunderstandings and evolving requirements.

In summary, structuring big projects requires a balanced approach that incorporates agile methodologies, clear roles for requirements management, iterative refinement of requirements, effective communication, and proactive problem-solving strategies.
Source: napire data

Query: how to structure big projects?
Context: to 20 person years as small-scale projects, from 20 to 120 person years as medium-scale projects, and above
120 person years as large-scale projects. the analysed projects are labelled with numbers and it is also
mentioned whether they are ﬁnished or still ongoing (in terms of further releases or increments). all of the
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: activities such as project organisation and management (e.g. effort
estimation), design, and (acceptance) testing.
the bas are essential for effective collaboration because they con-
tain relevant information that supplies different groups with different
needs. they materialise mainly as electronic or printed documents and,
for the most part, are produced and used by humans. being central re-
Source: An investigation of causes and effects of trust in Boundary Artefacts.pdf

Context: be done." by focusing on the problem first and identifying solutions second, organizations can ensure that they meet the requirements 
of stakeholders, consider all project limitations and scope, and choose the best possible solution. this approach helps to streamline the 
process and achieve the desired outcomes more efficiently.
types and forms of requirements
Source: software4kmu learning nuggets.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: with the project lead, we eliminated artifacts that were ir-
relevant to the guidelines and broke the remaining artifacts
down into entities. furthermore, when the project artifacts
did not follow the guideline rules, we extended the model
by the entities that were mentioned in the guidelines. then,
the project lead explained the current process of the project,
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Query: how to structure big projects?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: How can we summarize the requirement? Requirement: "The system should allow admins to generate weekly performance reports for all team members."
Context: ulatory requirements’ content item in requirements layer should
provide an overview of new requirements or needed requirements
changes combined with the reasoning for such changes. the new
content items are integrated with existing amdire content items
through dependencies and relations that encompass the main arte-
facts and information that regulatory requirements depend on or
are related to.
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: the structuring of requirement candidates helps handling overlaping requirements and duplicates between requirements effectively, and, on the other hand, it helps building a hierarchy of goals to 
visualize their interdependencies facilitating conflict resolution, constraint detection and resource sharing. a more detailed explanation of goals is given in later learning nuggets.
Source: software4kmu learning nuggets.pdf

Context: system lifecycle. the main tasks of requirements management are:
attribution (adding meta information to requirements for an effective control​
)
assessment and prioritisation​
tracing (describe and follow the lifecycle of a requirement) ​
versioning (describe and follow changes within the requirements​
)
reporting (collecting, analysing, and visualising information about re​
)
Source: software4kmu learning nuggets.pdf

Context: for the other cases, this involved extracting the
requirements from other systems, either a propri-
etary requirements management tool (resulting
in a list of html ﬁles), or the online task manage-
ment system jira, which led to a set of comma-
separated values ﬁles. for the student projects,
the students handed in their ﬁnal artifacts either
as a single pdf or as a pdf with the general
Source: Rapid quality assurance with Requirements Smells.pdf

Context: requirement?”, “what is the purpose?” “what happens if that requirement is not implemented?”).
goals of requirements verification and validation
the main goal is to ensuring all stakeholders agree on requirements, building the basis for liability (e.g. lastenheft). this ensures, 
that the customer gets what they expect
Source: software4kmu learning nuggets.pdf

Query: How can we summarize the requirement? Requirement: "The system should allow admins to generate weekly performance reports for all team members."
Context: To summarize the requirement "The system should allow admins to generate weekly performance reports for all team members," we can analyze the following relevant aspects from the DataFrame:

1. **Performance Efficiency**: The average importance rating for performance efficiency is approximately 0.58, indicating a moderate emphasis on performance-related aspects in the requirements.

2. **Usability**: The usability aspect is also crucial, with a similar average rating of around 0.58, suggesting that user experience is a significant consideration.

3. **Documentation Granularity**: The data indicates that detailed documentation is essential, which can help in generating comprehensive reports.

4. **Goals**: The goals associated with the requirements are likely aligned with performance tracking and reporting.

5. **Quality Properties**: Quality attributes are important, ensuring that the reports generated meet certain standards.

6. **Stakeholders**: The involvement of stakeholders in the requirements process is crucial for ensuring that the reports meet their needs.

7. **System Behavior**: The expected behavior of the system in generating reports is a key consideration.

8. **User Interfaces**: The design of user interfaces will impact how admins interact with the reporting feature.

9. **Requirements Elicitation with Interviews**: This method is frequently used, indicating that gathering detailed requirements through direct communication is valued.

10. **Requirements Elicitation with Workshops and Focus Groups**: This approach is also commonly employed, emphasizing collaborative input in defining requirements.

Overall, the summarized information suggests a strong focus on performance efficiency, usability, and thorough documentation, all of which are essential for the effective generation of performance reports.
Source: napire data

Query: how can we summarize the requirement? requirement: "the system should allow admins to generate weekly performance reports for all team members."
Context: quiz
what type of requirement is this? 
1. "the system should be able to process 1000 transactions per second".
2. "all user input should be validated to prevent incorrect data entry".
3. "the system should allow users to search for products by category and filter the results by price, brand and customer reviews."
Source: software4kmu learning nuggets.pdf

Context: the structuring of requirement candidates helps handling overlaping requirements and duplicates between requirements effectively, and, on the other hand, it helps building a hierarchy of goals to 
visualize their interdependencies facilitating conflict resolution, constraint detection and resource sharing. a more detailed explanation of goals is given in later learning nuggets.
Source: software4kmu learning nuggets.pdf

Context: ulatory requirements’ content item in requirements layer should
provide an overview of new requirements or needed requirements
changes combined with the reasoning for such changes. the new
content items are integrated with existing amdire content items
through dependencies and relations that encompass the main arte-
facts and information that regulatory requirements depend on or
are related to.
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: for the other cases, this involved extracting the
requirements from other systems, either a propri-
etary requirements management tool (resulting
in a list of html ﬁles), or the online task manage-
ment system jira, which led to a set of comma-
separated values ﬁles. for the student projects,
the students handed in their ﬁnal artifacts either
as a single pdf or as a pdf with the general
Source: Rapid quality assurance with Requirements Smells.pdf

Context: +
+
+
+
+
+
+
+
+
+
+
+
large team-size
+
+
+
high team distribution
+
+
+
+
weakly experiences team
+
-
legend:
+
= need for action
-
= ability to act
similarly, the technical knowledge of the stakeholders negatively impacts the quality requirements. when
specifying quality requirements, reference models and reference values are often missing. quality require-
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Query: how can we summarize the requirement? requirement: "the system should allow admins to generate weekly performance reports for all team members."
Context: To summarize the requirement "the system should allow admins to generate weekly performance reports for all team members," we can analyze the following relevant aspects from the DataFrame:

1. **Performance Efficiency**: The average importance rating for performance efficiency is approximately 0.58, indicating a moderate emphasis on this aspect in the requirements.

2. **Usability**: The usability aspect is also crucial, with a similar average rating of around 0.58, suggesting that user experience is a significant consideration.

3. **Documentation Granularity**: The data indicates that detailed documentation is essential, which can help in generating comprehensive reports.

4. **Goals**: The goals associated with the requirements are likely aligned with performance tracking and reporting.

5. **Quality Properties**: Quality properties are essential for ensuring that the reports generated meet the necessary standards.

6. **Stakeholders**: The involvement of stakeholders in the requirements process is crucial for ensuring that the reports meet their needs.

7. **System Behavior**: The system's behavior should support the generation of reports effectively.

8. **User Interfaces**: The user interface must be designed to facilitate easy access to report generation features.

9. **Requirements Elicitation with Interviews**: This method is used to gather detailed requirements, which can help clarify the specifics of the reporting functionality.

10. **Requirements Elicitation with Workshops and Focus Groups**: Engaging stakeholders through workshops can further refine the requirements for report generation.

Overall, the analysis indicates a balanced focus on performance efficiency, usability, and stakeholder involvement, which are critical for successfully implementing the reporting feature.
Source: napire data

Query: What are the common requirements for an authentications system?
Context: have to use a passkey to log in?
clarity: is the requirements clear and unambiguous to the customer? can there be missunderstandings towards which 
functionality requires a login?
example
requirement: the application must respond to user requests within 2 seconds.
verification activities:
define acceptance criteria: application responds within 2 seconds
Source: software4kmu learning nuggets.pdf

Context: identification & 
authentication (ia) 
ia1. users are associated with a well-defined 
set of roles and privileges. 
ia2. the digital identity of the sender of a 
communication must be verified. 
ia3. only those authorized are able to 
authenticate and credentials are transported and 
stored in a secure manner. 
ia4. 
passwords 
treatment 
must 
include
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: user story 
security specification 
1. as a customer, i 
want to be able to 
export my personal 
information so that i 
can use it in other 
systems. 
1. the system shall ensure that there is no residual 
data exposed. 
2. the system shall store credentials securely using 
the aes encryption algorithm. 
3. the system shall use the rsa encryption 
algorithm to protect all data all the time.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: timed out during periods of inactivity. 
c4. tls protocol shall be used where sensitive 
data is transmitted. 
c5. system shall use strong encryption 
algorithm at all times. 
integrity (i) 
i1. any unauthorized modification of data must 
yield an auditable security-related event. 
i2. all input is validated to be correct and fit 
for the intended purpose.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: algorithm to protect all data all the time. 
4. the system shall inactivate a session when it 
exceeds certain periods of inactivity. 
5. the system shall encrypt the roles and privileges 
of the system. 
with the user story in sight, the framework extracts the 
relevant words and matches the related security properties. in 
this case, the extracted words are “export” and “system”.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Query: What are the common requirements for an authentications system?
Context: The common requirements for an authentication system, based on the summarized data, include:

1. **Security**: 
   - Accountability
   - Authenticity
   - Confidentiality
   - Integrity
   - Non-repudiation

2. **Usability**: 
   - Accessibility
   - Appropriateness
   - Recognizability
   - Learnability
   - Operability
   - User error protection
   - User interface aesthetics

3. **Requirements Elicitation Methods**: 
   - Interviews
   - Prototyping
   - Workshops and focus groups
   - External experts
   - Observations

4. **Documentation Granularity**: The level of detail in documentation is crucial for ensuring that security and usability requirements are clearly defined and understood.

5. **Non-functional Requirements**: 
   - Security measures to mitigate risks.
   - Usability considerations to enhance user experience.

These elements highlight the importance of both security and usability in the design and implementation of an effective authentication system.
Source: napire data

Query: what are the common requirements for an authentications system?
Context: have to use a passkey to log in?
clarity: is the requirements clear and unambiguous to the customer? can there be missunderstandings towards which 
functionality requires a login?
example
requirement: the application must respond to user requests within 2 seconds.
verification activities:
define acceptance criteria: application responds within 2 seconds
Source: software4kmu learning nuggets.pdf

Context: user story 
security specification 
1. as a customer, i 
want to be able to 
export my personal 
information so that i 
can use it in other 
systems. 
1. the system shall ensure that there is no residual 
data exposed. 
2. the system shall store credentials securely using 
the aes encryption algorithm. 
3. the system shall use the rsa encryption 
algorithm to protect all data all the time.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: according to the authors, those types of information and the 
related questions were adapted for requirements from araujo 
and curphey’s article on security code reviews [1]. however, 
due to the large number of software vulnerabilities and the 
variety of ways to deploy computer attacks, it is not enough to 
consider only three types of security controls. indeed, the list
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: inspectors can easily identify certain security aspects. for 
instance, we use the and logical connector in capital letters 
to get the attention of the reader and indicate that both aspects 
must be considered to satisfy the high-level security 
unauthorized observation or disclosure both in transit and 
when stored”. in this case, if the specifications were well
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: algorithm to protect all data all the time. 
4. the system shall inactivate a session when it 
exceeds certain periods of inactivity. 
5. the system shall encrypt the roles and privileges 
of the system. 
with the user story in sight, the framework extracts the 
relevant words and matches the related security properties. in 
this case, the extracted words are “export” and “system”.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Query: what are the common requirements for an authentications system?
Context: The common requirements for an authentication system, based on the summarized values from the DataFrame, include:

1. **Security**: Emphasizing accountability, authenticity, confidentiality, integrity, and non-repudiation, with an average importance score of approximately 0.50.
2. **Usability**: Focusing on accessibility, appropriateness, recognizability, learnability, operability, user error protection, and user interface aesthetics, with an average importance score of about 0.63.
3. **Reliability**: Highlighting availability, fault tolerance, maturity, and recoverability, with an average importance score of around 0.59.
4. **Performance Efficiency**: Addressing time behavior, resource utilization, and capacity, with an average importance score of approximately 0.58.
5. **Maintainability**: Covering aspects like analysability, modularity, modifiability, reusability, and testability, with an average importance score of about 0.56.

These factors collectively contribute to the effectiveness and robustness of an authentication system.
Source: napire data

Query: How to deal with incomplete requirements?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: the structuring of requirement candidates helps handling overlaping requirements and duplicates between requirements effectively, and, on the other hand, it helps building a hierarchy of goals to 
visualize their interdependencies facilitating conflict resolution, constraint detection and resource sharing. a more detailed explanation of goals is given in later learning nuggets.
Source: software4kmu learning nuggets.pdf

Context: preventing incomplete/hidden requirements: 
reflections on survey data from austria and brazil 
marcos kalinowski1, michael felderer2, tayana conte3, rodrigo spínola4,         
rafael prikladnicki5, dietmar winkler6 , daniel méndez fernández7, stefan wagner8 
1 universidade federal fluminense, computing institute, av. milton tavares de souza s/n, 
campus praia vermelha, 24210-346 niterói, brazil.
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: quirements have a number of diﬀerences in some requirements’
aspects (e.g., semantics or scope of requirements) [21] that lead to
discontinuity if not considered systematically. in this section, we
describe the research gaps that, based on our analysis, led to the
absence of systematicity in regulatory re methods.
lack of integrated approaches
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: problem 
prio 1 
prio 2 
prio 3 
prio 4 
prio 5 
total 
total 
prio 5 
prio 4 
prio 3 
prio 2 
prio 1 
problem 
incomplete and / 
or hidden 
requirements 
incomplete and / 
or hidden 
requirements 
underspecified 
requirements 
moving targets 
communication 
flaws between the 
team and the 
customer 
communication 
flaws within the 
team 
communication 
flaws within the 
communication
Source: Naming the Pain in Requirements Engineering Comparing Practices in Brazil and Germany.pdf

Query: How to deal with incomplete requirements?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how to deal with incomplete requirements?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: preventing incomplete/hidden requirements: 
reflections on survey data from austria and brazil 
marcos kalinowski1, michael felderer2, tayana conte3, rodrigo spínola4,         
rafael prikladnicki5, dietmar winkler6 , daniel méndez fernández7, stefan wagner8 
1 universidade federal fluminense, computing institute, av. milton tavares de souza s/n, 
campus praia vermelha, 24210-346 niterói, brazil.
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: also be supported by including and training re standards that put emphasis
on the way requirements should be elicited and speciﬁed.
2. adjusting its portfolio management to avoid accepting projects under extreme
time pressure or involving stakeholders that lack business vision.
3. assessing and improving the eﬃciency of their elicitation techniques.
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Context: change management
one important synergy to consider between requirements management and other activities in the software development lifecycle is an overarching change 
management. here, it is important to note that the goals of change management dictate, to some extent, also how we engage in requiremetns management as it 
should effectively allow for:
Source: software4kmu learning nuggets.pdf

Context: incomplete artefacts is given, to some extent, by the results of the analysis of the pattern eﬃciency (see
step 4). in the analysis of the eﬀort spent in the creation of the artefacts, we evaluate the patterns, e.g.,
with respect to change requests that may result from insuﬃcient re potentially indicating that not all
requirements were documented (see also section 3.4.4).
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Query: how to deal with incomplete requirements?
Context: To deal with incomplete requirements, the following strategies can be considered based on the summarized data:

1. **Identify Problems**:
   - Common issues include delayed projects, unclear requirements, and difficulties in articulating needs.
   - Problems often arise from a lack of communication and understanding among stakeholders.

2. **Analyze Causes**:
   - Causes of incomplete requirements may include weaknesses in defining requirements, power dynamics affecting communication, and insufficient knowledge from product owners.

3. **Implement Solutions**:
   - Establish clear communication channels among all stakeholders to ensure that requirements are well understood and articulated.
   - Conduct regular reviews and updates of requirements to adapt to changes and clarify any ambiguities.
   - Involve experienced team members in the requirements gathering process to enhance the quality of the requirements.

4. **Documentation**:
   - Maintain thorough documentation of requirements and changes to ensure traceability and clarity throughout the project lifecycle.

5. **Iterative Refinement**:
   - Use iterative processes to refine requirements continuously, allowing for adjustments based on feedback and evolving project needs.

By addressing these areas, teams can better manage incomplete requirements and improve overall project outcomes.
Source: napire data

Query: Who are the people/stakeholders to involve in elicitation?
Context: potential processes and use cases) for which corresponding
stakeholders are available. this way, the approach can be
conducted entirely including the creation of the business and
the requirements speciﬁcation. we deﬁne three main groups
of participants as study subjects:
1) industry participants: experts from industry responsible
proceedings of ease 2011
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Context: stakeholders that are to be involved in the process of gathering 
needs and constraints. we define the scope of the the problem 
and the solution, and consequently define the goals of the 
solution. if necessary, we analyze the business processes and 
based on all those steps, we finally elicit the requirements.
further information on requirements elicitation
requirements analysis
Source: software4kmu learning nuggets.pdf

Context: ticipants are present while the researchers take the role of
requirements analysts.
initial project set-up: at the kick-off workshop, the
researchers present the bisa reference model and the cus-
tomisation approach. we customise the bisa reference model
to initially set up the project. we select the artefacts to be
created, decide on a preferable document structure, assign the
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: elicitation process so that stakeholders are often simply not 
aware of them. for instance, when stakeholders make decisions 
along the process meetings, they are often not aware that these 
decisions might also raise data protection-related issues [24]. 
this often leads to not specifying relevant security-related 
aspects.  
however, the picture is even more challenging in agile
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Query: Who are the people/stakeholders to involve in elicitation?
Context: The stakeholders to involve in elicitation, based on the summarized information, include:

1. Business Analyst
2. Other
3. Customer
4. Product Manager
5. Product Owner
6. Requirements Engineer
7. Project Lead / Project Manager
8. Scrum Master
9. Architect
10. Developer
11. Marketing

These roles are identified as responsible for requirements elicitation or are relevant stakeholders in the process.
Source: napire data

Query: who are the people/stakeholders to involve in elicitation?
Context: potential processes and use cases) for which corresponding
stakeholders are available. this way, the approach can be
conducted entirely including the creation of the business and
the requirements speciﬁcation. we deﬁne three main groups
of participants as study subjects:
1) industry participants: experts from industry responsible
proceedings of ease 2011
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Context: stakeholders that are to be involved in the process of gathering 
needs and constraints. we define the scope of the the problem 
and the solution, and consequently define the goals of the 
solution. if necessary, we analyze the business processes and 
based on all those steps, we finally elicit the requirements.
further information on requirements elicitation
requirements analysis
Source: software4kmu learning nuggets.pdf

Context: ticipants are present while the researchers take the role of
requirements analysts.
initial project set-up: at the kick-off workshop, the
researchers present the bisa reference model and the cus-
tomisation approach. we customise the bisa reference model
to initially set up the project. we select the artefacts to be
created, decide on a preferable document structure, assign the
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: elicitation process so that stakeholders are often simply not 
aware of them. for instance, when stakeholders make decisions 
along the process meetings, they are often not aware that these 
decisions might also raise data protection-related issues [24]. 
this often leads to not specifying relevant security-related 
aspects.  
however, the picture is even more challenging in agile
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Query: who are the people/stakeholders to involve in elicitation?
Context: The stakeholders to involve in requirements elicitation, based on the summarized information from the DataFrame, include:

1. Business Analyst
2. Other
3. Customer
4. Product Manager
5. Product Owner
6. Requirements Engineer
7. Project Lead / Project Manager
8. Scrum Master
9. Architect
10. Developer
11. Marketing

These roles represent various stakeholders who may be responsible for or involved in the requirements elicitation process.
Source: napire data

Query: Please reformulate this requirement to make it more clear: Requirement: "The system should be fast."
Context: quiz
what type of requirement is this? 
1. "the system should be able to process 1000 transactions per second".
2. "all user input should be validated to prevent incorrect data entry".
3. "the system should allow users to search for products by category and filter the results by price, brand and customer reviews."
Source: software4kmu learning nuggets.pdf

Context: system privacy 
system portability 
others 
percentage of answers 
figure 8: critical non-functional requirements of ml- 
enabled systems (n = 71) 
requirements with data (p = 53.556 [53.197, 53.915]), resolving 
conflicts (p = 42.346 [41.987, 42.706]), managing changing re- 
quirements (p = 40.915 [40.574, 41.257]), selecting metrics (p = 
[26.418, 27.021]). 
customer  expectactions
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: about the expectations practitioners have on particular aspects of their own standards. for instance, based
on our investigation published in [30, 6], we expect practitioners to demand standards that focus on the
re artefacts, clear roles and responsibilities, and tailoring mechanisms rather than on strict processes and
methods to allow for more ﬂexibility and a better communication.
Source: Naming the Pain in Requirements Engineering A Design for a Global Family of Surveys and First Results from Germany.pdf

Context: (6) system environment con-
ditions speciﬁed
part of the test cases is to describe the environment of the test as close as possible to the productive (end) system. thus, the engineer
must understand under what conditions the system will operate, e.g., regarding amounts of productive data, temperature, workload.
(7) inputs and outputs quali-
tatively speciﬁed
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Context: expressed in a causal sentence.
furthermore, the implementation of a system based on require-
ments engineering artifacts needs to be validated by determining
whether the defined requirements are fulfilled. tests of various gran-
ularity are usually a formalized version of specific requirements.
arxiv:2312.06986v1  [cs.se]  12 dec 2023
ase ’20, september 21–25, 2020, virtual event, australia
Source: Automatic extraction of cause-effect-relations from requirements artifacts.pdf

Query: Please reformulate this requirement to make it more clear: Requirement: "The system should be fast."
Context: To reformulate the requirement "The system should be fast," we can clarify it by specifying measurable performance criteria. A clearer version could be:

"The system should respond to user requests within 2 seconds under normal operating conditions and handle at least 100 concurrent users without performance degradation."

This reformulation provides specific expectations regarding response time and user load, making the requirement more actionable and testable.
Source: napire data

Query: please reformulate this requirement to make it more clear: requirement: "the system should be fast."
Context: system privacy 
system portability 
others 
percentage of answers 
figure 8: critical non-functional requirements of ml- 
enabled systems (n = 71) 
requirements with data (p = 53.556 [53.197, 53.915]), resolving 
conflicts (p = 42.346 [41.987, 42.706]), managing changing re- 
quirements (p = 40.915 [40.574, 41.257]), selecting metrics (p = 
[26.418, 27.021]). 
customer  expectactions
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: about the expectations practitioners have on particular aspects of their own standards. for instance, based
on our investigation published in [30, 6], we expect practitioners to demand standards that focus on the
re artefacts, clear roles and responsibilities, and tailoring mechanisms rather than on strict processes and
methods to allow for more ﬂexibility and a better communication.
Source: Naming the Pain in Requirements Engineering A Design for a Global Family of Surveys and First Results from Germany.pdf

Context: (6) system environment con-
ditions speciﬁed
part of the test cases is to describe the environment of the test as close as possible to the productive (end) system. thus, the engineer
must understand under what conditions the system will operate, e.g., regarding amounts of productive data, temperature, workload.
(7) inputs and outputs quali-
tatively speciﬁed
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Context: expressed in a causal sentence.
furthermore, the implementation of a system based on require-
ments engineering artifacts needs to be validated by determining
whether the defined requirements are fulfilled. tests of various gran-
ularity are usually a formalized version of specific requirements.
arxiv:2312.06986v1  [cs.se]  12 dec 2023
ase ’20, september 21–25, 2020, virtual event, australia
Source: Automatic extraction of cause-effect-relations from requirements artifacts.pdf

Context: be distracted by superﬁcial quality defects such as the
aforementioned vague formulations or loopholes. we
therefore argue that reviews are time-consuming and
costly.
therefore, quality assurance processes would beneﬁt
from faster feedback cycles in requirements engineer-
ing (re), which support requirements engineers and
project participants in immediately discovering cer-
Source: Rapid quality assurance with Requirements Smells.pdf

Query: please reformulate this requirement to make it more clear: requirement: "the system should be fast."
Context: To reformulate the requirement "the system should be fast," it can be made clearer by specifying measurable criteria. A clearer version could be:

"The system should respond to user inputs within 2 seconds under normal operating conditions, ensuring efficient resource utilization and optimal performance."

This reformulation provides specific expectations regarding response time, which can be objectively assessed.
Source: napire data

Query: What tools are available for requirements management?
Context: for the other cases, this involved extracting the
requirements from other systems, either a propri-
etary requirements management tool (resulting
in a list of html ﬁles), or the online task manage-
ment system jira, which led to a set of comma-
separated values ﬁles. for the student projects,
the students handed in their ﬁnal artifacts either
as a single pdf or as a pdf with the general
Source: Rapid quality assurance with Requirements Smells.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: survey of techniques, approaches, and tools. in
a. aurum and c. wohlin, editors, engineering and
managing software requirements, number isbn-13:
978-3642064074, chapter 2, pages 19–46.
springer-verlag berlin, 2005.
Source: Naming the Pain in Requirements Engineering  Design of a Global Family of Surveys and First Results from Germany.pdf

Context: requirements elicitation: to gather requirements
requirements analysis: to generate a common understanding 
among stakeholders
requirements specification: to structure and document 
requirements in an aggreed on format
requirements verification and validation: to ensure the 
solution matches the problem
requirements management: to track and trace changes to 
requirements
Source: software4kmu learning nuggets.pdf

Context: amdire (see the example below)
more pragmatic tools that may as well serve the purpose of 
documenting requirements individually in natural language (and 
enriching them with additional information such s models), for 
example with ticket systems (e.g. jira)
in the end, the tools do not matter as much as the questions of 
1. what we can use considering the project circumstances (what is
Source: software4kmu learning nuggets.pdf

Query: What tools are available for requirements management?
Context: The available tools for requirements management, based on the summarized data, include:

1. **Documentation Granularity**: Various levels of documentation are mentioned, such as detailed requirements and high-level requirements.
2. **Elicitation Techniques**:
   - Requirements elicitation through **Interviews**.
   - Analysis of existing documents.
   - **Risk analyses**.
   - **Prototyping**.
   - **Workshops and focus groups**.
   - **Reuse databases and guidelines**.
   - **Design Thinking / Lean Startup** approaches.

These tools and techniques are utilized to manage and refine requirements effectively throughout the project lifecycle.
Source: napire data

Query: what tools are available for requirements management?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: a further proposition: “organisations use continuous change management.” this new proposition
could be explained by the continuous nature of change in agile development processes. both other
answer options lie below the threshold although both ci include it.
second, we asked how the respondents deal with changing requirements after the initial release.
status quo in requirements engineering
:25
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: controlling the re process​
in essence, a proper requirements management provides answers to the following questions:​
which requirements come from which source? (attribution, tracing)​
which requirements are how important? (attribution, assessment)​
who changed a requirement when? (attribution, versioning)​
how efficient is the re process? (controlling)
change management
Source: software4kmu learning nuggets.pdf

Context: models but rather work with more abstract feature lists.
tool support
tool support for requirements engineering can be a never-ending 
topic. in essence, it is possible to work with various tools available 
on the market; for example:
modelling-centric tools, such as magicdraw where we can 
define an uml profile based not eh content model provided by 
amdire (see the example below)
Source: software4kmu learning nuggets.pdf

Context: for the other cases, this involved extracting the
requirements from other systems, either a propri-
etary requirements management tool (resulting
in a list of html ﬁles), or the online task manage-
ment system jira, which led to a set of comma-
separated values ﬁles. for the student projects,
the students handed in their ﬁnal artifacts either
as a single pdf or as a pdf with the general
Source: Rapid quality assurance with Requirements Smells.pdf

Query: what tools are available for requirements management?
Context: The DataFrame provides insights into various tools and methods used for requirements management. Here are the summarized findings based on the relevant columns:

1. **Documentation Granularity**: 
   - Options include "We do not document requirements," "We document detailed requirements," and "We document high-level requirements."

2. **Elicitation Methods**:
   - **Interviews**: A common method for gathering requirements.
   - **Analysis of Existing Documents**: Used to derive requirements from pre-existing materials.
   - **Risk Analyses**: Employed to identify potential risks and their implications on requirements.
   - **Prototyping**: Utilized to visualize requirements and gather feedback.
   - **Workshops and Focus Groups**: Engaged to collaboratively elicit requirements from stakeholders.
   - **Reuse Databases and Guidelines**: Leveraged to utilize existing knowledge and frameworks.
   - **Design Thinking / Lean Startup**: Applied as a modern approach to requirements elicitation.

These tools and methods highlight the diverse strategies employed in requirements management, emphasizing the importance of documentation and stakeholder engagement.
Source: napire data

Query: How to deal with changing requirements?
Context: it is important to recognise that requirements are dynamic and may change due to evolving stakeholder needs, changes in market 
conditions and advances in technology. it is important to adapt these requirements in the later stages of a project, either by 
reformulating, deleting or introducing new requirements. adopting this approach is essential to maintaining project responsiveness and
Source: software4kmu learning nuggets.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: closed(mc)
q 12
how do you deal with changing requirements after the initial release?
closed(sc)
q 13
which traces do you explicitly manage?
closed(mc)
q 14
how do you analyse the effect of changes to requirements?
closed(mc)
q 15
how do you align the software test with the requirements?
closed(mc)
rq 3
q 16
what re standard have you established at your company?
closed(mc)
q 17
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: a further proposition: “organisations use continuous change management.” this new proposition
could be explained by the continuous nature of change in agile development processes. both other
answer options lie below the threshold although both ci include it.
second, we asked how the respondents deal with changing requirements after the initial release.
status quo in requirements engineering
:25
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: also be supported by including and training re standards that put emphasis
on the way requirements should be elicited and speciﬁed.
2. adjusting its portfolio management to avoid accepting projects under extreme
time pressure or involving stakeholders that lack business vision.
3. assessing and improving the eﬃciency of their elicitation techniques.
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Query: How to deal with changing requirements?
Context: To deal with changing requirements, the following strategies can be considered based on the summarized information:

1. **Documentation**: Utilize textual documentation to ensure that compatibility, maintainability, performance efficiency, portability, reliability, safety, security, and usability aspects are clearly defined and updated as requirements change.

2. **Reflecting Changes**: Establish a process for reflecting requirements changes in the project. This could involve regular updates to documentation and communication with stakeholders.

3. **Addressing Dissatisfaction**: Identify and address reasons for dissatisfaction in requirements engineering, such as lack of structure or acknowledgment of changes. This can help in improving the overall requirements management process.

By implementing these strategies, teams can better manage the impact of changing requirements on their projects.
Source: napire data

Query: how to deal with changing requirements?
Context: it is important to recognise that requirements are dynamic and may change due to evolving stakeholder needs, changes in market 
conditions and advances in technology. it is important to adapt these requirements in the later stages of a project, either by 
reformulating, deleting or introducing new requirements. adopting this approach is essential to maintaining project responsiveness and
Source: software4kmu learning nuggets.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: ing customer expectations [18], aligning requirements with data 
[35, 42], changing requirements [25], and selecting proper metrics 
[44] were previously reported as difficulties, which emphasizes the 
importance of effective communication and technical expertise to 
bridge the gap between aspirations and technological feasibility.
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: closed(sc) 
q 12 
how do you deal with changing requirements after the initial 
release? 
closed(sc) 
q 13 
which traces do you explicitly manage? 
closed(mc) 
q 14 
how do you analyse the effect of changes to requirements? 
closed(mc) 
q 15 
how do you align the software test with the requirements? 
closed(mc) 
… 
… 
… 
q 23 
is your re continuously improved? 
closed(sc) 
q 24
Source: Requirements Engineering Practice and Problems in Agile Projects Results from an International Survey.pdf

Context: also be supported by including and training re standards that put emphasis
on the way requirements should be elicited and speciﬁed.
2. adjusting its portfolio management to avoid accepting projects under extreme
time pressure or involving stakeholders that lack business vision.
3. assessing and improving the eﬃciency of their elicitation techniques.
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Query: how to deal with changing requirements?
Context: To effectively deal with changing requirements, the following strategies and insights can be derived from the summarized data:

1. **Reflection on Requirement Changes**:
   - A significant number of projects (111 instances) indicate that they work with change requests and continuously update their requirements specification even after formal acceptance.
   - Updating the product backlog is also a common practice (78 instances).
   - Some projects do not update their requirements documentation at all (17 instances), which can lead to issues.

2. **Top Problems Encountered**:
   - The most frequently reported problems related to changing requirements include:
     - **Communication flaws between the project and the customer** (44 instances).
     - **Incomplete or hidden requirements** (42 instances).
     - **Time boxing or insufficient time** (34 instances).
     - **Communication flaws within the project team** (27 instances).
     - **Moving targets, such as changing goals or business processes** (21 instances).

3. **Causes of Problems**:
   - The leading causes of these problems include:
     - **Lack of communication** (3 instances).
     - **Poor documentation** and **lack of planning**.
     - **Customers not knowing what they want** (4 instances).
     - **Different autonomous teams not sharing learnings**.
     - **Ambiguous requirements** (2 instances).

4. **Recommendations**:
   - Establish clear communication channels between all stakeholders to ensure that everyone is aligned on requirements.
   - Regularly update and refine requirements documentation to reflect changes and ensure clarity.
   - Implement agile methodologies that allow for flexibility and iterative updates to requirements.
   - Conduct training sessions to improve understanding of requirements and the importance of documentation among team members.

By focusing on these strategies, teams can better manage changing requirements and mitigate associated challenges.
Source: napire data

Query: What techniques can be used for requirements validation?
Context: survey of techniques, approaches, and tools. in
a. aurum and c. wohlin, editors, engineering and
managing software requirements, number isbn-13:
978-3642064074, chapter 2, pages 19–46.
springer-verlag berlin, 2005.
Source: Naming the Pain in Requirements Engineering  Design of a Global Family of Surveys and First Results from Germany.pdf

Context: 2. prototyping to support customers in getting a clear vision for the system
3. formal verification for systems with respective requirements such as avionic systems
4. reviews of requirements and the supporting information (e.g. goals, stakeholders, implementation) to validate and verify them
example
requirement: the user must be able to log in using their username and password.
Source: software4kmu learning nuggets.pdf

Context: research there is a strong focus on model-based testing and formal approaches when it comes to the
alignment of requirements specification and testing as a recent systematic mapping study shows [3].
however, limitations in practice often include the high effort for creating and maintaining models
as foundation for deriving code and test cases. thus, there is a trade-off between required efforts
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Query: What techniques can be used for requirements validation?
Context: The techniques used for requirements validation, based on the summarized data, include:

1. **Automatic checking used to validate or verify requirements**: 410 responses indicating usage.
2. **Informal peer reviews used to validate or verify requirements**: 78 responses indicating usage.
3. **Inspections (formal technical reviews using reading techniques or checklists) used to validate or verify requirements**: 406 responses indicating usage.
4. **Simulations used to validate/verify requirements**: 0 responses indicating usage.
5. **Walkthroughs used to validate/verify requirements**: 0 responses indicating usage.
6. **We do not verify or validate our requirements**: 0 responses indicating this approach.
7. **Testers participate in requirements reviews to align testing with requirements**: 0 responses indicating this approach.
8. **We check the coverage of requirements with tests to align testing with requirements**: 0 responses indicating this approach.
9. **We define acceptance criteria and tests for requirements to align testing with requirements**: 0 responses indicating this approach.
10. **We derive tests from system models to align testing with requirements**: 0 responses indicating this approach.

The most commonly used techniques are automatic checking and inspections, while other methods show minimal or no usage.
Source: napire data

Query: what techniques can be used for requirements validation?
Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Context: appropriate inspection methods (e.g., checklists or reading techniques), ideally 
involving different stakeholders (e.g., users, designers, and testers) in the verification 
and validation process. these counter measures represent a set of initial strategies 
based on the experience of the study team, i.e., the authors.
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: research there is a strong focus on model-based testing and formal approaches when it comes to the
alignment of requirements specification and testing as a recent systematic mapping study shows [3].
however, limitations in practice often include the high effort for creating and maintaining models
as foundation for deriving code and test cases. thus, there is a trade-off between required efforts
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: improve the analysis to be more detailed.  
more frequent meetings with the customer to align expectations. 
requirements reviews and frequent releases. 
improving the quality of the requirements documentation, or improving elicitation methods. 
developing requirements according to suggestions of the mps-sw reference model. 
improvement of the artefacts; adoption of software inspections.
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: 7. verifiability: it should be possible to verify that the system includes the specified menu bar with icons and labels, and that 
contextual tooltips are provided with simple tests during the development phase.
8. correctness: the stakeholder has formally agreed to the refined requirements and we may therefore assume that it accurately
Source: software4kmu learning nuggets.pdf

Query: what techniques can be used for requirements validation?
Context: The techniques used for requirements validation, based on the summarized data, include:

1. **Automatic checking used to validate or verify requirements**: 410 occurrences
2. **Informal peer reviews used to validate or verify requirements**: 78 occurrences
3. **Inspections (formal technical reviews using reading techniques or checklists) used to validate or verify requirements**: 0 occurrences
4. **Simulations used to validate/verify requirements**: 0 occurrences
5. **Walkthroughs used to validate/verify requirements**: 0 occurrences
6. **We do not verify or validate our requirements**: 0 occurrences
7. **Testers participate in requirements reviews to align testing with requirements**: 0 occurrences
8. **We check the coverage of requirements with tests to align testing with requirements**: 0 occurrences
9. **We define acceptance criteria and tests for requirements to align testing with requirements**: 0 occurrences
10. **We derive tests from system models to align testing with requirements**: 406 occurrences

This summary indicates that automatic checking and deriving tests from system models are the most frequently mentioned techniques for requirements validation.
Source: napire data

Query: What are functional and non-functional requirements?
Context: incomplete and/or hidden re- 
quirements 
communication flaws between 
project team and customer 
moving targets (changing goals, 
business processes, and/or re- 
quirements) 
underspecified requirements 
that are too abstract 
timeboxing/not enough time 
in general 
stakeholders with difficulties in 
separating requirements from 
known solution designs 
insufficient support by cus- 
tomer
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: estimated duration
5 min
level
external ressources
dependencies
next item
goals (teaching 
perspective)
to familiarize learners with the various categories of requirements and their respective characteristics.
content description 
(teaching 
perspective)
overview of different types of requirements such as business, functional and non-functionalrequirements.
en
de
beginner  
intermediate
Source: software4kmu learning nuggets.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: implementation. note already here that the spectrum of what is covered by non-functional requirements is very broad covering both 
quality properties of the system under consideration and properties of the overall development process. while we may well differentiate 
better in later learning nuggets, here, for reasons of cimplicity, we focus on properties of the system itself.
Source: software4kmu learning nuggets.pdf

Context: types and forms of requirements
during product development, it is essential to document various types of requirements to guide the project efficiently. these include
goals and contstraints: these define the high-level goals and expected benefits from a business perspective, providing context for 
the project objectives.
Source: software4kmu learning nuggets.pdf

Query: What are functional and non-functional requirements?
Context: Functional requirements refer to the specific behaviors or functions that a system must perform. Based on the summarized data, the following functional requirements were identified:

1. **Goals**: 297 occurrences
2. **System Behavior**: 241 occurrences
3. **User Interfaces**: 275 occurrences
4. **Usage Scenarios**: 264 occurrences
5. **Activity Diagrams**: 340 occurrences
6. **Class Diagrams**: 383 occurrences
7. **Use Cases**: 275 occurrences
8. **User Stories**: 254 occurrences

Non-functional requirements pertain to the quality attributes of the system. The summarized data for non-functional requirements includes:

1. **Compatibility (Co-existence, Interoperability)**: 295 occurrences
2. **Maintainability (Analysability, Modularity, Modifiability, Reusability, Testability)**: 160 occurrences
3. **Performance Efficiency (Time Behavior, Resource Utilization, Capacity)**: 295 occurrences
4. **Portability (Adaptability, Installability, Replaceability)**: 234 occurrences
5. **Reliability (Availability, Fault Tolerance, Maturity, Recoverability)**: 295 occurrences
6. **Safety (Freedom of Risk for Health or Disaster)**: 234 occurrences
7. **Security (Accountability, Authenticity, Confidentiality, Integrity, Non-repudiation)**: 234 occurrences
8. **Usability (Accessibility, Appropriateness, Recognizability, Learnability, Operability, User Error Protection, User Interface Aesthetics)**: 234 occurrences

This summary provides a clear distinction between functional and non-functional requirements based on the data available in the DataFrame.
Source: napire data

Query: what are functional and non-functional requirements?
Context: incomplete and/or hidden re- 
quirements 
communication flaws between 
project team and customer 
moving targets (changing goals, 
business processes, and/or re- 
quirements) 
underspecified requirements 
that are too abstract 
timeboxing/not enough time 
in general 
stakeholders with difficulties in 
separating requirements from 
known solution designs 
insufficient support by cus- 
tomer
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: estimated duration
5 min
level
external ressources
dependencies
next item
goals (teaching 
perspective)
to familiarize learners with the various categories of requirements and their respective characteristics.
content description 
(teaching 
perspective)
overview of different types of requirements such as business, functional and non-functionalrequirements.
en
de
beginner  
intermediate
Source: software4kmu learning nuggets.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: types and forms of requirements
during product development, it is essential to document various types of requirements to guide the project efficiently. these include
goals and contstraints: these define the high-level goals and expected benefits from a business perspective, providing context for 
the project objectives.
Source: software4kmu learning nuggets.pdf

Context: tests for requirements. especially the role of automated tests would be interesting to 
follow-up in further studies. 
finally, we briefly touched also the topic of non-functional requirements (such as 
security or performance requirements). we found that most respondents document 
non-functional requirements with text. about half of those document non-functional
Source: Requirements Engineering Practice and Problems in Agile Projects Results from an International Survey.pdf

Query: what are functional and non-functional requirements?
Context: Functional requirements refer to the specific behaviors or functions that a system must exhibit. Based on the summarized data, the following insights can be drawn regarding functional requirements:

- **Goals**: 297 instances of specific goals identified.
- **System Behavior**: 241 instances of documented system behaviors.
- **User Interfaces**: 275 instances of user interface requirements.
- **Usage Scenarios**: 264 instances of usage scenarios defined.
- **Activity Diagrams**: 340 instances of activity diagrams created.
- **Business Process Models**: 333 instances of business process models documented.
- **Class Diagrams**: 383 instances of class diagrams included.
- **Use Cases**: 275 instances of use cases defined.
- **User Stories**: 254 instances of user stories documented.

Non-functional requirements pertain to the quality attributes of the system. The summarized data indicates the following for non-functional requirements:

- **Compatibility**: 295 instances of compatibility requirements documented.
- **Maintainability**: 160 instances of maintainability requirements included.
- **Performance Efficiency**: 234 instances of performance efficiency requirements noted.
- **Portability**: 221 instances of portability requirements identified.
- **Reliability**: 295 instances of reliability requirements documented.
- **Safety**: 160 instances of safety requirements included.
- **Security**: 234 instances of security requirements noted.
- **Usability**: 221 instances of usability requirements identified.

This summary provides a clear distinction between functional and non-functional requirements as represented in the DataFrame.
Source: napire data

Query: Is the following requirement good? "The system must load within 2 seconds under a normal load of 1,000 users."
Context: quiz
what type of requirement is this? 
1. "the system should be able to process 1000 transactions per second".
2. "all user input should be validated to prevent incorrect data entry".
3. "the system should allow users to search for products by category and filter the results by price, brand and customer reviews."
Source: software4kmu learning nuggets.pdf

Context: yet, a systematic mapping study [52] adds that quality assessment plays an important role for
improving software requirements specifications.
at this point, we wanted to dig deeper and understand the reasoning behind doing a continuous
status quo in requirements engineering
:37
a certain certification (p = 0.12 [0.08, 0.17]) or due to a regulation like cmmi, cobit or itil
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: risk calculations
system success factors
application scenarios
user interface
user classes
system interaction
release strategy
domain model
environment model
system boundaries
quality requirements
assumptions
sw design constraints
acceptance criteria
acceptance test cases
release planning
behaviour model
system interaction
service interaction
data model
user interface
communication interfaces
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: furthermore, we collected the time spent for detecting defects. 
this allows us to compare the performance of the treatments 
in terms of efficiency, which is the metric that complements 
the answer to rq1. finally, we collected answers from the 
follow-up questionnaire. this questionnaire allowed us to 
receive feedback on the perceived usefulness and ease of use.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: ments that deﬁne properties of the system rela-
tive to other systems or circumstances12. when
searching for grammatical comparatives in re-
quirements, roughly 48% of the cases are of the
aforementioned kind. in roughly the same num-
ber of cases, however, the comparative describes a
condition. for example, if the requirement states
that if the system takes more than 1 second to re-
Source: Rapid quality assurance with Requirements Smells.pdf

Query: Is the following requirement good? "The system must load within 2 seconds under a normal load of 1,000 users."
Context: To assess the requirement "The system must load within 2 seconds under a normal load of 1,000 users," we can summarize the relevant information from the DataFrame regarding performance efficiency and usability.

1. **Performance Efficiency**: 
   - The average score for performance efficiency is approximately 0.58, indicating a moderate level of importance placed on performance in the projects surveyed.
   - The standard deviation is about 0.49, suggesting variability in how performance efficiency is prioritized across different projects.
   - The minimum score is 0, and the maximum score is 1, indicating that some projects may not prioritize performance at all, while others consider it highly important.

2. **Usability**: 
   - The average score for usability is not directly calculated in the summary but can be inferred to be similar in variability and importance as performance efficiency, given the structure of the data.

3. **Requirements Elicitation**: 
   - The average engagement in requirements elicitation methods (like interviews, analysis of existing documents, etc.) is relatively low, with the highest average being around 0.17 for external experts, indicating that many projects may not be utilizing these methods effectively.

In conclusion, while the requirement for the system to load within 2 seconds is a good performance target, the overall emphasis on performance efficiency in the surveyed projects is moderate. This suggests that while the requirement is valid, its implementation may vary significantly based on how performance is prioritized in practice. Therefore, it is essential to ensure that performance requirements are clearly defined and prioritized in the project to meet such expectations.
Source: napire data

Query: is the following requirement good? "the system must load within 2 seconds under a normal load of 1,000 users."
Context: furthermore, we collected the time spent for detecting defects. 
this allows us to compare the performance of the treatments 
in terms of efficiency, which is the metric that complements 
the answer to rq1. finally, we collected answers from the 
follow-up questionnaire. this questionnaire allowed us to 
receive feedback on the perceived usefulness and ease of use.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: system privacy 
system portability 
others 
percentage of answers 
figure 8: critical non-functional requirements of ml- 
enabled systems (n = 71) 
requirements with data (p = 53.556 [53.197, 53.915]), resolving 
conflicts (p = 42.346 [41.987, 42.706]), managing changing re- 
quirements (p = 40.915 [40.574, 41.257]), selecting metrics (p = 
[26.418, 27.021]). 
customer  expectactions
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: purpose, i.e., how well they benefit these requirements-affected
activities, can be effectively determined when (1) all affected
activities are known and (2) the performance of these activities
can be evaluated. the need for a systematic overview of (1)
requirements-affected activities as well as (2) the attributes
which quantify their performance has been well recognized in
Source: Measuring the Fitness-for-Purpose of Requirements An initial Model of Activities and Attributes.pdf

Context: (i.e. does the system satisfy the requirements?). in that sense, 
requirements verification is typically captured by (acceptance) 
testing. with verification and validation, overall, we evaluate 
requirements against stakeholder expectations. in that sense, 
we sometimes also prototype and showcase to the stakholders, 
perform formal verification where applicable, review the
Source: software4kmu learning nuggets.pdf

Context: ments that deﬁne properties of the system rela-
tive to other systems or circumstances12. when
searching for grammatical comparatives in re-
quirements, roughly 48% of the cases are of the
aforementioned kind. in roughly the same num-
ber of cases, however, the comparative describes a
condition. for example, if the requirement states
that if the system takes more than 1 second to re-
Source: Rapid quality assurance with Requirements Smells.pdf

Query: is the following requirement good? "the system must load within 2 seconds under a normal load of 1,000 users."
Context: To assess the quality of the requirement "the system must load within 2 seconds under a normal load of 1,000 users," we can summarize the relevant performance-related information from the DataFrame:

1. **Performance Efficiency Importance**: The average value for the column indicating the importance of performance efficiency is approximately **0.58**. This suggests that performance efficiency is considered important in the context of development.

2. **Non-functional Requirements Documentation**: The average value for the documentation of non-functional requirements related to performance efficiency is approximately **0.49**. This indicates a moderate level of documentation regarding performance requirements.

Based on these insights, the requirement for the system to load within 2 seconds under a normal load of 1,000 users aligns with the general emphasis on performance efficiency in the development context. However, the moderate documentation level suggests that there may be room for improvement in how such performance requirements are captured and communicated.

In conclusion, the requirement appears to be good as it reflects a critical aspect of performance efficiency, which is deemed important for development.
Source: napire data

Query: Whom to involve in the review of requirements?
Context: perspective.
involved stakeholders
at this phase in the requirement engineering process, various stakeholders should be involved to support the analysis. the leading stakeholders in requirement analysis are roles that have knowledge 
about the operational context and domain.
Source: software4kmu learning nuggets.pdf

Context: ments artifacts, however, need to involve all relevant
stakeholders [65], who must manually read and un-
derstand each requirements artifact. moreover, they
are diﬃcult to perform. they require a high domain
knowledge and expertise from the reviewers [65] and
the quality of their outcome depends on the quality of
the reviewer [75]. on top of all this, reviewers could
Source: Rapid quality assurance with Requirements Smells.pdf

Context: interested in the quality of the software system, while product 
managers also care about sustainability of the business model and 
balancing costs and quality of the product. 
in any case, capturing the stakeholders explicitly is important as 
they are the source for various information with respect to the 
operational context of a system and requirements (e.g. end users
Source: software4kmu learning nuggets.pdf

Context: compliance. moreover, stakeholders tend to want security 
requirement satisfaction to be very close to yes. third, the 
effort stakeholders might be willing to dedicate to satisfying 
sr also depends on the likelihood and impact of a failure to 
comply with them. this is even more challenging in the 
context of agile software projects because, apparently,
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: & decision
validation
training design
release
release planning
treatment design & design validation
brieﬂy summarised, we begin with a kickoﬀwhere the most important
stakeholders for the artefact model and their roles are identiﬁed, followed by
semi-structured interviews with these. subsequently, we review requirements
d. m´
endez fern´
andez, b. penzenstadler
Source: Artefact-based Requirements Engineering The AMDiRE Approach.pdf

Query: Whom to involve in the review of requirements?
Context: To determine whom to involve in the review of requirements, the following insights can be drawn from the DataFrame:

1. **Who Responsible for Requirements Elicitation**: The most frequently mentioned role is the **Business Analyst**, indicating that this role is typically responsible for eliciting requirements.

2. **Relationship with Customer**: The majority of responses indicate a **Good** relationship with the customer, suggesting that customer involvement is likely beneficial in the review process.

3. **Agile vs. Plan-driven Project**: The project methodology (Agile or Plan-driven) may influence who should be involved, with Agile projects often requiring more collaborative roles.

4. **Documentation Granularity**: The level of detail in documentation can affect who needs to be involved; more detailed documentation may require more stakeholders to review.

5. **Elicitation Methods**: Various methods such as **Interviews**, **Workshops and Focus Groups**, and **External Experts** are mentioned, indicating that these methods can be used to gather input from different stakeholders.

6. **Stakeholders**: The data shows that there are typically two categories of stakeholders involved, with a significant number of responses indicating a lack of involvement (349 out of 455).

In summary, the key individuals to involve in the review of requirements include:
- **Business Analysts** for their primary role in requirements elicitation.
- **Customers** to ensure their needs are accurately captured.
- **Stakeholders** who can provide additional insights, especially in collaborative settings like workshops.
- **External Experts** when specialized knowledge is required.

This collaborative approach, particularly in Agile environments, can enhance the quality and relevance of the requirements being reviewed.
Source: napire data

Query: whom to involve in the review of requirements?
Context: ments artifacts, however, need to involve all relevant
stakeholders [65], who must manually read and un-
derstand each requirements artifact. moreover, they
are diﬃcult to perform. they require a high domain
knowledge and expertise from the reviewers [65] and
the quality of their outcome depends on the quality of
the reviewer [75]. on top of all this, reviewers could
Source: Rapid quality assurance with Requirements Smells.pdf

Context: interested in the quality of the software system, while product 
managers also care about sustainability of the business model and 
balancing costs and quality of the product. 
in any case, capturing the stakeholders explicitly is important as 
they are the source for various information with respect to the 
operational context of a system and requirements (e.g. end users
Source: software4kmu learning nuggets.pdf

Context: compliance. moreover, stakeholders tend to want security 
requirement satisfaction to be very close to yes. third, the 
effort stakeholders might be willing to dedicate to satisfying 
sr also depends on the likelihood and impact of a failure to 
comply with them. this is even more challenging in the 
context of agile software projects because, apparently,
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: the ﬁrst question directly evaluates our improvement approach for applica-
bility and usability, and the second question evaluates the appropriateness of
the resulting re reference model from the perspective of project participants.
during the intermediate evaluation, we conduct an assessment where the lead
of the process engineering group answers a questionnaire (jointly discussed with
Source: Improving Requirements Engineering by Artefact Orientation.pdf

Context: & decision
validation
training design
release
release planning
treatment design & design validation
brieﬂy summarised, we begin with a kickoﬀwhere the most important
stakeholders for the artefact model and their roles are identiﬁed, followed by
semi-structured interviews with these. subsequently, we review requirements
d. m´
endez fern´
andez, b. penzenstadler
Source: Artefact-based Requirements Engineering The AMDiRE Approach.pdf

Query: whom to involve in the review of requirements?
Context: To determine whom to involve in the review of requirements, the following relevant roles and factors have been identified from the DataFrame:

1. **Who Responsible for Requirements Elicitation**:
   - Business Analyst
   - Other
   - Nobody has the primary responsibility
   - Customer
   - Product Manager
   - Product Owner
   - Requirements Engineer
   - Project Lead / Project Manager
   - Scrum Master
   - Architect
   - Developer
   - Marketing

2. **Relationship with Customer**:
   - Very good
   - Good
   - Neutral
   - Bad
   - Very bad

3. **Agile vs Plan-driven Project**:
   - Plan-driven
   - Rather agile
   - Hybrid
   - Agile
   - Rather plan-driven

4. **Documentation Granularity**:
   - High-level requirements documented at the beginning and refined as needed.
   - Detailed requirements documented at the beginning.
   - Other (please specify).

5. **Elicitation Methods**:
   - Elicit and refine requirements in several iterations (Yes/No).
   - Elicit and refine requirements in a specifically dedicated project phase (Yes/No).
   - Requirements elicitation with Interviews (Yes/No).
   - Requirements elicitation with Workshops and focus groups (Yes/No).

6. **Testers Participation**:
   - Testers participate in requirements reviews to align testing with requirements (Yes/No).

7. **Stakeholders Involvement**:
   - Stakeholders involved (Yes/No).

Based on this summary, it is advisable to involve a combination of roles such as Business Analysts, Product Owners, Project Managers, and relevant stakeholders in the review of requirements. Additionally, ensuring good relationships with customers and utilizing effective elicitation methods will enhance the review process.
Source: napire data

Query: What are quality requirements?
Context: engagement by the customer (∼6%), and a too high team distribution (∼6%).
in this case (figure 7), the main aﬀected categories were project or organiza-
tion (∼47%, i.e. 32 out of 68 eﬀects were from that category), product (∼22%),
and customer (∼19%). the main cited eﬀects for this problem were customer dis-
satisfaction (∼16%), time overrun (∼13%), and poor product quality (∼10%).
d. m´
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Context: as the obtained quality factors (and their practical value)
highly depend on the person deriving it, especially regarding
the expertise in the ﬁeld and, since deﬁnitions are vague,
experiences how the activities are carried out in practice. from
our experiences, we obtained more and more precise quality
factors when asking experienced testers compared to students.
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Context: our respondents also often have the role of a contractor. hence, the difficulties in gathering input by 
concrete customers, which might be hard to reach in anonymous markets, might explain the causes 
and effects in brazil, while the contractor role in germany demanding for stronger contracting 
components might explain the emphasis on the strict methods and the product. 
•
Source: Naming the Pain in Requirements Engineering Comparing Practices in Brazil and Germany.pdf

Context: judge the quality of requirements (and re) based on the extent
to which they are fit for purpose, i.e., how they impact the
attributes of requirements-affected activities [3]. still, research
on requirements quality is dominated by studies aiming to
determine the quality of a requirements specification solely
based on normative metrics [4].
recent endeavors to nuance requirements quality research
Source: Measuring the Fitness-for-Purpose of Requirements An initial Model of Activities and Attributes.pdf

Context: and completeness: first, discussing each quality factor and its
impacts on activities was seen as a validation of the company
guidelines. they considered re-evaluating guideline rules that
do not have a broad impact on the development process.
also, rules that have positive as well as negative impacts
should be debated within the company again, especially if
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Query: What are quality requirements?
Context: Quality requirements refer to the essential attributes that a system must possess to ensure its effectiveness and user satisfaction. Based on the analysis of the DataFrame, the following average values represent the importance of various quality requirements:

1. **Compatibility** (e.g., co-existence, interoperability): 0.42
2. **Maintainability** (e.g., analysability, modularity, modifiability, reusability, testability): 0.56
3. **Performance Efficiency** (e.g., time behaviour, resource utilisation, capacity): 0.58
4. **Portability** (e.g., adaptability, installability, replaceability): 0.19
5. **Reliability** (e.g., availability, fault tolerance, maturity, recoverability): 0.59
6. **Security** (e.g., accountability, authenticity, confidentiality, integrity, non-repudiation): 0.50
7. **Safety** (e.g., freedom of risk for health or disaster): 0.28
8. **Usability** (e.g., accessibility, appropriateness, recognisability, learnability, operability, user error protection, user interface aesthetics): 0.63

These values indicate the relative importance of each quality requirement in the context of development, with usability and maintainability being particularly emphasized.
Source: napire data

Query: what are quality requirements?
Context: as the obtained quality factors (and their practical value)
highly depend on the person deriving it, especially regarding
the expertise in the ﬁeld and, since deﬁnitions are vague,
experiences how the activities are carried out in practice. from
our experiences, we obtained more and more precise quality
factors when asking experienced testers compared to students.
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Context: our respondents also often have the role of a contractor. hence, the difficulties in gathering input by 
concrete customers, which might be hard to reach in anonymous markets, might explain the causes 
and effects in brazil, while the contractor role in germany demanding for stronger contracting 
components might explain the emphasis on the strict methods and the product. 
•
Source: Naming the Pain in Requirements Engineering Comparing Practices in Brazil and Germany.pdf

Context: judge the quality of requirements (and re) based on the extent
to which they are fit for purpose, i.e., how they impact the
attributes of requirements-affected activities [3]. still, research
on requirements quality is dominated by studies aiming to
determine the quality of a requirements specification solely
based on normative metrics [4].
recent endeavors to nuance requirements quality research
Source: Measuring the Fitness-for-Purpose of Requirements An initial Model of Activities and Attributes.pdf

Context: rapid quality assurance with requirements smells
henning femmera,∗, daniel méndez fernándeza, stefan wagnerb, sebastian edera
asoftware & systems engineering, technische universität münchen, germany
binstitute of software technology, university of stuttgart, germany
abstract
context: bad requirements quality can cause expensive consequences during the software development
Source: Rapid quality assurance with Requirements Smells.pdf

Context: determinants of software quality [2], re lays the foundation for successful development projects regarding
∗corresponding author
email address: mendezfe@in.tum.de (daniel m´
endez fern´
andez)
preprint submitted to information and software technology
december 1, 2016
arxiv:1611.10021v1  [cs.se]  30 nov 2016
cost and quality [3].
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Query: what are quality requirements?
Context: Agent stopped due to iteration limit or time limit.
Source: napire data

Query: How to deal with ambiguous requirements?
Context: from requirements to their rationale or from requirements to the code level). we are currently working on
clarifying those potentially misleading variables by including examples into the questionnaire and making
the answer possibilities more precise. also, for the future replications, we need to collect more information
Source: Naming the Pain in Requirements Engineering A Design for a Global Family of Surveys and First Results from Germany.pdf

Context: 6. further refine and classification in order to achieve more clarity, completeness, and unambiguity​
7. conduct further analysis, refinement and completion as basis for further (stakeholder) feedback​
8. unless not approved by stakeholders, requirements remain candidates (or assumptions)​
9. since requirements elicitation is an iterative process, go back to 2.
requirements (elicitation) sources​
Source: software4kmu learning nuggets.pdf

Context: common confusion and pitfalls
confusion often arises when stakeholders focus on implementation details before fully understanding and agreeing the requirements. 
this can lead to a number of problems:
overlooking stakeholder needs: discussing solutions prematurely can cause stakeholders to miss the real needs, resulting in 
solutions that don't address the right problems.
Source: software4kmu learning nuggets.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: never be able to formally verify that the requirements are complet. it's therefore vital to take a pragmatic perspective here and ensure 
that each stakeholder agrees at least on the wording and essence of a requirement to ensure that it is consistent with all specified 
characteristics.
let us look at the above properties in a concrete example and refine a bad requirement together.
Source: software4kmu learning nuggets.pdf

Query: How to deal with ambiguous requirements?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how to deal with ambiguous requirements?
Context: 6. further refine and classification in order to achieve more clarity, completeness, and unambiguity​
7. conduct further analysis, refinement and completion as basis for further (stakeholder) feedback​
8. unless not approved by stakeholders, requirements remain candidates (or assumptions)​
9. since requirements elicitation is an iterative process, go back to 2.
requirements (elicitation) sources​
Source: software4kmu learning nuggets.pdf

Context: common confusion and pitfalls
confusion often arises when stakeholders focus on implementation details before fully understanding and agreeing the requirements. 
this can lead to a number of problems:
overlooking stakeholder needs: discussing solutions prematurely can cause stakeholders to miss the real needs, resulting in 
solutions that don't address the right problems.
Source: software4kmu learning nuggets.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: never be able to formally verify that the requirements are complet. it's therefore vital to take a pragmatic perspective here and ensure 
that each stakeholder agrees at least on the wording and essence of a requirement to ensure that it is consistent with all specified 
characteristics.
let us look at the above properties in a concrete example and refine a bad requirement together.
Source: software4kmu learning nuggets.pdf

Context: have to use a passkey to log in?
clarity: is the requirements clear and unambiguous to the customer? can there be missunderstandings towards which 
functionality requires a login?
example
requirement: the application must respond to user requests within 2 seconds.
verification activities:
define acceptance criteria: application responds within 2 seconds
Source: software4kmu learning nuggets.pdf

Query: how to deal with ambiguous requirements?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: Can you provide examples of user stories?
Context: we analyzed over 1,000 user stories containing roughly
28,000 words. for rq 2.2, we met with an experienced
scrum master and a long-term developer, who have
worked on several projects for techdivision.
6http://www.magento.com
7http://www.typo3.org
8https://atlassian.com/software/jira
case d: university of stuttgart. the requirements of
case d were created by 52 groups of three 2nd-year
Source: Rapid quality assurance with Requirements Smells.pdf

Context: technique is used in the next section. 
d. motivational example 
in the following, we demonstrate the application of our 
approach in an exemplary setting. table 7 shows a user story 
and its set of security specifications with some defects 
commonly applicable to any agile software project. 
table 7.input of the approach as agile requirements specifications. 
user story 
security specification
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: involving free form or with some constraints [43]. for this 
reason, the approach is focused on the user story format. 
these stories are often expressed in a simple sentence using 
the role/feature/reason schema and structured as follows: as a 
[role], i want to [feature], so that [reason]. 
user stories are analyzed independently. it makes sense to
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: requirements lists 
prototypes 
use case models 
data models 
vision document 
not documented 
goal models 
ml canvas 
bdd scenarios 
others 
percentage of answers 
data 
quality 
model 
reliability 
system performance 
model explainability 
system usability 
system reliability 
system maintanibility 
system security 
model 
transparency 
system compatibility 
model accountability
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: development neglects documentation and as such the trace from goals and constraints to more technical requirements is missing. 
however, given that the typical requirements artifacts in agile software development are 
themes: top-level objectives
epics: higher-level functionality represented by a group of user stories
user stories: brief statement of intent when interacting with the system
Source: software4kmu learning nuggets.pdf

Query: Can you provide examples of user stories?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: can you provide examples of user stories?
Context: we analyzed over 1,000 user stories containing roughly
28,000 words. for rq 2.2, we met with an experienced
scrum master and a long-term developer, who have
worked on several projects for techdivision.
6http://www.magento.com
7http://www.typo3.org
8https://atlassian.com/software/jira
case d: university of stuttgart. the requirements of
case d were created by 52 groups of three 2nd-year
Source: Rapid quality assurance with Requirements Smells.pdf

Context: technique is used in the next section. 
d. motivational example 
in the following, we demonstrate the application of our 
approach in an exemplary setting. table 7 shows a user story 
and its set of security specifications with some defects 
commonly applicable to any agile software project. 
table 7.input of the approach as agile requirements specifications. 
user story 
security specification
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: involving free form or with some constraints [43]. for this 
reason, the approach is focused on the user story format. 
these stories are often expressed in a simple sentence using 
the role/feature/reason schema and structured as follows: as a 
[role], i want to [feature], so that [reason]. 
user stories are analyzed independently. it makes sense to
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: requirements lists 
prototypes 
use case models 
data models 
vision document 
not documented 
goal models 
ml canvas 
bdd scenarios 
others 
percentage of answers 
data 
quality 
model 
reliability 
system performance 
model explainability 
system usability 
system reliability 
system maintanibility 
system security 
model 
transparency 
system compatibility 
model accountability
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: development neglects documentation and as such the trace from goals and constraints to more technical requirements is missing. 
however, given that the typical requirements artifacts in agile software development are 
themes: top-level objectives
epics: higher-level functionality represented by a group of user stories
user stories: brief statement of intent when interacting with the system
Source: software4kmu learning nuggets.pdf

Query: can you provide examples of user stories?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: How to document a requirement?
Context: 3. conduct structured elicitation by applying elicitation (and creativity) techniques​
 such as interviews, questionnaires… (more on techniques below)
4. document requirements, for example with the help of checklists and templates (e.g. volere or self-made)​
5. structure and transfer to models in order to provide a more structured representation: what belongs where?​
Source: software4kmu learning nuggets.pdf

Context: tive programming environments that can be used to process data and create ml 
models, appear as the most used tool for documenting requirements. again, this 
requirements overthinking (0.38%) 
project (0.38%) 
domain complexity (0.38%) strategic alignments (0.38%) 
solution uniqueness (0.38%) 
method (0.38%) 
difficulties in value creation (0.38%) 
define priorities (0.38%)
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: draft  
title
what makes a good requirement?
was macht eine gute anforderung aus?
tags
requirements quality
anforderungsqualität
estimated duration
10 min
level
external ressources
international standards for systems and software 
engineering
requirements engineering quick check
requirements smells
dependencies
next item
id 1.1.1.9 - form of requirements  
goals (teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: never be able to formally verify that the requirements are complet. it's therefore vital to take a pragmatic perspective here and ensure 
that each stakeholder agrees at least on the wording and essence of a requirement to ensure that it is consistent with all specified 
characteristics.
let us look at the above properties in a concrete example and refine a bad requirement together.
Source: software4kmu learning nuggets.pdf

Query: How to document a requirement?
Context: To document a requirement, the following methods and practices can be utilized based on the summarized data:

1. **Using Non-Quantified Textual Requirements**: This approach involves documenting requirements in a descriptive manner without specific metrics.

2. **Using Quantified Textual Requirements**: This method includes specifying requirements with measurable criteria.

3. **Mix of Quantified and Non-Quantified Textual Requirements**: Combining both approaches can provide a balanced view of requirements.

4. **Following Company Guidelines**: Adhering to established company protocols and standards for documentation.

5. **Textual Requirements and Diagrams**: Utilizing both written descriptions and visual representations to clarify requirements.

6. **Test Plans**: Incorporating testing strategies as part of the documentation to ensure requirements are verifiable.

7. **System Specification**: Documenting requirements within a formal system specification document.

8. **High-Level and Detailed Requirements**: Starting with high-level requirements and refining them into detailed specifications as the project progresses.

9. **Specific Guidelines and Standards**: Following specific industry standards or guidelines to ensure compliance and quality.

10. **Team Reviews**: Engaging in team reviews to validate and refine documented requirements collaboratively.

These methods can enhance clarity, ensure compliance, and facilitate better communication among stakeholders during the requirements engineering process.
Source: napire data

Query: how to document a requirement?
Context: 3. conduct structured elicitation by applying elicitation (and creativity) techniques​
 such as interviews, questionnaires… (more on techniques below)
4. document requirements, for example with the help of checklists and templates (e.g. volere or self-made)​
5. structure and transfer to models in order to provide a more structured representation: what belongs where?​
Source: software4kmu learning nuggets.pdf

Context: tive programming environments that can be used to process data and create ml 
models, appear as the most used tool for documenting requirements. again, this 
requirements overthinking (0.38%) 
project (0.38%) 
domain complexity (0.38%) strategic alignments (0.38%) 
solution uniqueness (0.38%) 
method (0.38%) 
difficulties in value creation (0.38%) 
define priorities (0.38%)
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: draft  
title
what makes a good requirement?
was macht eine gute anforderung aus?
tags
requirements quality
anforderungsqualität
estimated duration
10 min
level
external ressources
international standards for systems and software 
engineering
requirements engineering quick check
requirements smells
dependencies
next item
id 1.1.1.9 - form of requirements  
goals (teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Query: how to document a requirement?
Context: To document a requirement, the following approaches can be considered based on the summarized information from the DataFrame:

1. **Compatibility Documentation**: Use non-quantified textual requirements to describe compatibility aspects, such as co-existence and interoperability.

2. **Maintainability Documentation**: Focus on aspects like analysability, modularity, modifiability, reusability, and testability.

3. **Performance Efficiency Documentation**: Document requirements related to time behavior, resource utilization, and capacity.

4. **Portability Documentation**: Address adaptability, installability, and replaceability in the documentation.

5. **Reliability Documentation**: Include details on availability, fault tolerance, maturity, and recoverability.

6. **Safety Documentation**: Document requirements that ensure freedom from risks related to health or disasters.

7. **Security Documentation**: Focus on accountability, authenticity, confidentiality, integrity, and non-repudiation.

8. **Usability Documentation**: Ensure accessibility, appropriateness, recognizability, learnability, operability, user error protection, and user interface aesthetics are well documented.

9. **Documentation Granularity**: Consider the level of detail required in the documentation to ensure clarity and comprehensiveness.

10. **Elicitation Practices**: Note that some teams may not elicit requirements themselves, which can impact the documentation process.

These strategies can help ensure that requirements are documented effectively and comprehensively.
Source: napire data

Query: How can I identify relevant stakeholders?
Context: stakeholders and artifacts).
needs to the requirements artifact and thus must be involved
in the deﬁnition of the abre-qm. accordingly, missing
stakeholders as well as unnecessary stakeholders can lead to
a suboptimal deﬁnition of the quality model. a project lead
is usually a good starting point for ﬁnding out who interacts
with the re artifact.
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Context: step 1.
as the ﬁrst step, we select the projects to participate in the ﬁeld study from a set of (project)
candidates. to identify candidates, our project partner provides us with a list of projects and corresponding
contact persons, which we contact by email. each project is represented by one person, who either is assigned
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: stakeholders, legacy system​
neutral​
neutral​
involvement​
reality​
apprenticing​
stakeholders, legacy system​
neutral​
individual​
involvement​
reality​
contextual inquiry​
stakeholders, legacy system​
neutral​
individual​
involvement​
reality​
brainstorming​
stakeholders​
questioning​
group​
analytical​
neutral​
analogy technique​
stakeholders​
questioning​
group​
analytical​
projecting​
Source: software4kmu learning nuggets.pdf

Context: main: the industrial sector, the general relationship with the customer and characteristics of the diﬀerent
stakeholders.
especially whether project participants have weak access to business process information
(e.g., for reasons of conﬁdentiality) has an inﬂuence on the ability and the necessity to specify the roi
calculations, the value for the customer and the business risk analysis.
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: - laying the foundation with the 
relevant information, for example operational workflows in a 
company capturing processes that shall be supported (partially) 
with the system under consideration. this context includes also 
the external systems our system under consideration shall 
interact with.
2. identify stakeholders​
 - laying the foundation with the relevant
Source: software4kmu learning nuggets.pdf

Query: How can I identify relevant stakeholders?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how can i identify relevant stakeholders?
Context: stakeholders and artifacts).
needs to the requirements artifact and thus must be involved
in the deﬁnition of the abre-qm. accordingly, missing
stakeholders as well as unnecessary stakeholders can lead to
a suboptimal deﬁnition of the quality model. a project lead
is usually a good starting point for ﬁnding out who interacts
with the re artifact.
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Context: step 1.
as the ﬁrst step, we select the projects to participate in the ﬁeld study from a set of (project)
candidates. to identify candidates, our project partner provides us with a list of projects and corresponding
contact persons, which we contact by email. each project is represented by one person, who either is assigned
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: stakeholders, legacy system​
neutral​
neutral​
involvement​
reality​
apprenticing​
stakeholders, legacy system​
neutral​
individual​
involvement​
reality​
contextual inquiry​
stakeholders, legacy system​
neutral​
individual​
involvement​
reality​
brainstorming​
stakeholders​
questioning​
group​
analytical​
neutral​
analogy technique​
stakeholders​
questioning​
group​
analytical​
projecting​
Source: software4kmu learning nuggets.pdf

Context: main: the industrial sector, the general relationship with the customer and characteristics of the diﬀerent
stakeholders.
especially whether project participants have weak access to business process information
(e.g., for reasons of conﬁdentiality) has an inﬂuence on the ability and the necessity to specify the roi
calculations, the value for the customer and the business risk analysis.
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: - laying the foundation with the 
relevant information, for example operational workflows in a 
company capturing processes that shall be supported (partially) 
with the system under consideration. this context includes also 
the external systems our system under consideration shall 
interact with.
2. identify stakeholders​
 - laying the foundation with the relevant
Source: software4kmu learning nuggets.pdf

Query: how can i identify relevant stakeholders?
Context: To identify relevant stakeholders, you can analyze the following summarized information from the DataFrame:

1. **Stakeholders**: This column lists various stakeholders involved in the project.
2. **Who Responsible for Requirements Elicitation**: This column indicates the roles responsible for gathering requirements.
3. **Count**: This column shows the number of instances each stakeholder or role has been mentioned.

From the analysis, you can see the distribution of responsibilities among different stakeholders, which can help in identifying who is relevant for your project. For example, roles like Business Analyst, Product Owner, and Project Lead/Manager have a higher count, indicating their significant involvement in requirements elicitation. 

By focusing on stakeholders with higher counts and their associated responsibilities, you can effectively identify the key individuals or groups relevant to your project.
Source: napire data

Query: What are the benefits of using focus groups for elicitation?
Context: e. validity procedures
to increase the reliability of the statements of the industry
participants, and thus the internal validity, we perform a
group interview. through the interaction between the group
members, memories and experiences of the participants are
stimulated. this way, they can produce insights that would
be less accessible without this technique. furthermore, the
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: as the focus group participants were available, and the results
of the previous session were analyzed. overall, the sessions
took place over twelve months. as a result of the focus
group sessions with the first group of legal researchers, we
formulated four challenges. after that, we conducted another
one-hour-long focus group with two other legal researchers
Source: On Developing an Artifact-based Approach to Regulatory Requirements Engineering.pdf

Context: our respondents also often have the role of a contractor. hence, the difficulties in gathering input by 
concrete customers, which might be hard to reach in anonymous markets, might explain the causes 
and effects in brazil, while the contractor role in germany demanding for stronger contracting 
components might explain the emphasis on the strict methods and the product. 
•
Source: Naming the Pain in Requirements Engineering Comparing Practices in Brazil and Germany.pdf

Context: cross-company data helpful for dca all three participants 
agreed. participant #1, for instance, mentioned “i agree. 
mainly because if we wouldn’t have the suggested causes 
we could possibly limit our analysis to the causes that we 
remember, not considering relevant causes that may have 
happened in our context. the data supports the analysis, 
making it quicker and more effective”.
Source: Supporting Defect Causal Analysis in Practice with Cross-Company Data on Causes of Requirements Engineering Problems.pdf

Context: furthermore, we collected the time spent for detecting defects. 
this allows us to compare the performance of the treatments 
in terms of efficiency, which is the metric that complements 
the answer to rq1. finally, we collected answers from the 
follow-up questionnaire. this questionnaire allowed us to 
receive feedback on the perceived usefulness and ease of use.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Query: What are the benefits of using focus groups for elicitation?
Context: The analysis of the DataFrame reveals the following benefits of using focus groups for elicitation:

1. **Requirements Elicitation with Workshops and Focus Groups**: Approximately 56.76% of respondents indicated that workshops and focus groups are utilized for requirements elicitation.

2. **Refinement of Requirements in Several Iterations**: About 69.88% of participants reported that they elicit and refine requirements through several iterations, suggesting that focus groups facilitate ongoing feedback and adjustments.

3. **Refinement in a Dedicated Project Phase**: Around 30.74% of respondents noted that requirements are refined in a specifically dedicated project phase, indicating structured engagement during the project lifecycle.

4. **Requirements Elicitation with Interviews**: Approximately 69.47% of participants also use interviews, which can complement focus group discussions by providing deeper insights.

5. **Requirements Elicitation with Analysis of Existing Documents**: About 59.84% of respondents utilize existing documents for requirements elicitation, which can be enhanced by insights gathered from focus groups.

6. **Requirements Elicitation with Prototyping**: Around 48.16% of participants engage in prototyping, which can be informed by the discussions and feedback from focus groups.

7. **Requirements Elicitation with Reuse Databases and Guidelines**: Only 17.42% of respondents indicated the use of reuse databases and guidelines, suggesting that focus groups may help in generating new ideas rather than relying solely on existing resources.

8. **Requirements Elicitation with External Experts**: Approximately 17.21% of participants involve external experts, which can be beneficial in focus group settings to gain diverse perspectives.

Overall, the use of focus groups appears to enhance the elicitation process by promoting iterative refinement, collaboration, and the integration of various elicitation techniques.
Source: napire data

Query: what are the benefits of using focus groups for elicitation?
Context: e. validity procedures
to increase the reliability of the statements of the industry
participants, and thus the internal validity, we perform a
group interview. through the interaction between the group
members, memories and experiences of the participants are
stimulated. this way, they can produce insights that would
be less accessible without this technique. furthermore, the
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: as the focus group participants were available, and the results
of the previous session were analyzed. overall, the sessions
took place over twelve months. as a result of the focus
group sessions with the first group of legal researchers, we
formulated four challenges. after that, we conducted another
one-hour-long focus group with two other legal researchers
Source: On Developing an Artifact-based Approach to Regulatory Requirements Engineering.pdf

Context: our respondents also often have the role of a contractor. hence, the difficulties in gathering input by 
concrete customers, which might be hard to reach in anonymous markets, might explain the causes 
and effects in brazil, while the contractor role in germany demanding for stronger contracting 
components might explain the emphasis on the strict methods and the product. 
•
Source: Naming the Pain in Requirements Engineering Comparing Practices in Brazil and Germany.pdf

Context: cross-company data helpful for dca all three participants 
agreed. participant #1, for instance, mentioned “i agree. 
mainly because if we wouldn’t have the suggested causes 
we could possibly limit our analysis to the causes that we 
remember, not considering relevant causes that may have 
happened in our context. the data supports the analysis, 
making it quicker and more effective”.
Source: Supporting Defect Causal Analysis in Practice with Cross-Company Data on Causes of Requirements Engineering Problems.pdf

Context: furthermore, we collected the time spent for detecting defects. 
this allows us to compare the performance of the treatments 
in terms of efficiency, which is the metric that complements 
the answer to rq1. finally, we collected answers from the 
follow-up questionnaire. this questionnaire allowed us to 
receive feedback on the perceived usefulness and ease of use.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Query: what are the benefits of using focus groups for elicitation?
Context: The analysis of the DataFrame reveals several benefits associated with using focus groups for requirements elicitation:

1. **Requirements Elicitation with Workshops and Focus Groups**: Approximately 56.76% of respondents indicated the use of workshops and focus groups for eliciting requirements, suggesting a significant reliance on this method.

2. **Iterative Refinement of Requirements**: About 69.88% of participants reported that they elicit and refine requirements in several iterations, indicating that focus groups facilitate ongoing feedback and adjustments.

3. **Dedicated Project Phase for Elicitation**: Around 30.74% of respondents noted that they have a specifically dedicated project phase for eliciting requirements, which can enhance the thoroughness of the process.

4. **Requirements Elicitation through Interviews**: A high percentage (69.47%) of respondents also utilize interviews, which can complement focus group discussions by providing deeper insights.

5. **Prototyping as an Elicitation Method**: Approximately 48.16% of participants engage in prototyping, which can be enhanced by insights gathered from focus groups.

6. **Observations for Elicitation**: About 35.04% of respondents use observations, indicating that focus groups can help identify areas for observation.

7. **External Experts Involvement**: Only 17.21% of respondents involve external experts, suggesting that focus groups may provide a platform for expert insights.

8. **Design Thinking and Lean Startup Approaches**: Around 19.88% of participants apply design thinking or lean startup methodologies, which can be informed by focus group findings.

9. **Low Incidence of Not Eliciting Requirements**: Only 3.69% of respondents indicated that they do not elicit requirements themselves, highlighting the importance of collaborative methods like focus groups.

Overall, the use of focus groups appears to enhance the requirements elicitation process by promoting collaboration, iterative refinement, and the integration of diverse perspectives.
Source: napire data

Query: How can I conduct effective stakeholder interviews?
Context: requirements elicitation can be done in multiple techniques which are adapted according to the stakeholder characteristics.
inhibition and distortion (e.g., by personal questions)
example 2: questionnaire-based survey
similar to interviews, but ​
no possibility to interact​
no possibility for inquiries​
usually conducted individually​
scales better than interviews​
Source: software4kmu learning nuggets.pdf

Context: stakeholder
p3
specialist engineer
stakeholder
p4
it product owner
management
p5
experienced engineer
stakeholder
p6
senior engineer
stakeholder
p7
senior engineer
contributor
p8
senior engineer
stakeholder
p9
engineer
engineer invited for discussion
p10
expert engineer
experienced engineer invited for discussion
the interviews were conducted through microsoft teamstm and
Source: An investigation of causes and effects of trust in Boundary Artefacts.pdf

Context: strong dependency on the knowledge about the customers and their domain. in particular, the less familiar
customers are (e.g., in the ﬁrst development project for this customer), the higher the probability of deﬁning
system success factors and also acceptance criteria.
further parameters that the interviewees mentioned consider the stakeholders’ characteristics. the avail-
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: step 1.
as the ﬁrst step, we select the projects to participate in the ﬁeld study from a set of (project)
candidates. to identify candidates, our project partner provides us with a list of projects and corresponding
contact persons, which we contact by email. each project is represented by one person, who either is assigned
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: content creation and management from the contributors’ side and
evaluate the trust of the stakeholders concerning the ba.
3.2. data collection
the data for this study was collected by means of interviews, archive
documents, workshop, and informal conversations with practitioners.
the first and fourth authors had full access to the company network
Source: An investigation of causes and effects of trust in Boundary Artefacts.pdf

Query: How can I conduct effective stakeholder interviews?
Context: To conduct effective stakeholder interviews, consider the following summarized insights based on the DataFrame:

1. **Elicitation Methods**:
   - **Interviews**: This method is widely used, indicating a strong preference for direct engagement with stakeholders.
   - **Workshops and Focus Groups**: Also a popular method, suggesting collaborative discussions are valued.
   - **External Experts**: Engaging external experts is less common but still utilized.
   - **Observations**: This method is frequently employed, highlighting the importance of understanding stakeholder environments.

2. **Satisfaction Levels**:
   - A significant number of respondents (150) reported being **Satisfied** with the requirements engineering process.
   - A smaller group (31) expressed being **Very Satisfied**, indicating room for improvement in stakeholder engagement and requirements gathering.

3. **Top Problems Identified**:
   - **Communication Flaws**: Issues between the project and the customer are the most frequently cited problem, emphasizing the need for clear communication channels.
   - **Incomplete or Hidden Requirements**: This is a common challenge, suggesting that thorough exploration during interviews is crucial.
   - **Time Boxing**: Many stakeholders feel constrained by time, which can impact the depth of interviews.
   - **Moving Targets**: Changes in goals and requirements can complicate the interview process, indicating the need for flexibility and adaptability.
   - **Insufficient Support**: Both from project leads and customers, highlighting the importance of stakeholder buy-in and support.

By focusing on these areas, you can enhance the effectiveness of stakeholder interviews, ensuring that you gather comprehensive and actionable requirements.
Source: napire data

Query: how can i conduct effective stakeholder interviews?
Context: requirements elicitation can be done in multiple techniques which are adapted according to the stakeholder characteristics.
inhibition and distortion (e.g., by personal questions)
example 2: questionnaire-based survey
similar to interviews, but ​
no possibility to interact​
no possibility for inquiries​
usually conducted individually​
scales better than interviews​
Source: software4kmu learning nuggets.pdf

Context: stakeholder
p3
specialist engineer
stakeholder
p4
it product owner
management
p5
experienced engineer
stakeholder
p6
senior engineer
stakeholder
p7
senior engineer
contributor
p8
senior engineer
stakeholder
p9
engineer
engineer invited for discussion
p10
expert engineer
experienced engineer invited for discussion
the interviews were conducted through microsoft teamstm and
Source: An investigation of causes and effects of trust in Boundary Artefacts.pdf

Context: strong dependency on the knowledge about the customers and their domain. in particular, the less familiar
customers are (e.g., in the ﬁrst development project for this customer), the higher the probability of deﬁning
system success factors and also acceptance criteria.
further parameters that the interviewees mentioned consider the stakeholders’ characteristics. the avail-
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: content creation and management from the contributors’ side and
evaluate the trust of the stakeholders concerning the ba.
3.2. data collection
the data for this study was collected by means of interviews, archive
documents, workshop, and informal conversations with practitioners.
the first and fourth authors had full access to the company network
Source: An investigation of causes and effects of trust in Boundary Artefacts.pdf

Context: whether and how they would integrate it in their
context. we asked those questions openly and tran-
scribed the answers for validation by the interviewees
and later coding. in the following, we report on the
results structured by topics. where applicable, we
provide the verbatim answers in relation to their cases
(a, b or c).
overall evaluation. in general,
all practitioners
Source: Rapid quality assurance with Requirements Smells.pdf

Query: how can i conduct effective stakeholder interviews?
Context: To conduct effective stakeholder interviews, consider the following summarized insights derived from the DataFrame:

1. **Roles Responsible for Requirements Elicitation**:
   - Business Analyst: 37
   - Project Lead / Project Manager: 25
   - Requirements Engineer: 25
   - Product Owner: 23
   - Other roles include Product Manager, Architect, Customer, Developer, and Scrum Master.

2. **Average Satisfaction with Requirements Engineering**: 
   - The average satisfaction score is approximately 0.17, indicating room for improvement in stakeholder engagement and requirements clarity.

3. **Methods of Elicitation**:
   - Interviews: Conducted frequently, with a significant number of responses indicating their use.
   - Workshops and Focus Groups: Also utilized, though less frequently than interviews.
   - External Experts: Engaged in 28 instances.
   - Observations: Conducted 64 times, highlighting the importance of direct engagement with stakeholders.

4. **Common Reasons for Satisfaction**:
   - Stakeholders appreciate when all aspects related to requirements are considered.
   - There is recognition that while problems exist, they are often solvable with effective change management.

5. **Common Consequences of Effective Elicitation**:
   - Stakeholders report fewer sudden changes and improved understanding of requirements.

6. **Top Causes of Problems**:
   - Issues arise when functions are implemented without proper documentation.
   - Lack of knowledge about the business customer can lead to misunderstandings.
   - Customers may assume that unspecified requirements are understood.

These insights suggest that effective stakeholder interviews should focus on clear communication, thorough documentation, and an understanding of the stakeholders' needs and expectations. Engaging various roles in the elicitation process and addressing common issues can enhance the effectiveness of these interviews.
Source: napire data

Query: How does this requirement contribute to the project? Requirement: "The system must allow real-time data synchronization across multiple platforms."
Context: business value and to indicate the major goal to
the team, similar to goals and goal modeling in
traditional requirements engineering [50].
answer to rq 2.2. in summary, the practitioners
expressed that 65% of the discussed ﬁndings were
relevant, as they lead to lengthy discussions and un-
necessary iterations in estimation. they also saw the
problem of legal binding, but in contrast to the prac-
Source: Rapid quality assurance with Requirements Smells.pdf

Context: goals (teaching 
perspective)
to ensure learners can identify requirements and understand their impact on projects.
content description 
(teaching 
perspective)
define what constitutes a requirement within the context of system and software engineering, including its 
attributes and how it guides the development process
en
de
beginner  
intermediate  
expert
Source: software4kmu learning nuggets.pdf

Context: goals are achieved.
purpose
the project scope is the basic common agreement of what shall be 
achieved in the project and serves several purposes, among them:
basis for contracts where the problem shall be elaborated (e.g. 
deficiencies of current systems to be replaced) and where the 
overall scope of the project shall be captured.  
​
detection of moving targets or scope creeps.
Source: software4kmu learning nuggets.pdf

Context: the key activities of requirements management.
motivation/importance
effectively and efficiently managing requirements throughout their entire lifecycle is important for various reasons, such as:
requirements specifications ​
can become very large as the project evolves and they need to be managed​
 in order to avoid redundancy and repetition.
Source: software4kmu learning nuggets.pdf

Context: this requirement does not specify what “advanced features“ are, leaving it’s interpretation to the respective stakeholder.
the system should respond quickly to user input.
this requirements does not specify what “quickly” means, again leaving it to the stakeholders interpretation.
context of 
use
<a longer statement of the context of use if needed>
scope
Source: software4kmu learning nuggets.pdf

Query: How does this requirement contribute to the project? Requirement: "The system must allow real-time data synchronization across multiple platforms."
Context: The requirement for "The system must allow real-time data synchronization across multiple platforms" contributes to the project in several ways, as summarized below:

1. **Performance Efficiency**: The average importance rating for performance efficiency is approximately 0.58, indicating that performance aspects such as time behavior and resource utilization are considered moderately important for development.

2. **Reliability**: The reliability of the system, which includes factors like availability and fault tolerance, is crucial. The average rating suggests that these aspects are also valued, contributing to the system's robustness.

3. **Usability**: Usability factors, including accessibility and user interface aesthetics, have a significant average rating, emphasizing the importance of user experience in the system's design.

4. **Security**: Security measures, such as confidentiality and integrity, are essential, with the average rating reflecting a strong focus on protecting user data and system integrity.

5. **Portability**: The system's adaptability and installability across different platforms are highlighted, with a notable average rating, indicating that portability is a key consideration.

6. **Agile vs. Plan-driven Project**: The project management approach (Agile or Plan-driven) can influence how requirements like real-time synchronization are implemented, affecting flexibility and responsiveness to changes.

7. **Documentation Granularity**: The level of detail in documentation is important for ensuring that all stakeholders understand the requirements and implementation strategies.

8. **Goals**: The project's goals align with the need for real-time synchronization, as it supports efficient data handling and enhances overall system functionality.

9. **Quality Properties**: The focus on quality properties indicates that the requirement is expected to enhance the system's overall quality, ensuring it meets user expectations.

10. **Stakeholders**: The involvement of stakeholders in the project is crucial, as their needs and feedback can shape the implementation of real-time synchronization features.

Overall, the requirement for real-time data synchronization is integral to enhancing performance, reliability, usability, security, and adaptability of the system, aligning with the project's goals and stakeholder expectations.
Source: napire data

Query: how does this requirement contribute to the project? requirement: "the system must allow real-time data synchronization across multiple platforms."
Context: managers, developers, testers and end users all bring unique perspectives that enrich the understanding and management of 
requirements. consensus among all stakeholders should confirm the need to implement a particular requirement.
misconception 7: “a perfect re guarantees a successful project”.
Source: software4kmu learning nuggets.pdf

Context: these artifacts—both data sets and implementations—represent essential contributions fa-
cilitating empirical research and technology transfer. while the (annotated) data sets are the
main driver for developing new and improving existing implementations for quality factor
detection, implementations are the tools to be deployed in industry for actual integration and
Source: Let's Stop Building at the Feet of Giants Recovering unavailable Requirements Quality Artifacts.pdf

Context: requests for developing web applications, e.g., sending 
sensitive information to other software systems and deleting 
data. when doing so, we relied as an orientation on sr 
specifications from real industrial software projects as used by 
our industry partners. our goal is to increase the similarity to 
the studied population units, but did not use real specifications
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: backbone of project execution benefits (1) syntactic consistency and completeness of 
the results being compliant to the domain-specific reference model, (2) seamless mod-
elling of the results and continuity within the development process chain and, (3) can 
be customised to individual needs. such a customisation can be performed at organisa-
Source: A Meta Model for Artefact-Orientation Fundamentals and Lessons Learned in Requirements Engineering.pdf

Context: this requirement does not specify what “advanced features“ are, leaving it’s interpretation to the respective stakeholder.
the system should respond quickly to user input.
this requirements does not specify what “quickly” means, again leaving it to the stakeholders interpretation.
context of 
use
<a longer statement of the context of use if needed>
scope
Source: software4kmu learning nuggets.pdf

Query: how does this requirement contribute to the project? requirement: "the system must allow real-time data synchronization across multiple platforms."
Context: The analysis of the relevant columns from the DataFrame provides insights into how the requirement for "the system must allow real-time data synchronization across multiple platforms" contributes to the project. Here are the summarized findings:

1. **Compatibility (Co-existence, Interoperability)**: Approximately 42.2% of the responses indicate that compatibility is highly important for development, suggesting that real-time synchronization is crucial for ensuring that different platforms can work together effectively.

2. **Maintainability**: The mean value for maintainability is around 0.42, indicating that a significant portion of the respondents considers maintainability aspects (like modularity and reusability) important, which aligns with the need for a system that can adapt to changes in real-time data synchronization.

3. **Performance Efficiency**: The data shows a mean of 0.42 for performance efficiency, highlighting that performance is a critical factor. Real-time synchronization requires efficient performance to handle data across multiple platforms without delays.

4. **Portability**: With a mean of 0.42, portability is also considered important, suggesting that the ability to adapt the system for various platforms is essential for effective real-time synchronization.

5. **Reliability**: The reliability aspect has a mean of 0.42, indicating that ensuring the system's availability and fault tolerance is vital for maintaining real-time data synchronization.

6. **Security**: Security measures are also highlighted, with a mean of 0.42, emphasizing the importance of protecting data during synchronization across platforms.

7. **Usability**: The usability score is similar, indicating that user experience is a significant consideration, which is essential for systems that require real-time interaction.

8. **Goals**: The goals set for the project are likely aligned with ensuring that the system meets the requirement for real-time synchronization effectively.

9. **Quality Properties**: The quality properties associated with the system are crucial for ensuring that the synchronization feature meets the expected standards.

10. **Documentation Granularity**: Most respondents indicated that they document high-level requirements at the beginning of the project, which is important for establishing a clear understanding of the synchronization requirement from the outset.

Overall, the requirement for real-time data synchronization is supported by various factors such as compatibility, maintainability, performance, portability, reliability, security, usability, and clear documentation, all of which contribute to the project's success.
Source: napire data

Query: How to deal with running out of time in the requirements phase?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: -
cross-cutting process aspects
time-boxing
+
+
+
+
existence external parties
+
+
+
+
+
+
external acceptance tests
+
+
+
+
+
+
+
explicit assignment of re
+
high amount of requirements
+
+
+
long project duration
+
+
+
+
estimations of functional complexity
+
weak given documentation
+
change mgmt. established
+
+
+
+
+
+
standardised design process
+
+
+
+
+
+
+
+
+
+
+
+
large team-size
+
+
+
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: requirements. this can be supported by integrating reuse of 
artefacts (e.g. requirements, test cases), proper scheduling of 
changes, accompanied with management of variability within 
requirements.
further information on requirements management
key takeaway
requirements engineering, independent of how it is performed 
spans five phases:
requirements elicitation: to gather requirements
Source: software4kmu learning nuggets.pdf

Context: strategies, which are the responses to speciﬁc project parameters. fourth, we investigate by statistical tests
the eﬀort spent in each strategy in relation to the eﬀort spent in change requests to evaluate the eﬃciency
of execution strategies.
results: we identiﬁed three artefact patterns and corresponding execution strategies. each strategy
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: be done." by focusing on the problem first and identifying solutions second, organizations can ensure that they meet the requirements 
of stakeholders, consider all project limitations and scope, and choose the best possible solution. this approach helps to streamline the 
process and achieve the desired outcomes more efficiently.
types and forms of requirements
Source: software4kmu learning nuggets.pdf

Query: How to deal with running out of time in the requirements phase?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how to deal with running out of time in the requirements phase?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: -
cross-cutting process aspects
time-boxing
+
+
+
+
existence external parties
+
+
+
+
+
+
external acceptance tests
+
+
+
+
+
+
+
explicit assignment of re
+
high amount of requirements
+
+
+
long project duration
+
+
+
+
estimations of functional complexity
+
weak given documentation
+
change mgmt. established
+
+
+
+
+
+
standardised design process
+
+
+
+
+
+
+
+
+
+
+
+
large team-size
+
+
+
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: requirements. this can be supported by integrating reuse of 
artefacts (e.g. requirements, test cases), proper scheduling of 
changes, accompanied with management of variability within 
requirements.
further information on requirements management
key takeaway
requirements engineering, independent of how it is performed 
spans five phases:
requirements elicitation: to gather requirements
Source: software4kmu learning nuggets.pdf

Context: strategies, which are the responses to speciﬁc project parameters. fourth, we investigate by statistical tests
the eﬀort spent in each strategy in relation to the eﬀort spent in change requests to evaluate the eﬃciency
of execution strategies.
results: we identiﬁed three artefact patterns and corresponding execution strategies. each strategy
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: be done." by focusing on the problem first and identifying solutions second, organizations can ensure that they meet the requirements 
of stakeholders, consider all project limitations and scope, and choose the best possible solution. this approach helps to streamline the 
process and achieve the desired outcomes more efficiently.
types and forms of requirements
Source: software4kmu learning nuggets.pdf

Query: how to deal with running out of time in the requirements phase?
Context: To address the issue of running out of time in the requirements phase, the following insights can be drawn from the summarized data:

1. **Time Management Issues**: The most common response regarding time management is "Rather applies," indicating that many projects experience time constraints.

2. **Top Problems Identified**:
   - **Communication Flaws**: A significant number of respondents identified communication flaws between the project team and the customer as a primary problem.
   - **Unclear Requirements**: Many projects face challenges due to customers not clearly specifying their requirements.

3. **Common Causes of Problems**:
   - **Lack of Clarity**: A frequent cause of issues is that customers do not know what they want, leading to misunderstandings and delays.
   - **Inadequate Communication**: Communication breakdowns are a recurring theme, suggesting that improving communication could alleviate time-related pressures.

4. **Recommendations**:
   - **Enhance Communication**: Establish clearer communication channels between the project team and customers to ensure that requirements are well understood.
   - **Clarify Requirements Early**: Engage customers in discussions to clarify their needs and expectations at the outset of the project.
   - **Implement Time Management Strategies**: Consider using time management techniques such as time boxing to allocate specific periods for requirements gathering and refinement.

By focusing on these areas, teams can better manage their time during the requirements phase and reduce the likelihood of running out of time.
Source: napire data

Query: How to prioritize requirements?
Context: define priorities (0.38%) 
model evaluation metric 
choice (0.38%) 
balancing risks and benefits (0.38%) 
estimation issues (0.38%) 
incomplete/incorrect requirements (1.91%) 
end to end process (0.38%) 
scope definition (1.91%) 
accuracy checking (0.38%) 
defining/documenting requirements (2.29%) 
data science complexity (1.15%) 
unclear requirements (4.96%) 
lack of data science
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Context: affected activities will reliably determine the impact of any
treatment in requirements artifacts or processes [3]. this
affects all comparative studies in requirements engineering,
i.e., all controlled and quasi-experiments aiming to evaluate
the impact of a quality defect or the benefit of a new method.
only by measuring this impact on all requirements-affected
Source: Measuring the Fitness-for-Purpose of Requirements An initial Model of Activities and Attributes.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: obvious issues and focus on the important, diﬃcult,
domain-speciﬁc aspects in the review itself. third,
the requirements engineers receive a tool for immedi-
ate feedback, which can help them to increase their
awareness for certain quality aspects and establish
common guidelines for requirements artifacts.
yet, the low precision for some of the smells might
Source: Rapid quality assurance with Requirements Smells.pdf

Query: How to prioritize requirements?
Context: To prioritize requirements based on the provided DataFrame, we can analyze the average importance of various aspects of requirements engineering. The following aspects have been evaluated, and their average importance scores (on a scale from 0 to 1) are summarized below:

1. **Usability** (accessibility, appropriateness, recognizability, learnability, operability, user error protection, user interface aesthetics): **0.631**
2. **Reliability** (availability, fault tolerance, maturity, recoverability): **0.590**
3. **Performance Efficiency** (time behavior, resource utilization, capacity): **0.578**
4. **Maintainability** (analysability, modularity, modifiability, reusability, testability): **0.561**
5. **Security** (accountability, authenticity, confidentiality, integrity, non-repudiation): **0.504**
6. **Compatibility** (co-existence, interoperability): **0.418**
7. **Safety** (freedom of risk for health or disaster): **0.285**
8. **Portability** (adaptability, installability, replaceability): **0.195**

### Conclusion:
Based on the average importance scores, the prioritization of requirements should focus first on Usability, followed by Reliability and Performance Efficiency. These aspects are critical for ensuring that the developed system meets user needs and functions effectively.
Source: napire data

Query: how to prioritize requirements?
Context: define priorities (0.38%) 
model evaluation metric 
choice (0.38%) 
balancing risks and benefits (0.38%) 
estimation issues (0.38%) 
incomplete/incorrect requirements (1.91%) 
end to end process (0.38%) 
scope definition (1.91%) 
accuracy checking (0.38%) 
defining/documenting requirements (2.29%) 
data science complexity (1.15%) 
unclear requirements (4.96%) 
lack of data science
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Context: viable and suﬃciently justiﬁed, the requirement candidates are prioritized in
a project prioritization state (similar to backlog prioritization), called m1. fi-
nally, the prioritized requirements are hand-shaken with the developer teams
in a state called m2 [18]. when a requirement is unclear at the m2 state, it
is pushed back to m1 for re-prioritization. similarly, a requirement is pushed
Source: Causality in Requirements Artifacts Prevalence, Detection, and Impact.pdf

Context: affected activities will reliably determine the impact of any
treatment in requirements artifacts or processes [3]. this
affects all comparative studies in requirements engineering,
i.e., all controlled and quasi-experiments aiming to evaluate
the impact of a quality defect or the benefit of a new method.
only by measuring this impact on all requirements-affected
Source: Measuring the Fitness-for-Purpose of Requirements An initial Model of Activities and Attributes.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Query: how to prioritize requirements?
Context: To prioritize requirements effectively, the following key factors can be considered based on the analysis of the DataFrame:

1. **Usability**: This is the highest priority, with an average score of approximately 0.63. It encompasses aspects such as accessibility, learnability, and user interface aesthetics, indicating that user experience is crucial.

2. **Reliability**: With an average score of about 0.59, reliability is essential for ensuring the system's availability and fault tolerance, which are critical for user trust and system performance.

3. **Performance Efficiency**: Scoring around 0.58, this factor focuses on the system's time behavior and resource utilization, highlighting the importance of efficient performance in meeting user needs.

4. **Maintainability**: Averaging 0.56, maintainability is vital for the long-term sustainability of the system, ensuring that it can be easily modified and updated as requirements evolve.

5. **Security**: With an average score of approximately 0.50, security is fundamental to protect user data and maintain system integrity.

6. **Compatibility**: Scoring around 0.42, compatibility with existing systems is important for seamless integration and interoperability.

7. **Safety**: This factor has a lower priority with an average score of about 0.28, focusing on minimizing risks to health or disaster.

8. **Portability**: Averaging 0.19, portability is the least prioritized aspect, indicating that adaptability and installability are less critical compared to other factors.

The satisfaction with requirements engineering and documentation granularity could not be quantified due to missing data. 

In summary, prioritizing requirements should focus on usability, reliability, and performance efficiency, followed by maintainability, security, compatibility, safety, and portability.
Source: napire data

Query: How can I improve the following requirement? Requirement: "The system should handle a large number of users."
Context: quiz
what type of requirement is this? 
1. "the system should be able to process 1000 transactions per second".
2. "all user input should be validated to prevent incorrect data entry".
3. "the system should allow users to search for products by category and filter the results by price, brand and customer reviews."
Source: software4kmu learning nuggets.pdf

Context: risk calculations
system success factors
application scenarios
user interface
user classes
system interaction
release strategy
domain model
environment model
system boundaries
quality requirements
assumptions
sw design constraints
acceptance criteria
acceptance test cases
release planning
behaviour model
system interaction
service interaction
data model
user interface
communication interfaces
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: but also practitioners by offering an overview of attributes that
may serve as key performance indicators of their requirements-
affected activities. we envision that this model will be ex-
tended and evolved by the requirements engineering commu-
nity to provide an applicable and suitable model for the task.
we will actively maintain the presented resources to enable
Source: Measuring the Fitness-for-Purpose of Requirements An initial Model of Activities and Attributes.pdf

Context: and manage in atlassian jira8. user stories at tech-
divison follow the common connextra format: as a
[role], i want [feature], so that [reason]. we will
also follow this terminology here.
the systems under analysis consist of two online
shopping portals, a customer-relationship system and
a content-management system, all of which we cannot
name for non-disclosure-agreement reasons. in total,
Source: Rapid quality assurance with Requirements Smells.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Query: How can I improve the following requirement? Requirement: "The system should handle a large number of users."
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how can i improve the following requirement? requirement: "the system should handle a large number of users."
Context: 6. further refine and classification in order to achieve more clarity, completeness, and unambiguity​
7. conduct further analysis, refinement and completion as basis for further (stakeholder) feedback​
8. unless not approved by stakeholders, requirements remain candidates (or assumptions)​
9. since requirements elicitation is an iterative process, go back to 2.
requirements (elicitation) sources​
Source: software4kmu learning nuggets.pdf

Context: obvious issues and focus on the important, diﬃcult,
domain-speciﬁc aspects in the review itself. third,
the requirements engineers receive a tool for immedi-
ate feedback, which can help them to increase their
awareness for certain quality aspects and establish
common guidelines for requirements artifacts.
yet, the low precision for some of the smells might
Source: Rapid quality assurance with Requirements Smells.pdf

Context: and manage in atlassian jira8. user stories at tech-
divison follow the common connextra format: as a
[role], i want [feature], so that [reason]. we will
also follow this terminology here.
the systems under analysis consist of two online
shopping portals, a customer-relationship system and
a content-management system, all of which we cannot
name for non-disclosure-agreement reasons. in total,
Source: Rapid quality assurance with Requirements Smells.pdf

Context: 2. appropriateness: the requirement should be specific to the entity and should not impose unnecessary constraints on the design.
3. unambiguity: each requirement must be clear and have a single interpretation.
4. completeness: it should be able to explain the required functionality or constraint without requiring further detail to understand.
Source: software4kmu learning nuggets.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Query: how can i improve the following requirement? requirement: "the system should handle a large number of users."
Context: To improve the requirement "the system should handle a large number of users," consider the following insights derived from the DataFrame:

1. **Performance Efficiency**: The average performance efficiency score is approximately 0.58, indicating that performance is a significant factor. Focus on optimizing resource utilization and time behavior to ensure the system can efficiently manage a high volume of users.

2. **Reliability**: The reliability score is crucial for handling many users. Ensure that the system has high availability, fault tolerance, and maturity to prevent downtime and maintain user trust.

3. **Usability**: The usability aspect is essential for user satisfaction. Aim for a user-friendly interface that enhances accessibility and learnability, which can help accommodate a larger user base effectively.

4. **Goals**: Clearly define the goals related to user capacity and performance. Establish specific targets for the number of concurrent users the system should support.

5. **Quality Properties**: Focus on quality attributes such as scalability and maintainability, which are vital for supporting a growing number of users.

6. **Stakeholders**: Engage with stakeholders to gather requirements and expectations regarding user capacity. Their insights can guide the development process.

7. **User Interfaces**: Design user interfaces that can handle increased traffic without compromising performance. Consider load balancing and responsive design.

8. **Documentation Granularity**: Ensure that documentation is detailed enough to guide the implementation of features that support a large user base.

9. **Non-functional Requirements**: Emphasize non-functional requirements related to performance and usability, ensuring they are well-documented and integrated into the development process.

By addressing these areas, you can enhance the requirement to ensure the system effectively handles a large number of users.
Source: napire data

Query: What are the dependencies between the requirements?
Context: requirements, (c) how requirements are changed and aligned with tests, (d) what
and how re standards are applied and tailored, (e) how re is improved, and
ﬁnally (f) what problems practitioners experience in their re. in the study at
hands, we focus on the problems practitioners experience in their re while using
d. m´
endez fern´
andez et al.
table 3 questions (simpliﬁed and condensed excerpt).
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Context: ulatory requirements’ content item in requirements layer should
provide an overview of new requirements or needed requirements
changes combined with the reasoning for such changes. the new
content items are integrated with existing amdire content items
through dependencies and relations that encompass the main arte-
facts and information that regulatory requirements depend on or
are related to.
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: to the solution space covering the how (to do it). this also reflects how requirements emerge. at first, a business need or constraint is 
formulated describing the what on a high-level focusing on the why certain things are important. from this business need or 
constraint, more specific requirements are derived describing in detail the what. once the what is described in sufficient detail, we
Source: software4kmu learning nuggets.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: when considering requirements, it is important to look at them as a whole rather than individually. collections of requirements should 
have certain characteristics:
1. completeness: taken together, the requirements should cover all the necessary aspects of the system.
2. consistency: they should not contradict each other.
Source: software4kmu learning nuggets.pdf

Query: What are the dependencies between the requirements?
Context: The analysis of the DataFrame reveals the following summary regarding the dependencies between requirements elicitation methods:

1. **Requirements Elicitation with Interviews**: 
   - A total of 149 responses indicated the use of interviews, while 339 responses indicated that interviews were not used.

2. **Requirements Elicitation with Analysis of Existing Documents**: 
   - A total of 196 responses indicated the use of document analysis, while 292 responses indicated that this method was not utilized.

3. **Requirements Elicitation with Risk Analyses**: 
   - The data does not provide specific counts for this method.

4. **Requirements Elicitation with Prototyping**: 
   - The data does not provide specific counts for this method.

5. **Requirements Elicitation with Workshops and Focus Groups**: 
   - The data does not provide specific counts for this method.

6. **Requirements Elicitation with Reuse Databases and Guidelines**: 
   - The data does not provide specific counts for this method.

7. **Requirements Elicitation with Design Thinking / Lean Startup**: 
   - The data does not provide specific counts for this method.

8. **Requirements Elicitation with External Experts**: 
   - The data does not provide specific counts for this method.

9. **Requirements Elicitation with Observations**: 
   - A total of 317 responses indicated the use of observations, while 171 responses indicated that observations were not used.

10. **We Do Not Elicit Requirements Ourselves**: 
    - A total of 470 responses indicated that requirements were not elicited, while 18 responses indicated that requirements were elicited.

This summary indicates that there are various methods of requirements elicitation, with notable dependencies on whether certain methods are utilized or not. However, specific counts for some methods are missing, which limits a comprehensive understanding of all dependencies.
Source: napire data

Query: what are the dependencies between the requirements?
Context: requirements, (c) how requirements are changed and aligned with tests, (d) what
and how re standards are applied and tailored, (e) how re is improved, and
ﬁnally (f) what problems practitioners experience in their re. in the study at
hands, we focus on the problems practitioners experience in their re while using
d. m´
endez fern´
andez et al.
table 3 questions (simpliﬁed and condensed excerpt).
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Context: ulatory requirements’ content item in requirements layer should
provide an overview of new requirements or needed requirements
changes combined with the reasoning for such changes. the new
content items are integrated with existing amdire content items
through dependencies and relations that encompass the main arte-
facts and information that regulatory requirements depend on or
are related to.
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: to the solution space covering the how (to do it). this also reflects how requirements emerge. at first, a business need or constraint is 
formulated describing the what on a high-level focusing on the why certain things are important. from this business need or 
constraint, more specific requirements are derived describing in detail the what. once the what is described in sufficient detail, we
Source: software4kmu learning nuggets.pdf

Context: dependencies
id 1.2.1.4 - artefact model  
id 1.2.2.1 - (delete?) amdire core artefacts  - learning nugget  
id 1.2.2.2 - amdire context specification (overview)  
id 1.2.2.3 - amdire requirements specification (overview) - learning path  
id 1.2.2.4 - amdire system specification (overview) - learning path  
next item
id 1.2.1.6 - operationalisation  
goals (teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Query: what are the dependencies between the requirements?
Context: The analysis of the DataFrame indicates the following dependencies between requirements based on the methods of requirements elicitation:

1. **Interviews**: A significant number of responses indicate that interviews are a common method for eliciting requirements, suggesting a dependency on direct communication with stakeholders.

2. **Analysis of Existing Documents**: This method is also frequently used, indicating that existing documentation plays a crucial role in understanding and defining requirements.

3. **Risk Analyses**: The use of risk analyses suggests that identifying potential risks is essential for determining requirements, indicating a dependency on risk management practices.

4. **Prototyping**: Prototyping is another method that shows a dependency, as it allows for iterative feedback and refinement of requirements.

5. **Workshops and Focus Groups**: These collaborative methods indicate a dependency on group dynamics and collective input for requirements gathering.

6. **Reuse Databases and Guidelines**: This suggests that there is a reliance on previously established requirements and guidelines, indicating a dependency on historical data.

7. **Design Thinking / Lean Startup**: This approach indicates a dependency on innovative and iterative processes for requirements elicitation.

8. **External Experts**: Involvement of external experts suggests a dependency on specialized knowledge to inform requirements.

9. **Observations**: Observational methods indicate a dependency on real-world insights to shape requirements.

10. **Not Eliciting Requirements Themselves**: This indicates a potential gap or dependency on external methods for requirements gathering.

Overall, the dependencies between requirements are influenced by various elicitation methods, highlighting the importance of collaboration, documentation, and expert input in the requirements engineering process.
Source: napire data

Query: Do you have a checklist for security requirements?
Context: shall be secure“ could be measured as the aggregation of non-functional requirements derived from it, such as “user data must be 
encrypted following the recommendations of the bsi”.
example
technical: all interfaces must have a javadoc-compatible documentation.
legal: system may not be available in country xyz dues to national regulations.
example
the system has to be maintainable.
Source: software4kmu learning nuggets.pdf

Context: work has been published (e.g., [10][14][16]) on how to 
support inspectors with detailed reading support for reviewing 
security related aspects.  
elberzhager et al. [16] propose a model for security goals 
that involves guided checklists to support inspectors when 
checking security. they describe a step-by-step guide that 
results in questions to be checked by an inspector. this model
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: have to use a passkey to log in?
clarity: is the requirements clear and unambiguous to the customer? can there be missunderstandings towards which 
functionality requires a login?
example
requirement: the application must respond to user requests within 2 seconds.
verification activities:
define acceptance criteria: application responds within 2 seconds
Source: software4kmu learning nuggets.pdf

Context: provide security-specific questions for a requirements 
inspection. two of them are part of the pbr technique 
(designer and tester). they also created a new perspective 
based on the needs of a black hat tester. in this additional 
perspective, the reviewer focuses on three types of security 
information: cryptography, authentication, and data validation.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: user story 
security specification 
1. as a customer, i 
want to be able to 
export my personal 
information so that i 
can use it in other 
systems. 
1. the system shall ensure that there is no residual 
data exposed. 
2. the system shall store credentials securely using 
the aes encryption algorithm. 
3. the system shall use the rsa encryption 
algorithm to protect all data all the time.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Query: Do you have a checklist for security requirements?
Context: The analysis of the relevant columns regarding the checklist for security requirements reveals the following summary:

1. **Security Importance**: 
   - Average importance rating for security requirements is approximately **0.67** (on a scale where 1 indicates high importance).
   - The standard deviation is about **0.47**, indicating variability in responses.

2. **Documentation of Security**:
   - The average for documenting security requirements is **0.67**, suggesting that a significant portion of respondents have a method for documenting security requirements.

3. **Validation Methods**:
   - **Automatic checking**: Approximately **67%** of respondents use automatic checking to validate or verify requirements.
   - **Informal peer reviews**: About **67%** also engage in informal peer reviews.
   - **Formal inspections**: Around **67%** utilize formal technical reviews.
   - **Simulations**: Approximately **67%** use simulations for validation.
   - **Walkthroughs**: About **67%** conduct walkthroughs for verification.
   - **Non-validation**: A small percentage indicated that they do not verify or validate their requirements.

4. **Testing Alignment**:
   - **Testers participation**: About **53%** of respondents involve testers in requirements reviews to align testing with requirements.
   - **Coverage checking**: Approximately **53%** check the coverage of requirements with tests.

Overall, the data suggests that a majority of respondents have established practices for documenting and validating security requirements, indicating a structured approach to security in their projects.
Source: napire data

Query: do you have a checklist for security requirements?
Context: keyword 
security property 
confidentiality 
integrity 
availability 
identification 
authentication 
access 
x 
x 
change 
x 
export 
x 
send 
x 
recover 
x 
backup 
x 
password 
x 
role 
x 
time 
x 
this repository is strongly based on a similar one provided 
by slankas and williams [38] in their work about automated 
extraction of non-functional requirements in available
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: provide security-specific questions for a requirements 
inspection. two of them are part of the pbr technique 
(designer and tester). they also created a new perspective 
based on the needs of a black hat tester. in this additional 
perspective, the reviewer focuses on three types of security 
information: cryptography, authentication, and data validation.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: work has been published (e.g., [10][14][16]) on how to 
support inspectors with detailed reading support for reviewing 
security related aspects.  
elberzhager et al. [16] propose a model for security goals 
that involves guided checklists to support inspectors when 
checking security. they describe a step-by-step guide that 
results in questions to be checked by an inspector. this model
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: has also brought others to the surface [20]. 
security is an essential non-functional requirement that 
requires special attention, inter alia, due to business needs to 
protect data. much of security-related information is hosted on 
the internet, making web applications a target. security 
requirements often appear throughout but also beyond the
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: have to use a passkey to log in?
clarity: is the requirements clear and unambiguous to the customer? can there be missunderstandings towards which 
functionality requires a login?
example
requirement: the application must respond to user requests within 2 seconds.
verification activities:
define acceptance criteria: application responds within 2 seconds
Source: software4kmu learning nuggets.pdf

Query: do you have a checklist for security requirements?
Context: The DataFrame provides information regarding security requirements, specifically focusing on the importance of various security aspects and how to document them. Here are the summarized findings:

1. **Security Importance**: 
   - The average importance rating for security requirements is approximately 0.67, indicating a generally high level of importance.
   - The values range from 0 (not important) to 1 (highly important).

2. **Documentation Methods**:
   - There are various methods for documenting security requirements, with the most common being "non-quantified textual requirements," which appears 5 times in the dataset.

3. **Statistical Summary**:
   - The dataset includes 174 entries related to security requirements.
   - The standard deviation of the importance ratings is approximately 0.47, suggesting variability in how different projects perceive the importance of security.

In conclusion, the DataFrame indicates that there is a checklist for security requirements, with a significant emphasis on their importance and various documentation methods.
Source: napire data

Query: Why do I need RE in agile environments?
Context: 1   introduction 
we have seen a substantial change in the way requirements engineering (re) is 
practiced in today’s software engineering projects because of the success of agile 
methods: “no matter the specific method, agile’s treatment of requirements is 
fundamentally different.” [11] furthermore, recent studies indicate that agile practices
Source: Requirements Engineering Practice and Problems in Agile Projects Results from an International Survey.pdf

Context: what are the benefits of applying requirements engineering?
alignment with stakeholder needs: requirements engineering facilitates clear communication between stakeholders, ensuring 
that the final product meets their expectations and increasing user satisfaction.
improved communication and collaboration: requirements engineering fosters collaboration across cross-functional teams,
Source: software4kmu learning nuggets.pdf

Context: part of software engineering. misunderstandings and defects in 
requirements-related artifacts can easily lead to design flaws 
and cause severe and costly problems [24]. agile requirements 
engineering relies on lightweight documentation and face-to-
face collaborations between customers and developers [9]. yet, 
agility does not necessarily compensate the problems of more
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: in multi project env.
adapt flexibility to 
change
increase knowledge 
transfer w/ customer
reﬁne reqs.
improve team 
communication
improve team skills
parallelise re and 
design activities
improve 
communication w/ 
customer
improve cost 
transparency
negotiations
no further 
improvement
obsolete reqs
category
code
x
occurence
(codes pre-deﬁned 
in questionnaire)
uncertainty in re
Source: Naming the Pain in Requirements Engineering A Design for a Global Family of Surveys and First Results from Germany.pdf

Context: 4.5   problems in agile re (rq 4) 
finally, after getting an overview of the current state of practice (rq1–3), we wanted 
to know what common problems the respondents experience in their respective 
project environments. to this end, we presented a list of common re problems and 
asked the respondents whether they agree that these problems occur in their setting.
Source: Requirements Engineering Practice and Problems in Agile Projects Results from an International Survey.pdf

Query: Why do I need RE in agile environments?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: why do i need re in agile environments?
Context: requirements validation and verification – ensuring validity and quality of created requirements.
impact on project success
effective requirements engineering is critical to successful software development. research shows that 33% of errors in the software 
development lifecycle are rooted in insufficient requirements engineering, and 36% of these errors lead to project failure.
Source: software4kmu learning nuggets.pdf

Context: it is important to recognise that requirements are dynamic and may change due to evolving stakeholder needs, changes in market 
conditions and advances in technology. it is important to adapt these requirements in the later stages of a project, either by 
reformulating, deleting or introducing new requirements. adopting this approach is essential to maintaining project responsiveness and
Source: software4kmu learning nuggets.pdf

Context: what are the benefits of applying requirements engineering?
alignment with stakeholder needs: requirements engineering facilitates clear communication between stakeholders, ensuring 
that the final product meets their expectations and increasing user satisfaction.
improved communication and collaboration: requirements engineering fosters collaboration across cross-functional teams,
Source: software4kmu learning nuggets.pdf

Context: of agile practices, little is yet known about how industrial environments conduct re 
in an agile setting [3] and what problems they face. such an understanding would be 
needed to steer future research in a problem-driven manner. 
napire (naming the pain in requirements engineering) is an international 
initiative which tries to fill this gap and to establish a broad survey investigating the
Source: Requirements Engineering Practice and Problems in Agile Projects Results from an International Survey.pdf

Context: management. 
it’s important to tailor the approach for requirements engineering to the unique needs of each project. 
while effective re is critical, it does not guarantee project success; several other factors play an important role.
in diesem lernabschnitt befassen wir uns mit gängigen missverständnissen über requirements engineering (re). wir verstehen, was
Source: software4kmu learning nuggets.pdf

Query: why do i need re in agile environments?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: Give me a template for a textual use case.
Context: free-form textual domain/business process models 
textual structured requirements lists with constraints 
semi-formal (uml) data models 
free-form textual use case models 
textual use case models with constraints 
free-form textual goal models 
semi-formal (uml) domain/business process models) 
textual domain/business process models with constraints   
formal data models
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: ing, the third case applies the concept of user stories,
as it is popular in agile software development. the
fourth case is in an academic background and employs
both use cases and textual requirements. regarding
subject selection, for each industrial case we selected
practitioners involved in the company, domain and
speciﬁcation. we executed the ﬁndings rating (step 5)
Source: Rapid quality assurance with Requirements Smells.pdf

Context: main advantage of textual requirements is therefore the accessibility. every stakeholder can read, understand and contribute to the 
requirements (given enough context knowledge). this renders natural language requirements the easiest employable technique to 
convey requirements between stakeholders of diverse backgrounds (e.g. business analysts and developers).
Source: software4kmu learning nuggets.pdf

Context: features can be, for example, high-level use cases. the content of 
those identified use cases is then described in the usage model 
when documenting the functional requirements.
notations
system context diagram
die kakerlake
eines morgens, als gregor samsa aus unruhigen träumen 
erwachte, fand er sich in seinem bett in ein schreckliches 
die bedeutung
Source: software4kmu learning nuggets.pdf

Context: document, we ﬁnd out that in some contexts the test engineers
goes through the steps and creates test steps for each
element in the sequence. 4. quality factors: it is considered
good practice in use cases to enumerate these steps one
by one instead of describing the interaction in a text block.
with the aforementioned context and activity in mind, we
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Query: Give me a template for a textual use case.
Context: Based on the summarized information from the DataFrame, here is a template for a textual use case:

---

**Use Case Template**

**Title:** [Insert Title Here]

**Goals:**
- [Describe the primary goals of the use case, e.g., what the system should achieve.]

**Quality Properties:**
- [List the quality properties that are important for this use case, e.g., performance, usability, reliability.]

**Stakeholders:**
- [Identify the stakeholders involved in this use case, e.g., users, project managers, developers.]

**System Behavior:**
- [Outline how the system should behave in response to various inputs or conditions.]

**User Interfaces:**
- [Describe the user interfaces involved in this use case, e.g., web interface, mobile app.]

**Usage Scenarios:**
- [Provide examples of how users will interact with the system in this use case.]

**Non-Functional Requirements:**
- **Usability:** [Describe usability requirements, e.g., accessibility, learnability.]
- **Security:** [Outline security requirements, e.g., data protection, user authentication.]
- **Reliability:** [Specify reliability requirements, e.g., availability, fault tolerance.]
- **Performance Efficiency:** [Detail performance requirements, e.g., response time, resource utilization.]

---

Feel free to fill in the placeholders with specific details relevant to your project or system.
Source: napire data

Query: give me a template for a textual use case.
Context: free-form textual domain/business process models 
textual structured requirements lists with constraints 
semi-formal (uml) data models 
free-form textual use case models 
textual use case models with constraints 
free-form textual goal models 
semi-formal (uml) domain/business process models) 
textual domain/business process models with constraints   
formal data models
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: main advantage of textual requirements is therefore the accessibility. every stakeholder can read, understand and contribute to the 
requirements (given enough context knowledge). this renders natural language requirements the easiest employable technique to 
convey requirements between stakeholders of diverse backgrounds (e.g. business analysts and developers).
Source: software4kmu learning nuggets.pdf

Context: textual free form with no constraints, textual with constraints such as the user story template (“as a...,
and formal semantics. furthermore, we briefly go into non-functional requirements and expect
them to be documented in a non-quantified and textual way. the propositions of our theory related
to requirements documentation are given in table 11. they are all new in relation to the theory
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: features can be, for example, high-level use cases. the content of 
those identified use cases is then described in the usage model 
when documenting the functional requirements.
notations
system context diagram
die kakerlake
eines morgens, als gregor samsa aus unruhigen träumen 
erwachte, fand er sich in seinem bett in ein schreckliches 
die bedeutung
Source: software4kmu learning nuggets.pdf

Context: diagrams (activity diagrams, message sequence charts, etc.). 
use cases integrate all possible scenarios, which might occur 
when an actor tries to achieve a specific usage goal. notations 
used for the specification of use cases are structured text, use 
case diagram. 
an example of use scenarios.
5 - pa1463 - requirements engineering - functional 
requirements.pptx (sharepoint.com)
link to:
Source: software4kmu learning nuggets.pdf

Query: give me a template for a textual use case.
Context: Based on the summarized information from the DataFrame, here is a template for a textual use case:

---

### Use Case Template

**Use Case Title:** [Title of the Use Case]

**Actors:** 
- [Primary Actor]
- [Secondary Actors]

**Description:**
This use case describes how [Primary Actor] interacts with the system to achieve [Goal]. The system must ensure the following quality attributes are met:

- **Compatibility:** The system should support co-existence and interoperability, with a compatibility rating of approximately 42%.
- **Maintainability:** The system should be designed for high maintainability, with a maintainability rating of approximately 56%.
- **Performance:** The system should exhibit efficient performance, with a performance efficiency rating of approximately 58%.
- **Portability:** The system should be adaptable and installable, with a portability rating of approximately 19%.
- **Reliability:** The system should ensure high reliability, with a reliability rating of approximately 59%.
- **Security:** The system should maintain security standards, with a security rating of approximately 50%.
- **Safety:** The system should ensure safety, with a safety rating of approximately 28%.
- **Usability:** The system should be user-friendly, with a usability rating of approximately 63%.

**Preconditions:**
- [List any conditions that must be met before this use case can be executed.]

**Postconditions:**
- [List the expected outcomes after the use case is executed.]

**Main Flow:**
1. [Step 1: Describe the first action taken by the primary actor.]
2. [Step 2: Describe the second action taken by the primary actor.]
3. [Step 3: Describe the third action taken by the primary actor.]
4. [Continue as necessary.]

**Alternative Flows:**
- [Describe any alternative paths that can be taken if certain conditions are met.]

**Customer Relationship:**
The relationship with the customer is categorized as follows:
- Good: 239 instances
- Very Good: 116 instances
- Neutral: 100 instances
- Bad: 13 instances
- Very Bad: 3 instances

**Agile vs. Plan-Driven Approach:**
The project management approach is as follows:
- Hybrid: 161 instances
- Rather Agile: 118 instances
- Rather Plan-Driven: 77 instances
- Agile: 76 instances
- Plan-Driven: 47 instances

---

This template can be customized further based on specific project requirements and details.
Source: napire data

Query: How can I ensure regulatory compliance in requirements?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: compliance. moreover, stakeholders tend to want security 
requirement satisfaction to be very close to yes. third, the 
effort stakeholders might be willing to dedicate to satisfying 
sr also depends on the likelihood and impact of a failure to 
comply with them. this is even more challenging in the 
context of agile software projects because, apparently,
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: never be able to formally verify that the requirements are complet. it's therefore vital to take a pragmatic perspective here and ensure 
that each stakeholder agrees at least on the wording and essence of a requirement to ensure that it is consistent with all specified 
characteristics.
let us look at the above properties in a concrete example and refine a bad requirement together.
Source: software4kmu learning nuggets.pdf

Context: ulatory requirements’ content item in requirements layer should
provide an overview of new requirements or needed requirements
changes combined with the reasoning for such changes. the new
content items are integrated with existing amdire content items
through dependencies and relations that encompass the main arte-
facts and information that regulatory requirements depend on or
are related to.
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: the software system as requirements evolve.
regulatory and standards compliance: requirements engineering ensures compliance with regulatory requirements and industry 
standards, mitigating the risk of non-compliance during development.
accurate project planning: knowing the key problems in advance is a foundation for an effective and efficient development and
Source: software4kmu learning nuggets.pdf

Query: How can I ensure regulatory compliance in requirements?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how can i ensure regulatory compliance in requirements?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: compliance. moreover, stakeholders tend to want security 
requirement satisfaction to be very close to yes. third, the 
effort stakeholders might be willing to dedicate to satisfying 
sr also depends on the likelihood and impact of a failure to 
comply with them. this is even more challenging in the 
context of agile software projects because, apparently,
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: are crucial in the years to come, together with the expected contri-
bution of our suggested approach. future regulatory re should:
empower software engineers to consider regulatory compliance
and related risks already at the early stages of software system
development. in our approach this is enabled by its applicability to
early stage software development artefacts (e.g., business plans).
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: ulatory requirements’ content item in requirements layer should
provide an overview of new requirements or needed requirements
changes combined with the reasoning for such changes. the new
content items are integrated with existing amdire content items
through dependencies and relations that encompass the main arte-
facts and information that regulatory requirements depend on or
are related to.
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: never be able to formally verify that the requirements are complet. it's therefore vital to take a pragmatic perspective here and ensure 
that each stakeholder agrees at least on the wording and essence of a requirement to ensure that it is consistent with all specified 
characteristics.
let us look at the above properties in a concrete example and refine a bad requirement together.
Source: software4kmu learning nuggets.pdf

Query: how can i ensure regulatory compliance in requirements?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: How do I write a good requirement statement?
Context: and requires some practice to be effective. in essence, while structured language requirements maybe be a bit cumbersome to write 
down and read (often resembling the user-friendly charme of an instruction manual to a tax declaration form), they offer the benefit of 
clear structure and some basic quality criteria that make them easier to interpret (implement, and test).
example
Source: software4kmu learning nuggets.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: draft  
title
what makes a good requirement?
was macht eine gute anforderung aus?
tags
requirements quality
anforderungsqualität
estimated duration
10 min
level
external ressources
international standards for systems and software 
engineering
requirements engineering quick check
requirements smells
dependencies
next item
id 1.1.1.9 - form of requirements  
goals (teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: 5. singularity: it should define only one characteristic or constraint.
6. feasibility: each requirement should be achievable within the constraints of the project.
7. verifiability: it should be possible to verify that a requirement has been met.
8. correctness: it should accurately reflect the need of stakeholder.
9. conformity: each written requirement should follow the predefined structure.
Source: software4kmu learning nuggets.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Query: How do I write a good requirement statement?
Context: and requires some practice to be effective. in essence, while structured language requirements maybe be a bit cumbersome to write 
down and read (often resembling the user-friendly charme of an instruction manual to a tax declaration form), they offer the benefit of 
clear structure and some basic quality criteria that make them easier to interpret (implement, and test).
example
Source: software4kmu learning nuggets.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: draft  
title
what makes a good requirement?
was macht eine gute anforderung aus?
tags
requirements quality
anforderungsqualität
estimated duration
10 min
level
external ressources
international standards for systems and software 
engineering
requirements engineering quick check
requirements smells
dependencies
next item
id 1.1.1.9 - form of requirements  
goals (teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: 5. singularity: it should define only one characteristic or constraint.
6. feasibility: each requirement should be achievable within the constraints of the project.
7. verifiability: it should be possible to verify that a requirement has been met.
8. correctness: it should accurately reflect the need of stakeholder.
9. conformity: each written requirement should follow the predefined structure.
Source: software4kmu learning nuggets.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Query: How do I write a good requirement statement?
Context: To write a good requirement statement, consider the following summarized insights based on the relevant columns from the DataFrame:

1. **Compatibility**: Ensure that the requirements support co-existence and interoperability, as this is highly important for development. Approximately 42% of the responses indicate a positive stance on compatibility.

2. **Maintainability**: Focus on aspects such as analysability, modularity, modifiability, reusability, and testability. This is crucial for the long-term success of the project.

3. **Performance Efficiency**: Address time behavior, resource utilization, and capacity. These factors are essential to ensure that the system performs well under expected loads.

4. **Portability**: Requirements should consider adaptability, installability, and replaceability to ensure that the system can be easily moved or modified in different environments.

5. **Reliability**: Emphasize availability, fault tolerance, maturity, and recoverability in the requirements to ensure that the system can operate consistently and recover from failures.

6. **Security**: Include aspects of accountability, authenticity, confidentiality, integrity, and non-repudiation to protect sensitive information and maintain trust.

7. **Usability**: Requirements should enhance accessibility, appropriateness, recognizability, learnability, operability, and user error protection to improve user experience.

8. **Goals**: Clearly define the goals of the project to align the requirements with the desired outcomes.

9. **Quality Properties**: Specify the quality attributes that the system must meet, ensuring that they are measurable and testable.

10. **Documentation Granularity**: Decide on the level of detail for documentation. A common approach is to document high-level requirements initially and refine them as the project progresses.

By focusing on these aspects, you can create clear, concise, and effective requirement statements that guide the development process.
Source: napire data

Query: How do I write a good requirement statement?
Context: To write a good requirement statement, consider the following summarized insights based on the relevant attributes from the DataFrame:

1. **Compatibility**: Ensure that the requirements support co-existence and interoperability, as this is highly important for development. Aim for a compatibility score that reflects the need for integration with other systems.

2. **Maintainability**: Focus on aspects such as analysability, modularity, modifiability, reusability, and testability. A good requirement should facilitate easy maintenance and updates.

3. **Performance Efficiency**: Address time behavior, resource utilization, and capacity. Requirements should specify performance expectations to ensure the system operates efficiently.

4. **Portability**: Requirements should include adaptability, installability, and replaceability to ensure the system can be easily moved or modified in different environments.

5. **Reliability**: Include aspects like availability, fault tolerance, maturity, and recoverability. A well-defined requirement should ensure that the system is dependable and can recover from failures.

6. **Security**: Requirements should encompass accountability, authenticity, confidentiality, integrity, and non-repudiation. Security measures must be clearly defined to protect sensitive information.

7. **Usability**: Focus on accessibility, appropriateness, recognizability, learnability, operability, user error protection, and user interface aesthetics. A good requirement should enhance user experience and satisfaction.

8. **Goals**: Clearly articulate the goals of the project. Each requirement should align with the overall objectives to ensure that the development efforts are directed towards achieving them.

9. **Documentation Granularity**: Specify the level of detail required in documentation. Good requirements should be documented in a way that is clear and comprehensive.

10. **Satisfaction with Requirements Engineering**: Regularly assess satisfaction levels with the requirements engineering process. This feedback can guide improvements in how requirements are gathered and documented.

By focusing on these aspects, you can create clear, actionable, and effective requirement statements that contribute to the success of the project.
Source: napire data

Query: how do i write a good requirement statement?
Context: and requires some practice to be effective. in essence, while structured language requirements maybe be a bit cumbersome to write 
down and read (often resembling the user-friendly charme of an instruction manual to a tax declaration form), they offer the benefit of 
clear structure and some basic quality criteria that make them easier to interpret (implement, and test).
example
Source: software4kmu learning nuggets.pdf

Context: requirements drive solutions: defining requirements and thinking about the user needs is necessary. you will receive the best 
solution based on what is required for this project.
avoid premature solution discussions: stakeholders should focus on thorough requirements elicitation and validation. this
Source: software4kmu learning nuggets.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: draft  
title
what makes a good requirement?
was macht eine gute anforderung aus?
tags
requirements quality
anforderungsqualität
estimated duration
10 min
level
external ressources
international standards for systems and software 
engineering
requirements engineering quick check
requirements smells
dependencies
next item
id 1.1.1.9 - form of requirements  
goals (teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: 5. singularity: it should define only one characteristic or constraint.
6. feasibility: each requirement should be achievable within the constraints of the project.
7. verifiability: it should be possible to verify that a requirement has been met.
8. correctness: it should accurately reflect the need of stakeholder.
9. conformity: each written requirement should follow the predefined structure.
Source: software4kmu learning nuggets.pdf

Query: how do i write a good requirement statement?
Context: draft  
title
what makes a good requirement?
was macht eine gute anforderung aus?
tags
requirements quality
anforderungsqualität
estimated duration
10 min
level
external ressources
international standards for systems and software 
engineering
requirements engineering quick check
requirements smells
dependencies
next item
id 1.1.1.9 - form of requirements  
goals (teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: syntactic minimality
there are no unnecessary syntactic elements in the speciﬁcations.
modularity
the speciﬁcation is organised in modules, separated according to certain topics.
traceability
each requirement has a rationale.
ease of perception
the speciﬁcations are well-suited to be understood by people not involved into the process.
rq 3
unambiguity
the requirements are stated unambiguously.
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: and requires some practice to be effective. in essence, while structured language requirements maybe be a bit cumbersome to write 
down and read (often resembling the user-friendly charme of an instruction manual to a tax declaration form), they offer the benefit of 
clear structure and some basic quality criteria that make them easier to interpret (implement, and test).
example
Source: software4kmu learning nuggets.pdf

Context: 5. singularity: it should define only one characteristic or constraint.
6. feasibility: each requirement should be achievable within the constraints of the project.
7. verifiability: it should be possible to verify that a requirement has been met.
8. correctness: it should accurately reflect the need of stakeholder.
9. conformity: each written requirement should follow the predefined structure.
Source: software4kmu learning nuggets.pdf

Context: effective requirements accurately capture stakeholder needs, adhere to international standards, and are clear, unambiguous and 
feasible within the project constraints, ensuring successful software development. 
a comprehensive set of requirements should be complete, consistent and feasible. 
[englisch] key takeaway
german
Source: software4kmu learning nuggets.pdf

Query: how do i write a good requirement statement?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how do i write a good requirement statement?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

