Query: How do I write a good requirement statement?
Context: and requires some practice to be effective. in essence, while structured language requirements maybe be a bit cumbersome to write 
down and read (often resembling the user-friendly charme of an instruction manual to a tax declaration form), they offer the benefit of 
clear structure and some basic quality criteria that make them easier to interpret (implement, and test).
example
Source: software4kmu learning nuggets.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: draft  
title
what makes a good requirement?
was macht eine gute anforderung aus?
tags
requirements quality
anforderungsqualität
estimated duration
10 min
level
external ressources
international standards for systems and software 
engineering
requirements engineering quick check
requirements smells
dependencies
next item
id 1.1.1.9 - form of requirements  
goals (teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: 5. singularity: it should define only one characteristic or constraint.
6. feasibility: each requirement should be achievable within the constraints of the project.
7. verifiability: it should be possible to verify that a requirement has been met.
8. correctness: it should accurately reflect the need of stakeholder.
9. conformity: each written requirement should follow the predefined structure.
Source: software4kmu learning nuggets.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Query: How do I write a good requirement statement?
Context: To write a good requirement statement, consider the following summarized insights based on the relevant attributes from the DataFrame:

1. **Compatibility**: Ensure that the requirements support co-existence and interoperability, with a mean importance score of approximately 0.42, indicating a moderate emphasis on this aspect.

2. **Maintainability**: Focus on aspects such as analysability, modularity, modifiability, reusability, and testability, which are crucial for the long-term sustainability of the requirements.

3. **Performance Efficiency**: Address time behavior, resource utilization, and capacity, as these factors are essential for the system's operational effectiveness.

4. **Portability**: Requirements should facilitate adaptability, installability, and replaceability, ensuring that the system can be easily moved or modified.

5. **Reliability**: Emphasize availability, fault tolerance, maturity, and recoverability to ensure that the system can perform consistently under expected conditions.

6. **Security**: Incorporate elements of accountability, authenticity, confidentiality, integrity, and non-repudiation to protect sensitive information and maintain trust.

7. **Safety**: Address risks related to health or disaster, ensuring that the system operates without endangering users.

8. **Usability**: Focus on accessibility, learnability, and user interface aesthetics to enhance user experience and satisfaction.

9. **Goals**: Clearly define the objectives that the requirements aim to achieve, ensuring alignment with stakeholder expectations.

10. **Quality Properties**: Establish criteria for quality, which may include performance, reliability, and usability, to guide the evaluation of the requirements.

By integrating these elements into your requirement statements, you can create clear, actionable, and effective requirements that meet stakeholder needs and project goals.
Source: napire data

Query: how do i write a good requirement statement?
Context: draft  
title
what makes a good requirement?
was macht eine gute anforderung aus?
tags
requirements quality
anforderungsqualität
estimated duration
10 min
level
external ressources
international standards for systems and software 
engineering
requirements engineering quick check
requirements smells
dependencies
next item
id 1.1.1.9 - form of requirements  
goals (teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: syntactic minimality
there are no unnecessary syntactic elements in the speciﬁcations.
modularity
the speciﬁcation is organised in modules, separated according to certain topics.
traceability
each requirement has a rationale.
ease of perception
the speciﬁcations are well-suited to be understood by people not involved into the process.
rq 3
unambiguity
the requirements are stated unambiguously.
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: and requires some practice to be effective. in essence, while structured language requirements maybe be a bit cumbersome to write 
down and read (often resembling the user-friendly charme of an instruction manual to a tax declaration form), they offer the benefit of 
clear structure and some basic quality criteria that make them easier to interpret (implement, and test).
example
Source: software4kmu learning nuggets.pdf

Context: 5. singularity: it should define only one characteristic or constraint.
6. feasibility: each requirement should be achievable within the constraints of the project.
7. verifiability: it should be possible to verify that a requirement has been met.
8. correctness: it should accurately reflect the need of stakeholder.
9. conformity: each written requirement should follow the predefined structure.
Source: software4kmu learning nuggets.pdf

Context: effective requirements accurately capture stakeholder needs, adhere to international standards, and are clear, unambiguous and 
feasible within the project constraints, ensuring successful software development. 
a comprehensive set of requirements should be complete, consistent and feasible. 
[englisch] key takeaway
german
Source: software4kmu learning nuggets.pdf

Query: how do i write a good requirement statement?
Context: To write a good requirement statement, consider the following summarized insights based on the relevant attributes from the DataFrame:

1. **Compatibility**: Ensure that the requirements support co-existence and interoperability, as this is highly important for development. The average score for compatibility is approximately 0.42, indicating a moderate emphasis on this aspect.

2. **Maintainability**: Focus on aspects such as analysability, modularity, modifiability, reusability, and testability. This is crucial for the long-term success of the project.

3. **Performance Efficiency**: Address time behavior, resource utilization, and capacity. Performance efficiency is essential for user satisfaction and system effectiveness.

4. **Portability**: Requirements should consider adaptability, installability, and replaceability to ensure that the system can be easily moved or modified.

5. **Reliability**: Emphasize availability, fault tolerance, maturity, and recoverability in the requirements to ensure that the system can perform consistently under expected conditions.

6. **Security**: Incorporate elements of accountability, authenticity, confidentiality, integrity, and non-repudiation to protect sensitive information and maintain trust.

7. **Safety**: Address freedom from risks related to health or disasters, ensuring that the system does not pose any threats to users.

8. **Usability**: Focus on accessibility, learnability, operability, and user error protection to enhance the user experience.

9. **Goals**: Clearly define the goals of the project to align the requirements with the desired outcomes.

10. **Quality Properties**: Ensure that the requirements reflect the necessary quality attributes, with a significant portion of responses indicating a focus on these properties.

By integrating these aspects into your requirement statements, you can create clear, actionable, and effective requirements that guide the development process.
Source: napire data

Query: What is the level of detail for a requirement that I must provide as a business analyst?
Context: coverage of abstraction levels. requirements at different levels of detail, ranging 
from business goals to fine-grained technical requirements (e.g. concerning the system 
hardware), need to be included in the requirements document. high-level requirements 
provide a justification for detailed requirements and support the understandability of
Source: A Meta Model for Artefact-Orientation Fundamentals and Lessons Learned in Requirements Engineering.pdf

Context: detailed guidance on the concepts to use when specifying the contents. at
the same time, however, those more detailed models constrain the ease of use
as they implicate a higher learning curve. obviously, simpler artefact mod-
els have the opposite eﬀect. whereas they are easy to apply and understand,
they cannot give detailed guidance on creating detailed, syntactically consis-
Source: Artefact-based Requirements Engineering The AMDiRE Approach.pdf

Context: 1. the business analyst has the responsibility for the context speciﬁcation
and is expected to have the necessary domain knowledge, e.g. regarding
the business processes, typical stakeholders, or constraints and rules.
2. the requirements engineer has the responsibility for the requirements
speciﬁcation and serves also as a mediator between the business analyst
and the system architect.
Source: Artefact-based Requirements Engineering The AMDiRE Approach.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: 2. appropriateness: while the refined requirement is clearer, it may still be too broad and open to interpretation. let's make it more 
specific.
refined requirement: the system must include a menu bar with easily recognisable icons and labels for navigation, providing direct 
access to frequently used functions.
Source: software4kmu learning nuggets.pdf

Query: What is the level of detail for a requirement that I must provide as a business analyst?
Context: The analysis of the DataFrame regarding the level of detail required for requirements as a business analyst reveals the following insights:

1. **Responsibility for Requirements Elicitation**: The most common role responsible for requirements elicitation is the Business Analyst, with 115 occurrences.

2. **Documentation Granularity**: The DataFrame does not provide specific numerical values for documentation granularity, but it indicates that there are various approaches to documenting requirements.

3. **Elicitation Methods**:
   - **Interviews**: This method is utilized, but the exact frequency is not specified in the summary.
   - **Analysis of Existing Documents**: This method is also employed, though specific details are not provided.
   - **Prototyping**: This method is used, but again, the frequency is not detailed.
   - **Workshops and Focus Groups**: This method is mentioned, but specific usage details are not available.
   - **Reuse Databases and Guidelines**: This method is indicated, but without specific frequency data.
   - **Design Thinking / Lean Startup**: This method has a mean usage of approximately 0.20, indicating that it is used by some respondents but not widely.

Overall, the level of detail for requirements should include a combination of interviews, analysis of existing documents, and possibly prototyping, workshops, and guidelines, with a strong emphasis on the role of the Business Analyst in the elicitation process. However, specific numerical values or averages for the level of detail are not provided in the DataFrame.
Source: napire data

Query: what is the level of detail for a requirement that i must provide as a business analyst?
Context: coverage of abstraction levels. requirements at different levels of detail, ranging 
from business goals to fine-grained technical requirements (e.g. concerning the system 
hardware), need to be included in the requirements document. high-level requirements 
provide a justification for detailed requirements and support the understandability of
Source: A Meta Model for Artefact-Orientation Fundamentals and Lessons Learned in Requirements Engineering.pdf

Context: large
1. incomplete and / or hidden requirements
17 (44%)
2. moving targets (changing goals, business pro-
cesses and / or requirements)
17 (44%)
3. communication ﬂaws between project team and
the customer
15 (38%)
4. time boxing / not enough time in general
14 (36%)
5. underspeciﬁed requirements that are too abstract
11 (28%)
plan-
driven
small
1. incomplete and / or hidden requirements
7 (64%)
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: 1. the business analyst has the responsibility for the context speciﬁcation
and is expected to have the necessary domain knowledge, e.g. regarding
the business processes, typical stakeholders, or constraints and rules.
2. the requirements engineer has the responsibility for the requirements
speciﬁcation and serves also as a mediator between the business analyst
and the system architect.
Source: Artefact-based Requirements Engineering The AMDiRE Approach.pdf

Context: instructions on how to describe use cases at munich re.
data collection. following the process as described in
sec. iii-b, the approach contained four phases: first, we
received and analysed a full set of 51 requirements engineering
artifacts that were created in the project, including use cases,
business rules and others. in the ﬁrst, 90-minutes workshop
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Query: what is the level of detail for a requirement that i must provide as a business analyst?
Context: The analysis of the DataFrame provides the following insights regarding the level of detail for requirements that a business analyst must provide:

1. **Who Responsible for Requirements Elicitation**: The most common role responsible for requirements elicitation is the Business Analyst, with 115 occurrences.

2. **Documentation Granularity**: The level of detail in documentation varies, but specific statistics on granularity are not provided in the summary.

3. **Elicitation Methods**:
   - **Requirements Elicitation with Interviews**: This method is frequently used, indicating a preference for direct communication.
   - **Requirements Elicitation with Analysis of Existing Documents**: This method is also utilized, suggesting that reviewing existing materials is part of the process.
   - **Requirements Elicitation with Prototyping**: This method is employed, indicating that creating prototypes is a common practice for gathering requirements.
   - **Requirements Elicitation with Workshops and Focus Groups**: This method is used, showing that collaborative sessions are part of the elicitation process.
   - **Requirements Elicitation with External Experts**: This method is occasionally used, indicating that external insights are sought.
   - **Requirements Elicitation with Observations**: This method has a mean usage of approximately 35%, suggesting that observing users is a relevant approach but not the most common.

Overall, the level of detail for requirements should involve a combination of interviews, document analysis, prototyping, workshops, and possibly observations, with a strong emphasis on collaboration and iterative refinement.
Source: napire data

Query: Do all stakeholders need to review the requirements?
Context: ments artifacts, however, need to involve all relevant
stakeholders [65], who must manually read and un-
derstand each requirements artifact. moreover, they
are diﬃcult to perform. they require a high domain
knowledge and expertise from the reviewers [65] and
the quality of their outcome depends on the quality of
the reviewer [75]. on top of all this, reviewers could
Source: Rapid quality assurance with Requirements Smells.pdf

Context: 6. further refine and classification in order to achieve more clarity, completeness, and unambiguity​
7. conduct further analysis, refinement and completion as basis for further (stakeholder) feedback​
8. unless not approved by stakeholders, requirements remain candidates (or assumptions)​
9. since requirements elicitation is an iterative process, go back to 2.
requirements (elicitation) sources​
Source: software4kmu learning nuggets.pdf

Context: interested in the quality of the software system, while product 
managers also care about sustainability of the business model and 
balancing costs and quality of the product. 
in any case, capturing the stakeholders explicitly is important as 
they are the source for various information with respect to the 
operational context of a system and requirements (e.g. end users
Source: software4kmu learning nuggets.pdf

Context: compliance. moreover, stakeholders tend to want security 
requirement satisfaction to be very close to yes. third, the 
effort stakeholders might be willing to dedicate to satisfying 
sr also depends on the likelihood and impact of a failure to 
comply with them. this is even more challenging in the 
context of agile software projects because, apparently,
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: potential processes and use cases) for which corresponding
stakeholders are available. this way, the approach can be
conducted entirely including the creation of the business and
the requirements speciﬁcation. we deﬁne three main groups
of participants as study subjects:
1) industry participants: experts from industry responsible
proceedings of ease 2011
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Query: Do all stakeholders need to review the requirements?
Context: Based on the analysis of the DataFrame, the following insights can be drawn regarding stakeholder involvement in reviewing requirements:

1. **Stakeholder Count**: There are two distinct stakeholder groups identified, with a total of 455 entries (349 for one group and 106 for another). This indicates a significant number of stakeholders involved in the process.

2. **Responsibilities for Requirements Elicitation**: The responsibilities for requirements elicitation are distributed among various roles:
   - The **Business Analyst** is the most frequently responsible role, with 108 entries.
   - Other roles include **Project Lead / Project Manager** (73), **Requirements Engineer** (63), **Product Owner** (62), and **Product Manager** (41).
   - There are also contributions from **Customer** (29), **Architect** (19), **Other** (18), **Developer** (17), and **Scrum Master** (8).
   - Notably, there are 15 entries indicating that "Nobody has the primary responsibility."

### Conclusion:
The data suggests that multiple stakeholders are involved in the requirements elicitation process, indicating that it is essential for all relevant stakeholders to review the requirements to ensure comprehensive coverage and alignment with project goals.
Source: napire data

Query: do all stakeholders need to review the requirements?
Context: ments artifacts, however, need to involve all relevant
stakeholders [65], who must manually read and un-
derstand each requirements artifact. moreover, they
are diﬃcult to perform. they require a high domain
knowledge and expertise from the reviewers [65] and
the quality of their outcome depends on the quality of
the reviewer [75]. on top of all this, reviewers could
Source: Rapid quality assurance with Requirements Smells.pdf

Context: compliance. moreover, stakeholders tend to want security 
requirement satisfaction to be very close to yes. third, the 
effort stakeholders might be willing to dedicate to satisfying 
sr also depends on the likelihood and impact of a failure to 
comply with them. this is even more challenging in the 
context of agile software projects because, apparently,
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: 6. further refine and classification in order to achieve more clarity, completeness, and unambiguity​
7. conduct further analysis, refinement and completion as basis for further (stakeholder) feedback​
8. unless not approved by stakeholders, requirements remain candidates (or assumptions)​
9. since requirements elicitation is an iterative process, go back to 2.
requirements (elicitation) sources​
Source: software4kmu learning nuggets.pdf

Context: interested in the quality of the software system, while product 
managers also care about sustainability of the business model and 
balancing costs and quality of the product. 
in any case, capturing the stakeholders explicitly is important as 
they are the source for various information with respect to the 
operational context of a system and requirements (e.g. end users
Source: software4kmu learning nuggets.pdf

Context: visualisation shows, there are stakeholders that will be directly 
interacting with the system, such as end users, and others that will 
maybe not interacting with the system. while all stakeholders 
constitute a potential source for requirements, the those interacting 
with the system will be used also in other content items to explore,
Source: software4kmu learning nuggets.pdf

Query: do all stakeholders need to review the requirements?
Context: Based on the analysis of the DataFrame, the following insights can be drawn regarding stakeholder involvement in reviewing requirements:

1. **Who is Responsible for Requirements Elicitation**: The most common role responsible for requirements elicitation is the Business Analyst, indicating a central figure in the process.

2. **Stakeholder Involvement**: The data suggests that there are multiple stakeholders involved in the requirements process, but specific details on their roles are not quantified in the summary.

3. **Documentation Granularity**: The level of documentation varies, but the specifics are not detailed in the summary.

4. **Elicitation Methods**:
   - A significant portion of the projects involves refining requirements through several iterations.
   - There is also a dedicated project phase for refining requirements in some cases.
   - Interviews and workshops are common methods for requirements elicitation, indicating active stakeholder engagement.

5. **External Experts**: The involvement of external experts in the requirements elicitation process is noted, although the frequency is relatively low.

In conclusion, while not all stakeholders may need to review the requirements, there is a clear indication that stakeholder involvement is crucial in the requirements elicitation process, particularly through interviews and workshops. Therefore, it is beneficial for stakeholders to be engaged in reviewing requirements to ensure comprehensive understanding and alignment.
Source: napire data

Query: How much time do I need to spend for Requirements Engineering?
Context: x 997 
industrial practices of requirements engineering for ml-enabled systems in brazil 
sbes’24, september 30 – october 04, 2024, curitiba, pr 
1 - 2 years 
3 - 4 years 
5 - 6 years 
7 - 8 years 
+9 years 
< 1 year 
data scientist 
business analyst 
project lead / project manager 
developer 
test manager / tester 
requirements engineer 
(a) participants' company size (n = 72)
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: comprehension on its industry readiness and objectively 
measuring effort and obtained benefits. the average 
application effort was reasonably low (15.5 hours) when 
compared to the obtained benefits (reducing defect rates by 
46 percent for requirements and 50 percent for designs). 
while the defect rate results were similar to those mentioned
Source: Supporting Defect Causal Analysis in Practice with Cross-Company Data on Causes of Requirements Engineering Problems.pdf

Context: presentations and workshop to evaluate the requirements against the customer’s expectations
roleplay to show-case the systems usage and respective requirements
prototyping of parts of systems, especially if the overall project is very large
involved stakeholders
at this phase of the requirement engineering lifecycle, the main responsibles are requirements engineers. they coordinate validation
Source: software4kmu learning nuggets.pdf

Context: 5 min
level
external ressources
research describing the importance of re
dependencies
id 1.1.1.1 - frequently encountered misconceptions  
next item
id 1.1.1.3 - what is a requirement?  
goals (teaching 
perspective)
to provide an understanding of the role and significance of requirements engineering in software 
development
content description 
(teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: 5 min
level
external ressources
dependencies
next item
id 1.1.1.2 - what is requirements engineering?  
goals (teaching 
perspective)
to clarify misconceptions and make a clear distinction between the myths and realities of requirements 
engineering in order to provide an interesting introduction into the following topics.
content description 
(teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Query: How much time do I need to spend for Requirements Engineering?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how much time do i need to spend for requirements engineering?
Context: x 997 
industrial practices of requirements engineering for ml-enabled systems in brazil 
sbes’24, september 30 – october 04, 2024, curitiba, pr 
1 - 2 years 
3 - 4 years 
5 - 6 years 
7 - 8 years 
+9 years 
< 1 year 
data scientist 
business analyst 
project lead / project manager 
developer 
test manager / tester 
requirements engineer 
(a) participants' company size (n = 72)
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: comprehension on its industry readiness and objectively 
measuring effort and obtained benefits. the average 
application effort was reasonably low (15.5 hours) when 
compared to the obtained benefits (reducing defect rates by 
46 percent for requirements and 50 percent for designs). 
while the defect rate results were similar to those mentioned
Source: Supporting Defect Causal Analysis in Practice with Cross-Company Data on Causes of Requirements Engineering Problems.pdf

Context: presentations and workshop to evaluate the requirements against the customer’s expectations
roleplay to show-case the systems usage and respective requirements
prototyping of parts of systems, especially if the overall project is very large
involved stakeholders
at this phase of the requirement engineering lifecycle, the main responsibles are requirements engineers. they coordinate validation
Source: software4kmu learning nuggets.pdf

Context: 5 min
level
external ressources
research describing the importance of re
dependencies
id 1.1.1.1 - frequently encountered misconceptions  
next item
id 1.1.1.3 - what is a requirement?  
goals (teaching 
perspective)
to provide an understanding of the role and significance of requirements engineering in software 
development
content description 
(teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: 5 min
level
external ressources
dependencies
next item
id 1.1.1.2 - what is requirements engineering?  
goals (teaching 
perspective)
to clarify misconceptions and make a clear distinction between the myths and realities of requirements 
engineering in order to provide an interesting introduction into the following topics.
content description 
(teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Query: how much time do i need to spend for requirements engineering?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: How to perform elicitation?
Context: students.
6.1.3. data collection procedure
we used a 6-step procedure to collect the data
necessary for answering the research questions.
1. collect requirements artifact(s) for each case. we
retrieved the requirements artifacts to be ana-
lyzed in each case. for one case, the require-
ments were stored in microsoft word documents.
for the other cases, this involved extracting the
Source: Rapid quality assurance with Requirements Smells.pdf

Context: requirements analysis – understanding requirements and 
achieving consensus among stakeholders.
requirements specification – structuring, modelling, 
documenting requirements.
requirements validation and verification – ensuring validity and 
quality of created requirements.
requirements management – documenting, tracking, 
prioritizing, and controlling changes to requirements.
Source: software4kmu learning nuggets.pdf

Context: shaping of ml-enabled systems. 
the survey also revealed that practitioners typically use traditional require- 
ments elicitation techniques (interviews, prototyping, scenarios, workshops, and 
observation). comparing the results to the elicitation techniques reported for 
traditional re [29], an observable difference is that requirements workshops are
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: first run, however, showed that other elicitation techniques are also widely in use [42]. therefore,
we widened the choice of elicitation techniques as shown in table 9. to make it consistent with
common terminology, we adopted the elicitation techniques as described in the swebok [7]. table 9
also notes whether the corresponding proposition was supported in the first run or if it is a new
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: 3. conduct structured elicitation by applying elicitation (and creativity) techniques​
 such as interviews, questionnaires… (more on techniques below)
4. document requirements, for example with the help of checklists and templates (e.g. volere or self-made)​
5. structure and transfer to models in order to provide a more structured representation: what belongs where?​
Source: software4kmu learning nuggets.pdf

Query: How to perform elicitation?
Context: To perform requirements elicitation, the following methods can be utilized based on the summarized data:

1. **Interviews**: This method is frequently used, with a total of 339 instances recorded, indicating a mean usage of approximately 0.69.
2. **Analysis of Existing Documents**: This method is also commonly employed, contributing to the overall elicitation efforts.
3. **Risk Analyses**: Engaging in risk analyses is another method that has been utilized.
4. **Prototyping**: Prototyping is included as a method for gathering requirements.
5. **Workshops and Focus Groups**: These collaborative sessions are part of the elicitation process.
6. **Reuse Databases and Guidelines**: Utilizing existing resources for requirements gathering is noted.
7. **Design Thinking / Lean Startup**: This innovative approach is applied in the elicitation process.
8. **External Experts**: Consulting with external experts is part of the elicitation strategy.
9. **Observations**: Observational methods are also used to gather requirements.
10. **Not Eliciting Requirements**: There are instances where requirements are not elicited, with a total of 18 occurrences.

These methods highlight a comprehensive approach to requirements elicitation, emphasizing the importance of various techniques in gathering necessary information for project development.
Source: napire data

Query: how to perform elicitation?
Context: students.
6.1.3. data collection procedure
we used a 6-step procedure to collect the data
necessary for answering the research questions.
1. collect requirements artifact(s) for each case. we
retrieved the requirements artifacts to be ana-
lyzed in each case. for one case, the require-
ments were stored in microsoft word documents.
for the other cases, this involved extracting the
Source: Rapid quality assurance with Requirements Smells.pdf

Context: requirements analysis – understanding requirements and 
achieving consensus among stakeholders.
requirements specification – structuring, modelling, 
documenting requirements.
requirements validation and verification – ensuring validity and 
quality of created requirements.
requirements management – documenting, tracking, 
prioritizing, and controlling changes to requirements.
Source: software4kmu learning nuggets.pdf

Context: shaping of ml-enabled systems. 
the survey also revealed that practitioners typically use traditional require- 
ments elicitation techniques (interviews, prototyping, scenarios, workshops, and 
observation). comparing the results to the elicitation techniques reported for 
traditional re [29], an observable difference is that requirements workshops are
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: first run, however, showed that other elicitation techniques are also widely in use [42]. therefore,
we widened the choice of elicitation techniques as shown in table 9. to make it consistent with
common terminology, we adopted the elicitation techniques as described in the swebok [7]. table 9
also notes whether the corresponding proposition was supported in the first run or if it is a new
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: 3. conduct structured elicitation by applying elicitation (and creativity) techniques​
 such as interviews, questionnaires… (more on techniques below)
4. document requirements, for example with the help of checklists and templates (e.g. volere or self-made)​
5. structure and transfer to models in order to provide a more structured representation: what belongs where?​
Source: software4kmu learning nuggets.pdf

Query: how to perform elicitation?
Context: To perform requirements elicitation, the following methods are commonly utilized based on the summarized data:

1. **Interviews**: This method is the most frequently used, with a total of 339 instances.
2. **Analysis of Existing Documents**: This approach is also popular, with 292 occurrences.
3. **Workshops and Focus Groups**: Engaging stakeholders through workshops has been recorded 277 times.
4. **Prototyping**: This method is used in 235 cases to gather requirements.
5. **Observations**: Observational techniques have been applied 171 times.
6. **Design Thinking / Lean Startup**: This innovative approach has been utilized 97 times.
7. **Risk Analyses**: This method has been employed 96 times to identify potential risks in requirements.
8. **Reuse Databases and Guidelines**: This approach has been used 85 times to leverage existing knowledge.
9. **External Experts**: Consulting external experts has occurred 84 times for additional insights.

These methods highlight the diverse strategies employed in requirements elicitation to ensure comprehensive understanding and gathering of stakeholder needs.
Source: napire data

Query: How to prioritize all requirements my team proposed in order to deliver the most value quicker?
Context: be done." by focusing on the problem first and identifying solutions second, organizations can ensure that they meet the requirements 
of stakeholders, consider all project limitations and scope, and choose the best possible solution. this approach helps to streamline the 
process and achieve the desired outcomes more efficiently.
types and forms of requirements
Source: software4kmu learning nuggets.pdf

Context: tive programming environments that can be used to process data and create ml 
models, appear as the most used tool for documenting requirements. again, this 
requirements overthinking (0.38%) 
project (0.38%) 
domain complexity (0.38%) strategic alignments (0.38%) 
solution uniqueness (0.38%) 
method (0.38%) 
difficulties in value creation (0.38%) 
define priorities (0.38%)
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: improve the analysis to be more detailed.  
more frequent meetings with the customer to align expectations. 
requirements reviews and frequent releases. 
improving the quality of the requirements documentation, or improving elicitation methods. 
developing requirements according to suggestions of the mps-sw reference model. 
improvement of the artefacts; adoption of software inspections.
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: define priorities (0.38%) 
model evaluation metric 
choice (0.38%) 
balancing risks and benefits (0.38%) 
estimation issues (0.38%) 
incomplete/incorrect requirements (1.91%) 
end to end process (0.38%) 
scope definition (1.91%) 
accuracy checking (0.38%) 
defining/documenting requirements (2.29%) 
data science complexity (1.15%) 
unclear requirements (4.96%) 
lack of data science
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: viable and suﬃciently justiﬁed, the requirement candidates are prioritized in
a project prioritization state (similar to backlog prioritization), called m1. fi-
nally, the prioritized requirements are hand-shaken with the developer teams
in a state called m2 [18]. when a requirement is unclear at the m2 state, it
is pushed back to m1 for re-prioritization. similarly, a requirement is pushed
Source: Causality in Requirements Artifacts Prevalence, Detection, and Impact.pdf

Query: How to prioritize all requirements my team proposed in order to deliver the most value quicker?
Context: To prioritize the requirements proposed by your team in order to deliver the most value quickly, you can consider the following summarized information based on the average importance of various factors:

1. **Usability** (Average Importance: 0.631) - Focus on enhancing user accessibility, recognizability, learnability, and overall user interface aesthetics.
2. **Reliability** (Average Importance: 0.590) - Ensure the system is available, fault-tolerant, and mature, which is crucial for maintaining user trust.
3. **Performance Efficiency** (Average Importance: 0.578) - Optimize time behavior, resource utilization, and capacity to improve system responsiveness.
4. **Maintainability** (Average Importance: 0.561) - Design for analysability, modularity, modifiability, reusability, and testability to facilitate future updates and maintenance.
5. **Security** (Average Importance: 0.504) - Implement measures for accountability, authenticity, confidentiality, integrity, and non-repudiation to protect user data.
6. **Compatibility** (Average Importance: 0.418) - Ensure the system can coexist and interoperate with other systems effectively.
7. **Safety** (Average Importance: 0.285) - Address risks related to health or disaster to ensure user safety.
8. **Portability** (Average Importance: 0.195) - Focus on adaptability, installability, and replaceability to enhance the system's flexibility.

The satisfaction levels regarding requirements engineering were not available for analysis. Prioritizing the requirements based on the average importance scores can help your team focus on delivering the most valuable features first.
Source: napire data

Query: how to prioritize all requirements my team proposed in order to deliver the most value quicker?
Context: be done." by focusing on the problem first and identifying solutions second, organizations can ensure that they meet the requirements 
of stakeholders, consider all project limitations and scope, and choose the best possible solution. this approach helps to streamline the 
process and achieve the desired outcomes more efficiently.
types and forms of requirements
Source: software4kmu learning nuggets.pdf

Context: tive programming environments that can be used to process data and create ml 
models, appear as the most used tool for documenting requirements. again, this 
requirements overthinking (0.38%) 
project (0.38%) 
domain complexity (0.38%) strategic alignments (0.38%) 
solution uniqueness (0.38%) 
method (0.38%) 
difficulties in value creation (0.38%) 
define priorities (0.38%)
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: improve the analysis to be more detailed.  
more frequent meetings with the customer to align expectations. 
requirements reviews and frequent releases. 
improving the quality of the requirements documentation, or improving elicitation methods. 
developing requirements according to suggestions of the mps-sw reference model. 
improvement of the artefacts; adoption of software inspections.
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: viable and suﬃciently justiﬁed, the requirement candidates are prioritized in
a project prioritization state (similar to backlog prioritization), called m1. fi-
nally, the prioritized requirements are hand-shaken with the developer teams
in a state called m2 [18]. when a requirement is unclear at the m2 state, it
is pushed back to m1 for re-prioritization. similarly, a requirement is pushed
Source: Causality in Requirements Artifacts Prevalence, Detection, and Impact.pdf

Context: define priorities (0.38%) 
model evaluation metric 
choice (0.38%) 
balancing risks and benefits (0.38%) 
estimation issues (0.38%) 
incomplete/incorrect requirements (1.91%) 
end to end process (0.38%) 
scope definition (1.91%) 
accuracy checking (0.38%) 
defining/documenting requirements (2.29%) 
data science complexity (1.15%) 
unclear requirements (4.96%) 
lack of data science
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Query: how to prioritize all requirements my team proposed in order to deliver the most value quicker?
Context: To prioritize the requirements proposed by your team in order to deliver the most value quickly, you can consider the following summarized information based on the average importance of various factors:

1. **Usability** (Average Importance: 0.63) - Focus on enhancing user accessibility, recognizability, learnability, and overall user interface aesthetics.
2. **Reliability** (Average Importance: 0.59) - Ensure the system is available, fault-tolerant, and mature, which is crucial for maintaining user trust.
3. **Performance Efficiency** (Average Importance: 0.58) - Optimize time behavior, resource utilization, and capacity to improve system responsiveness.
4. **Maintainability** (Average Importance: 0.56) - Design for analysability, modularity, modifiability, reusability, and testability to facilitate future updates and maintenance.
5. **Security** (Average Importance: 0.50) - Implement measures for accountability, authenticity, confidentiality, integrity, and non-repudiation to protect user data.
6. **Compatibility** (Average Importance: 0.42) - Ensure the system can coexist and interoperate with other systems effectively.
7. **Safety** (Average Importance: 0.28) - Address risks related to health or disaster to ensure user safety.
8. **Portability** (Average Importance: 0.19) - Focus on adaptability, installability, and replaceability to enhance the system's flexibility.

The columns related to satisfaction with requirements engineering and necessary changes did not provide sufficient data for analysis. 

By prioritizing the requirements based on these average importance values, your team can focus on delivering features that provide the most value to users quickly.
Source: napire data

Query: Can you generate user stories from the following requirement? Requirement: "The mobile app should allow users to reset their passwords using either email or SMS."
Context: ia4. 
passwords 
treatment 
must 
include 
complex passphrases, options to recover and 
reset the password and default passwords not 
allowed. 
for each user story, the generated reading technique 
focuses the reviewer to verify whether its security 
specifications contain any of the defect types. this happens 
when reviewers check the security specifications against the
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: we analyzed over 1,000 user stories containing roughly
28,000 words. for rq 2.2, we met with an experienced
scrum master and a long-term developer, who have
worked on several projects for techdivision.
6http://www.magento.com
7http://www.typo3.org
8https://atlassian.com/software/jira
case d: university of stuttgart. the requirements of
case d were created by 52 groups of three 2nd-year
Source: Rapid quality assurance with Requirements Smells.pdf

Context: smartphones.
anforderungen:
blättern-funktionalität für benutzer, um durch produktkategorien zu navigieren.
suchfunktion, die es den nutzern ermöglicht, bestimmte artikel effizient zu finden.
die funktion „in den warenkorb“ ermöglicht es den nutzern, artikel zum kauf zusammenzustellen.
checkout-prozess für benutzer, um transaktionen abzuschließen.
Source: software4kmu learning nuggets.pdf

Context: user stories.
with regards to whether a requirements engineering standard is mandatory or practised (see
proposition p 26 stating that requirements engineering standards are neither practised nor
mandatory is not supported by the data. quite to the contrary, it seems that the standards are
practised in most organisations regardless whether they are mandatory or not. the two answers
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: not taking the recommended actions. two authors coded these explanations independently
and came to an absolute agreement on the types of reasons for non-recovery. when the
corresponding author’s email address was no longer used, we reached out via personal contacts
or social networks like twitter and linkedin.
3.4. evaluation
Source: Let's Stop Building at the Feet of Giants Recovering unavailable Requirements Quality Artifacts.pdf

Query: Can you generate user stories from the following requirement? Requirement: "The mobile app should allow users to reset their passwords using either email or SMS."
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: can you generate user stories from the following requirement? requirement: "the mobile app should allow users to reset their passwords using either email or sms."
Context: ia4. 
passwords 
treatment 
must 
include 
complex passphrases, options to recover and 
reset the password and default passwords not 
allowed. 
for each user story, the generated reading technique 
focuses the reviewer to verify whether its security 
specifications contain any of the defect types. this happens 
when reviewers check the security specifications against the
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: secure transactions by encrypting sensitive information and providing a confirmation email for each purchase. additionally, users 
have the option to track their orders and view their purchase history. the platform also features a user-friendly interface with intuitive 
navigation and responsive design for optimal viewing on various devices, including desktops, laptops, tablets, and smartphones.
Source: software4kmu learning nuggets.pdf

Context: we analyzed over 1,000 user stories containing roughly
28,000 words. for rq 2.2, we met with an experienced
scrum master and a long-term developer, who have
worked on several projects for techdivision.
6http://www.magento.com
7http://www.typo3.org
8https://atlassian.com/software/jira
case d: university of stuttgart. the requirements of
case d were created by 52 groups of three 2nd-year
Source: Rapid quality assurance with Requirements Smells.pdf

Context: user stories.
with regards to whether a requirements engineering standard is mandatory or practised (see
proposition p 26 stating that requirements engineering standards are neither practised nor
mandatory is not supported by the data. quite to the contrary, it seems that the standards are
practised in most organisations regardless whether they are mandatory or not. the two answers
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: we mitigated this threat
by directly asking the study subjects for the corresponding account names and deviations from the actual
naming convention. second, change requests may not have been accounted for politically motivated reasons.
change requests that were not billed for whatever reason appear in the account system with negative eﬀort.
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Query: can you generate user stories from the following requirement? requirement: "the mobile app should allow users to reset their passwords using either email or sms."
Context: Based on the summarized information from the DataFrame, here are some user stories generated from the requirement "the mobile app should allow users to reset their passwords using either email or SMS":

1. **As a user**, I want to reset my password using my email address, so that I can regain access to my account if I forget my password.

2. **As a user**, I want to receive a password reset link via email, so that I can securely change my password.

3. **As a user**, I want to reset my password using SMS, so that I can quickly access my account without needing to check my email.

4. **As a user**, I want to receive a verification code via SMS to reset my password, ensuring that my account remains secure.

5. **As a user**, I want to be notified if my password reset request is successful, so that I can be assured that my account is secure.

These user stories focus on the usability and security aspects of the password reset feature, aligning with the summarized data on usability and security from the DataFrame.
Source: napire data

Query: How to structure big projects?
Context: to 20 person years as small-scale projects, from 20 to 120 person years as medium-scale projects, and above
120 person years as large-scale projects. the analysed projects are labelled with numbers and it is also
mentioned whether they are ﬁnished or still ongoing (in terms of further releases or increments). all of the
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: activities such as project organisation and management (e.g. effort
estimation), design, and (acceptance) testing.
the bas are essential for effective collaboration because they con-
tain relevant information that supplies different groups with different
needs. they materialise mainly as electronic or printed documents and,
for the most part, are produced and used by humans. being central re-
Source: An investigation of causes and effects of trust in Boundary Artefacts.pdf

Context: be done." by focusing on the problem first and identifying solutions second, organizations can ensure that they meet the requirements 
of stakeholders, consider all project limitations and scope, and choose the best possible solution. this approach helps to streamline the 
process and achieve the desired outcomes more efficiently.
types and forms of requirements
Source: software4kmu learning nuggets.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: with the project lead, we eliminated artifacts that were ir-
relevant to the guidelines and broke the remaining artifacts
down into entities. furthermore, when the project artifacts
did not follow the guideline rules, we extended the model
by the entities that were mentioned in the guidelines. then,
the project lead explained the current process of the project,
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Query: How to structure big projects?
Context: To structure big projects effectively, the following key aspects can be summarized from the DataFrame:

1. **Project Approach**: 
   - A mix of Agile and Plan-driven methodologies is utilized, with a notable preference for Agile approaches.

2. **Responsibility for Requirements Elicitation**: 
   - Various roles are involved in requirements elicitation, including Business Analysts, Project Managers, and Developers. However, there are instances where no single person has primary responsibility.

3. **Documentation Practices**: 
   - Documentation granularity varies, with some teams documenting high-level requirements initially and refining them later, while others do not document requirements at all.

4. **Requirements Elicitation Techniques**: 
   - Common techniques include interviews, analysis of existing documents, and workshops. There is also a significant number of teams that do not elicit requirements themselves.

5. **Iteration in Requirements Refinement**: 
   - Many teams engage in refining requirements through several iterations, indicating a flexible approach to project management.

6. **Dedicated Project Phases for Requirements**: 
   - Some teams have specific phases dedicated to requirements elicitation, which can enhance clarity and focus.

7. **Change Management**: 
   - The ability to work with change requests is present, allowing teams to adapt to evolving project needs.

8. **Verification and Validation**: 
   - There are teams that do not verify or validate their requirements, which could pose risks to project success.

9. **Stakeholder Engagement**: 
   - Engaging stakeholders effectively is crucial, as indicated by the variety of roles involved in the requirements process.

10. **Challenges in Requirements Management**: 
    - Issues such as unclear requirements and insufficient documentation practices can hinder project success.

These insights suggest that a structured approach to project management should include clear roles, effective documentation practices, iterative refinement of requirements, and active stakeholder engagement to navigate the complexities of large projects.
Source: napire data

Query: how to structure big projects?
Context: to 20 person years as small-scale projects, from 20 to 120 person years as medium-scale projects, and above
120 person years as large-scale projects. the analysed projects are labelled with numbers and it is also
mentioned whether they are ﬁnished or still ongoing (in terms of further releases or increments). all of the
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: activities such as project organisation and management (e.g. effort
estimation), design, and (acceptance) testing.
the bas are essential for effective collaboration because they con-
tain relevant information that supplies different groups with different
needs. they materialise mainly as electronic or printed documents and,
for the most part, are produced and used by humans. being central re-
Source: An investigation of causes and effects of trust in Boundary Artefacts.pdf

Context: be done." by focusing on the problem first and identifying solutions second, organizations can ensure that they meet the requirements 
of stakeholders, consider all project limitations and scope, and choose the best possible solution. this approach helps to streamline the 
process and achieve the desired outcomes more efficiently.
types and forms of requirements
Source: software4kmu learning nuggets.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: with the project lead, we eliminated artifacts that were ir-
relevant to the guidelines and broke the remaining artifacts
down into entities. furthermore, when the project artifacts
did not follow the guideline rules, we extended the model
by the entities that were mentioned in the guidelines. then,
the project lead explained the current process of the project,
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Query: how to structure big projects?
Context: To structure big projects effectively, the following insights can be drawn from the summarized data:

1. **Project Approach**:
   - The majority of projects lean towards being **Agile** (55) or **Hybrid** (51), indicating a preference for flexibility and iterative development.

2. **Responsibility for Requirements Elicitation**:
   - The **Business Analyst** is the most common role responsible for requirements elicitation (48), followed by **Project Leads** (33) and **Product Owners** (28). This suggests a collaborative approach involving multiple roles.

3. **Documentation Practices**:
   - Most teams document high-level requirements initially and refine them into detailed requirements as needed (142). This iterative documentation process is crucial for adapting to project changes.

4. **Iterations in Requirements Elicitation**:
   - A significant number of projects (141) engage in refining requirements through several iterations, emphasizing the importance of adaptability in project management.

5. **Dedicated Project Phases**:
   - A majority of projects (134) do not have a specifically dedicated phase for refining requirements, suggesting that requirements are often integrated throughout the project lifecycle.

6. **Elicitation Techniques**:
   - **Interviews** (142), **Workshops** (123), and **Analysis of existing documents** (115) are commonly used methods for requirements elicitation, highlighting the importance of diverse techniques in gathering comprehensive requirements.

7. **Satisfaction with Requirements Engineering**:
   - A large portion of respondents report being **Satisfied** (164) with the requirements engineering process, indicating that current practices are generally effective.

8. **Reasons for Satisfaction**:
   - Satisfaction stems from meeting customer needs, achieving expected results, and the effectiveness of detailed documentation in ensuring compliance with requirements.

These insights suggest that successful project structuring involves a flexible approach, clear roles in requirements elicitation, iterative documentation, and the use of diverse elicitation techniques to ensure stakeholder needs are met effectively.
Source: napire data

Query: How can we summarize the requirement? Requirement: "The system should allow admins to generate weekly performance reports for all team members."
Context: ulatory requirements’ content item in requirements layer should
provide an overview of new requirements or needed requirements
changes combined with the reasoning for such changes. the new
content items are integrated with existing amdire content items
through dependencies and relations that encompass the main arte-
facts and information that regulatory requirements depend on or
are related to.
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: the structuring of requirement candidates helps handling overlaping requirements and duplicates between requirements effectively, and, on the other hand, it helps building a hierarchy of goals to 
visualize their interdependencies facilitating conflict resolution, constraint detection and resource sharing. a more detailed explanation of goals is given in later learning nuggets.
Source: software4kmu learning nuggets.pdf

Context: system lifecycle. the main tasks of requirements management are:
attribution (adding meta information to requirements for an effective control​
)
assessment and prioritisation​
tracing (describe and follow the lifecycle of a requirement) ​
versioning (describe and follow changes within the requirements​
)
reporting (collecting, analysing, and visualising information about re​
)
Source: software4kmu learning nuggets.pdf

Context: for the other cases, this involved extracting the
requirements from other systems, either a propri-
etary requirements management tool (resulting
in a list of html ﬁles), or the online task manage-
ment system jira, which led to a set of comma-
separated values ﬁles. for the student projects,
the students handed in their ﬁnal artifacts either
as a single pdf or as a pdf with the general
Source: Rapid quality assurance with Requirements Smells.pdf

Context: requirement?”, “what is the purpose?” “what happens if that requirement is not implemented?”).
goals of requirements verification and validation
the main goal is to ensuring all stakeholders agree on requirements, building the basis for liability (e.g. lastenheft). this ensures, 
that the customer gets what they expect
Source: software4kmu learning nuggets.pdf

Query: How can we summarize the requirement? Requirement: "The system should allow admins to generate weekly performance reports for all team members."
Context: To summarize the requirement "The system should allow admins to generate weekly performance reports for all team members," we can analyze the following relevant information from the DataFrame:

1. **Performance Efficiency**: The average importance rating for performance efficiency is approximately 0.58, indicating a moderate emphasis on performance-related requirements.

2. **Documentation Granularity**: The data suggests that documentation practices vary, with a notable frequency of responses indicating satisfaction with the documentation process.

3. **Requirements Elicitation Methods**: Various methods for eliciting requirements were employed, including interviews, analysis of existing documents, prototyping, and workshops. This indicates a comprehensive approach to gathering requirements.

4. **Satisfaction with Requirements Engineering**: The majority of respondents (195 out of 488) reported being satisfied with the requirements engineering process, suggesting a positive perception of how requirements are managed.

5. **Variability in Responses**: The standard deviation for performance efficiency ratings is 0.49, indicating variability in how different projects prioritize performance efficiency.

6. **Minimum and Maximum Ratings**: The ratings for performance efficiency range from 0 to 1, showing that some projects do not prioritize performance while others do.

7. **Interquartile Range**: The 25th percentile is 0, and the 75th percentile is 1, indicating that half of the projects have a performance efficiency rating of 0 or 1, which reflects a split in focus on performance.

8. **Categorical Response Distribution**: The satisfaction levels regarding requirements engineering show a distribution across five categories, with "Satisfied" being the most common response.

This summary provides insights into how performance reporting requirements are perceived and managed within the context of requirements engineering.
Source: napire data

Query: how can we summarize the requirement? requirement: "the system should allow admins to generate weekly performance reports for all team members."
Context: quiz
what type of requirement is this? 
1. "the system should be able to process 1000 transactions per second".
2. "all user input should be validated to prevent incorrect data entry".
3. "the system should allow users to search for products by category and filter the results by price, brand and customer reviews."
Source: software4kmu learning nuggets.pdf

Context: the structuring of requirement candidates helps handling overlaping requirements and duplicates between requirements effectively, and, on the other hand, it helps building a hierarchy of goals to 
visualize their interdependencies facilitating conflict resolution, constraint detection and resource sharing. a more detailed explanation of goals is given in later learning nuggets.
Source: software4kmu learning nuggets.pdf

Context: ulatory requirements’ content item in requirements layer should
provide an overview of new requirements or needed requirements
changes combined with the reasoning for such changes. the new
content items are integrated with existing amdire content items
through dependencies and relations that encompass the main arte-
facts and information that regulatory requirements depend on or
are related to.
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: for the other cases, this involved extracting the
requirements from other systems, either a propri-
etary requirements management tool (resulting
in a list of html ﬁles), or the online task manage-
ment system jira, which led to a set of comma-
separated values ﬁles. for the student projects,
the students handed in their ﬁnal artifacts either
as a single pdf or as a pdf with the general
Source: Rapid quality assurance with Requirements Smells.pdf

Context: +
+
+
+
+
+
+
+
+
+
+
+
large team-size
+
+
+
high team distribution
+
+
+
+
weakly experiences team
+
-
legend:
+
= need for action
-
= ability to act
similarly, the technical knowledge of the stakeholders negatively impacts the quality requirements. when
specifying quality requirements, reference models and reference values are often missing. quality require-
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Query: how can we summarize the requirement? requirement: "the system should allow admins to generate weekly performance reports for all team members."
Context: To summarize the requirement "the system should allow admins to generate weekly performance reports for all team members," we can analyze the following relevant aspects from the DataFrame:

1. **Performance Efficiency**: The average importance rating for performance efficiency is approximately 0.58, indicating a moderate emphasis on this aspect in the requirements.

2. **Usability**: The usability aspect is also crucial, with a similar average rating of around 0.58, suggesting that user-friendliness is a significant consideration.

3. **Documentation Granularity**: The data indicates that documentation practices are varied, with a mean value of 0.58, reflecting a balanced approach to documentation.

4. **Goals**: The goals associated with the requirements are likely to be well-defined, as indicated by the data.

5. **Quality Properties**: Quality properties are emphasized, with a mean value of 0.58, suggesting that maintaining quality is a priority.

6. **Stakeholders**: The involvement of stakeholders in the requirements process is evident, which is crucial for ensuring that the system meets user needs.

7. **System Behavior**: The behavior of the system is likely to be aligned with user expectations, as indicated by the data.

8. **User Interfaces**: The design and functionality of user interfaces are important, with a mean value of 0.58, indicating a focus on how users interact with the system.

9. **Requirements Elicitation with Interviews**: The average importance rating for eliciting requirements through interviews is 0.58, highlighting the significance of direct user feedback.

10. **Requirements Elicitation with Workshops and Focus Groups**: Similarly, workshops and focus groups are valued in the requirements gathering process, with a mean value of 0.58.

Overall, the summarized information indicates a balanced focus on performance efficiency, usability, documentation, stakeholder involvement, and quality properties, all of which are essential for effectively generating performance reports in the system.
Source: napire data

Query: What are the common requirements for an authentications system?
Context: have to use a passkey to log in?
clarity: is the requirements clear and unambiguous to the customer? can there be missunderstandings towards which 
functionality requires a login?
example
requirement: the application must respond to user requests within 2 seconds.
verification activities:
define acceptance criteria: application responds within 2 seconds
Source: software4kmu learning nuggets.pdf

Context: identification & 
authentication (ia) 
ia1. users are associated with a well-defined 
set of roles and privileges. 
ia2. the digital identity of the sender of a 
communication must be verified. 
ia3. only those authorized are able to 
authenticate and credentials are transported and 
stored in a secure manner. 
ia4. 
passwords 
treatment 
must 
include
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: user story 
security specification 
1. as a customer, i 
want to be able to 
export my personal 
information so that i 
can use it in other 
systems. 
1. the system shall ensure that there is no residual 
data exposed. 
2. the system shall store credentials securely using 
the aes encryption algorithm. 
3. the system shall use the rsa encryption 
algorithm to protect all data all the time.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: timed out during periods of inactivity. 
c4. tls protocol shall be used where sensitive 
data is transmitted. 
c5. system shall use strong encryption 
algorithm at all times. 
integrity (i) 
i1. any unauthorized modification of data must 
yield an auditable security-related event. 
i2. all input is validated to be correct and fit 
for the intended purpose.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: algorithm to protect all data all the time. 
4. the system shall inactivate a session when it 
exceeds certain periods of inactivity. 
5. the system shall encrypt the roles and privileges 
of the system. 
with the user story in sight, the framework extracts the 
relevant words and matches the related security properties. in 
this case, the extracted words are “export” and “system”.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Query: What are the common requirements for an authentications system?
Context: The common requirements for an authentication system, based on the summarized information from the DataFrame, include:

1. **Security**: 
   - Accountability, authenticity, confidentiality, integrity, and non-repudiation are highly important for development, with an average importance score of approximately 0.51.

2. **Usability**: 
   - Accessibility, appropriateness, recognizability, learnability, operability, user error protection, and user interface aesthetics are also crucial, with a significant number of entries indicating their importance.

3. **Reliability**: 
   - The system should ensure availability, fault tolerance, maturity, and recoverability.

4. **Performance Efficiency**: 
   - Time behavior, resource utilization, and capacity are essential for the system's effectiveness.

5. **Documentation Granularity**: 
   - Proper documentation is necessary to support the requirements.

6. **Goals**: 
   - Clear goals should be established to guide the development process.

7. **Quality Properties**: 
   - The system should meet specific quality standards.

8. **Stakeholders**: 
   - Involvement of relevant stakeholders is critical for successful implementation.

Overall, the emphasis is on security, usability, reliability, performance, and thorough documentation to ensure an effective authentication system.
Source: napire data

Query: what are the common requirements for an authentications system?
Context: have to use a passkey to log in?
clarity: is the requirements clear and unambiguous to the customer? can there be missunderstandings towards which 
functionality requires a login?
example
requirement: the application must respond to user requests within 2 seconds.
verification activities:
define acceptance criteria: application responds within 2 seconds
Source: software4kmu learning nuggets.pdf

Context: user story 
security specification 
1. as a customer, i 
want to be able to 
export my personal 
information so that i 
can use it in other 
systems. 
1. the system shall ensure that there is no residual 
data exposed. 
2. the system shall store credentials securely using 
the aes encryption algorithm. 
3. the system shall use the rsa encryption 
algorithm to protect all data all the time.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: according to the authors, those types of information and the 
related questions were adapted for requirements from araujo 
and curphey’s article on security code reviews [1]. however, 
due to the large number of software vulnerabilities and the 
variety of ways to deploy computer attacks, it is not enough to 
consider only three types of security controls. indeed, the list
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: inspectors can easily identify certain security aspects. for 
instance, we use the and logical connector in capital letters 
to get the attention of the reader and indicate that both aspects 
must be considered to satisfy the high-level security 
unauthorized observation or disclosure both in transit and 
when stored”. in this case, if the specifications were well
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: algorithm to protect all data all the time. 
4. the system shall inactivate a session when it 
exceeds certain periods of inactivity. 
5. the system shall encrypt the roles and privileges 
of the system. 
with the user story in sight, the framework extracts the 
relevant words and matches the related security properties. in 
this case, the extracted words are “export” and “system”.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Query: what are the common requirements for an authentications system?
Context: The common requirements for an authentication system, based on the summarized data, include the following aspects:

1. **Security**: 
   - Accountability, authenticity, confidentiality, integrity, and non-repudiation are highly important for development, with a mean value indicating that these aspects are often considered (mean = 0.51).

2. **Usability**: 
   - Usability factors such as accessibility, appropriateness, recognizability, learnability, operability, user error protection, and user interface aesthetics are also critical.

3. **Requirements Elicitation**: 
   - Various methods are employed for requirements elicitation, including interviews, prototyping, workshops, and consulting external experts.

4. **Documentation Granularity**: 
   - The level of detail in documentation is essential for ensuring that requirements are clearly defined and understood.

5. **Goals and Quality Properties**: 
   - Clear goals and quality properties are necessary to guide the development of the authentication system.

6. **Non-functional Requirements**: 
   - Non-functional requirements, particularly those related to security and risk management, are crucial for the system's effectiveness.

These elements collectively contribute to the robustness and effectiveness of an authentication system.
Source: napire data

Query: How to deal with incomplete requirements?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: implicit requirements not made explicit 
stakeholders with difficulties in separating reqs from previously known solutions 
inconsistent requirements 
insufficient support by project lead 
insufficient support by customer 
missing traceability 
“gold plating” (implementation of features without corresponding requirements) 
weak access to customer needs and / or (internal) business information
Source: Requirements Engineering Practice and Problems in Agile Projects Results from an International Survey.pdf

Context: preventing incomplete/hidden requirements: 
reflections on survey data from austria and brazil 
marcos kalinowski1, michael felderer2, tayana conte3, rodrigo spínola4,         
rafael prikladnicki5, dietmar winkler6 , daniel méndez fernández7, stefan wagner8 
1 universidade federal fluminense, computing institute, av. milton tavares de souza s/n, 
campus praia vermelha, 24210-346 niterói, brazil.
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: also be supported by including and training re standards that put emphasis
on the way requirements should be elicited and speciﬁed.
2. adjusting its portfolio management to avoid accepting projects under extreme
time pressure or involving stakeholders that lack business vision.
3. assessing and improving the eﬃciency of their elicitation techniques.
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Context: problem 
prio 1 
prio 2 
prio 3 
prio 4 
prio 5 
total 
total 
prio 5 
prio 4 
prio 3 
prio 2 
prio 1 
problem 
incomplete and / 
or hidden 
requirements 
incomplete and / 
or hidden 
requirements 
underspecified 
requirements 
moving targets 
communication 
flaws between the 
team and the 
customer 
communication 
flaws within the 
team 
communication 
flaws within the 
communication
Source: Naming the Pain in Requirements Engineering Comparing Practices in Brazil and Germany.pdf

Query: How to deal with incomplete requirements?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how to deal with incomplete requirements?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: preventing incomplete/hidden requirements: 
reflections on survey data from austria and brazil 
marcos kalinowski1, michael felderer2, tayana conte3, rodrigo spínola4,         
rafael prikladnicki5, dietmar winkler6 , daniel méndez fernández7, stefan wagner8 
1 universidade federal fluminense, computing institute, av. milton tavares de souza s/n, 
campus praia vermelha, 24210-346 niterói, brazil.
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: also be supported by including and training re standards that put emphasis
on the way requirements should be elicited and speciﬁed.
2. adjusting its portfolio management to avoid accepting projects under extreme
time pressure or involving stakeholders that lack business vision.
3. assessing and improving the eﬃciency of their elicitation techniques.
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Context: change management
one important synergy to consider between requirements management and other activities in the software development lifecycle is an overarching change 
management. here, it is important to note that the goals of change management dictate, to some extent, also how we engage in requiremetns management as it 
should effectively allow for:
Source: software4kmu learning nuggets.pdf

Context: incomplete artefacts is given, to some extent, by the results of the analysis of the pattern eﬃciency (see
step 4). in the analysis of the eﬀort spent in the creation of the artefacts, we evaluate the patterns, e.g.,
with respect to change requests that may result from insuﬃcient re potentially indicating that not all
requirements were documented (see also section 3.4.4).
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Query: how to deal with incomplete requirements?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: Who are the people/stakeholders to involve in elicitation?
Context: potential processes and use cases) for which corresponding
stakeholders are available. this way, the approach can be
conducted entirely including the creation of the business and
the requirements speciﬁcation. we deﬁne three main groups
of participants as study subjects:
1) industry participants: experts from industry responsible
proceedings of ease 2011
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Context: stakeholders that are to be involved in the process of gathering 
needs and constraints. we define the scope of the the problem 
and the solution, and consequently define the goals of the 
solution. if necessary, we analyze the business processes and 
based on all those steps, we finally elicit the requirements.
further information on requirements elicitation
requirements analysis
Source: software4kmu learning nuggets.pdf

Context: ticipants are present while the researchers take the role of
requirements analysts.
initial project set-up: at the kick-off workshop, the
researchers present the bisa reference model and the cus-
tomisation approach. we customise the bisa reference model
to initially set up the project. we select the artefacts to be
created, decide on a preferable document structure, assign the
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: elicitation process so that stakeholders are often simply not 
aware of them. for instance, when stakeholders make decisions 
along the process meetings, they are often not aware that these 
decisions might also raise data protection-related issues [24]. 
this often leads to not specifying relevant security-related 
aspects.  
however, the picture is even more challenging in agile
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Query: Who are the people/stakeholders to involve in elicitation?
Context: The stakeholders to involve in elicitation include:

- 0
- 1

The people responsible for requirements elicitation are:

- Business Analyst
- Other
- Nobody has the primary responsibility
- Customer
- Product Manager
- Product Owner
- Requirements Engineer
- Project Lead / Project Manager
- Scrum Master
- Architect
- Developer
- Marketing
Source: napire data

Query: who are the people/stakeholders to involve in elicitation?
Context: potential processes and use cases) for which corresponding
stakeholders are available. this way, the approach can be
conducted entirely including the creation of the business and
the requirements speciﬁcation. we deﬁne three main groups
of participants as study subjects:
1) industry participants: experts from industry responsible
proceedings of ease 2011
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Context: stakeholders that are to be involved in the process of gathering 
needs and constraints. we define the scope of the the problem 
and the solution, and consequently define the goals of the 
solution. if necessary, we analyze the business processes and 
based on all those steps, we finally elicit the requirements.
further information on requirements elicitation
requirements analysis
Source: software4kmu learning nuggets.pdf

Context: ticipants are present while the researchers take the role of
requirements analysts.
initial project set-up: at the kick-off workshop, the
researchers present the bisa reference model and the cus-
tomisation approach. we customise the bisa reference model
to initially set up the project. we select the artefacts to be
created, decide on a preferable document structure, assign the
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: elicitation process so that stakeholders are often simply not 
aware of them. for instance, when stakeholders make decisions 
along the process meetings, they are often not aware that these 
decisions might also raise data protection-related issues [24]. 
this often leads to not specifying relevant security-related 
aspects.  
however, the picture is even more challenging in agile
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Query: who are the people/stakeholders to involve in elicitation?
Context: The stakeholders to involve in elicitation include:

- 0
- 1

The people responsible for requirements elicitation are:

- Business Analyst
- Other
- Nobody has the primary responsibility
- Customer
- Product Manager
- Product Owner
- Requirements Engineer
- Project Lead / Project Manager
- Scrum Master
- Architect
- Developer
- Marketing
Source: napire data

Query: Please reformulate this requirement to make it more clear: Requirement: "The system should be fast."
Context: quiz
what type of requirement is this? 
1. "the system should be able to process 1000 transactions per second".
2. "all user input should be validated to prevent incorrect data entry".
3. "the system should allow users to search for products by category and filter the results by price, brand and customer reviews."
Source: software4kmu learning nuggets.pdf

Context: system privacy 
system portability 
others 
percentage of answers 
figure 8: critical non-functional requirements of ml- 
enabled systems (n = 71) 
requirements with data (p = 53.556 [53.197, 53.915]), resolving 
conflicts (p = 42.346 [41.987, 42.706]), managing changing re- 
quirements (p = 40.915 [40.574, 41.257]), selecting metrics (p = 
[26.418, 27.021]). 
customer  expectactions
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: about the expectations practitioners have on particular aspects of their own standards. for instance, based
on our investigation published in [30, 6], we expect practitioners to demand standards that focus on the
re artefacts, clear roles and responsibilities, and tailoring mechanisms rather than on strict processes and
methods to allow for more ﬂexibility and a better communication.
Source: Naming the Pain in Requirements Engineering A Design for a Global Family of Surveys and First Results from Germany.pdf

Context: (6) system environment con-
ditions speciﬁed
part of the test cases is to describe the environment of the test as close as possible to the productive (end) system. thus, the engineer
must understand under what conditions the system will operate, e.g., regarding amounts of productive data, temperature, workload.
(7) inputs and outputs quali-
tatively speciﬁed
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Context: expressed in a causal sentence.
furthermore, the implementation of a system based on require-
ments engineering artifacts needs to be validated by determining
whether the defined requirements are fulfilled. tests of various gran-
ularity are usually a formalized version of specific requirements.
arxiv:2312.06986v1  [cs.se]  12 dec 2023
ase ’20, september 21–25, 2020, virtual event, australia
Source: Automatic extraction of cause-effect-relations from requirements artifacts.pdf

Query: Please reformulate this requirement to make it more clear: Requirement: "The system should be fast."
Context: To reformulate the requirement "The system should be fast," we can clarify it by specifying measurable performance criteria. Based on the analysis of the DataFrame, a clearer requirement could be:

"The system should respond to user actions within 2 seconds and utilize resources efficiently to ensure optimal performance under peak load conditions." 

This reformulation provides specific expectations regarding response time and resource utilization, making the requirement more actionable and measurable.
Source: napire data

Query: please reformulate this requirement to make it more clear: requirement: "the system should be fast."
Context: system privacy 
system portability 
others 
percentage of answers 
figure 8: critical non-functional requirements of ml- 
enabled systems (n = 71) 
requirements with data (p = 53.556 [53.197, 53.915]), resolving 
conflicts (p = 42.346 [41.987, 42.706]), managing changing re- 
quirements (p = 40.915 [40.574, 41.257]), selecting metrics (p = 
[26.418, 27.021]). 
customer  expectactions
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: about the expectations practitioners have on particular aspects of their own standards. for instance, based
on our investigation published in [30, 6], we expect practitioners to demand standards that focus on the
re artefacts, clear roles and responsibilities, and tailoring mechanisms rather than on strict processes and
methods to allow for more ﬂexibility and a better communication.
Source: Naming the Pain in Requirements Engineering A Design for a Global Family of Surveys and First Results from Germany.pdf

Context: (6) system environment con-
ditions speciﬁed
part of the test cases is to describe the environment of the test as close as possible to the productive (end) system. thus, the engineer
must understand under what conditions the system will operate, e.g., regarding amounts of productive data, temperature, workload.
(7) inputs and outputs quali-
tatively speciﬁed
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Context: expressed in a causal sentence.
furthermore, the implementation of a system based on require-
ments engineering artifacts needs to be validated by determining
whether the defined requirements are fulfilled. tests of various gran-
ularity are usually a formalized version of specific requirements.
arxiv:2312.06986v1  [cs.se]  12 dec 2023
ase ’20, september 21–25, 2020, virtual event, australia
Source: Automatic extraction of cause-effect-relations from requirements artifacts.pdf

Context: be distracted by superﬁcial quality defects such as the
aforementioned vague formulations or loopholes. we
therefore argue that reviews are time-consuming and
costly.
therefore, quality assurance processes would beneﬁt
from faster feedback cycles in requirements engineer-
ing (re), which support requirements engineers and
project participants in immediately discovering cer-
Source: Rapid quality assurance with Requirements Smells.pdf

Query: please reformulate this requirement to make it more clear: requirement: "the system should be fast."
Context: To reformulate the requirement "the system should be fast," it can be clarified as follows:

"The system must respond to user inputs within 2 seconds under normal operating conditions, ensuring efficient resource utilization and optimal performance to enhance user experience." 

This reformulation specifies a measurable response time and emphasizes the importance of resource efficiency and user experience.
Source: napire data

Query: What tools are available for requirements management?
Context: for the other cases, this involved extracting the
requirements from other systems, either a propri-
etary requirements management tool (resulting
in a list of html ﬁles), or the online task manage-
ment system jira, which led to a set of comma-
separated values ﬁles. for the student projects,
the students handed in their ﬁnal artifacts either
as a single pdf or as a pdf with the general
Source: Rapid quality assurance with Requirements Smells.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: survey of techniques, approaches, and tools. in
a. aurum and c. wohlin, editors, engineering and
managing software requirements, number isbn-13:
978-3642064074, chapter 2, pages 19–46.
springer-verlag berlin, 2005.
Source: Naming the Pain in Requirements Engineering  Design of a Global Family of Surveys and First Results from Germany.pdf

Context: requirements elicitation: to gather requirements
requirements analysis: to generate a common understanding 
among stakeholders
requirements specification: to structure and document 
requirements in an aggreed on format
requirements verification and validation: to ensure the 
solution matches the problem
requirements management: to track and trace changes to 
requirements
Source: software4kmu learning nuggets.pdf

Context: amdire (see the example below)
more pragmatic tools that may as well serve the purpose of 
documenting requirements individually in natural language (and 
enriching them with additional information such s models), for 
example with ticket systems (e.g. jira)
in the end, the tools do not matter as much as the questions of 
1. what we can use considering the project circumstances (what is
Source: software4kmu learning nuggets.pdf

Query: What tools are available for requirements management?
Context: The available tools for requirements management, as indicated by the DataFrame, include:

1. **Documentation Granularity**: Various approaches to documenting requirements, including high-level and detailed documentation.
2. **Elicitation Techniques**:
   - **Interviews**: A common method for gathering requirements.
   - **Analysis of Existing Documents**: Reviewing current documentation to inform requirements.
   - **Risk Analyses**: Identifying potential risks to shape requirements.
   - **Prototyping**: Creating prototypes to clarify and refine requirements.
   - **Workshops and Focus Groups**: Collaborative sessions to gather input from stakeholders.
   - **Reuse Databases and Guidelines**: Utilizing existing resources to inform requirements.
   - **Design Thinking / Lean Startup**: Approaches that emphasize user-centered design and iterative development.

Additionally, there are practices for refining requirements through iterations and dedicated project phases.
Source: napire data

Query: what tools are available for requirements management?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: a further proposition: “organisations use continuous change management.” this new proposition
could be explained by the continuous nature of change in agile development processes. both other
answer options lie below the threshold although both ci include it.
second, we asked how the respondents deal with changing requirements after the initial release.
status quo in requirements engineering
:25
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: controlling the re process​
in essence, a proper requirements management provides answers to the following questions:​
which requirements come from which source? (attribution, tracing)​
which requirements are how important? (attribution, assessment)​
who changed a requirement when? (attribution, versioning)​
how efficient is the re process? (controlling)
change management
Source: software4kmu learning nuggets.pdf

Context: models but rather work with more abstract feature lists.
tool support
tool support for requirements engineering can be a never-ending 
topic. in essence, it is possible to work with various tools available 
on the market; for example:
modelling-centric tools, such as magicdraw where we can 
define an uml profile based not eh content model provided by 
amdire (see the example below)
Source: software4kmu learning nuggets.pdf

Context: for the other cases, this involved extracting the
requirements from other systems, either a propri-
etary requirements management tool (resulting
in a list of html ﬁles), or the online task manage-
ment system jira, which led to a set of comma-
separated values ﬁles. for the student projects,
the students handed in their ﬁnal artifacts either
as a single pdf or as a pdf with the general
Source: Rapid quality assurance with Requirements Smells.pdf

Query: what tools are available for requirements management?
Context: The DataFrame provides insights into various tools and methods used for requirements management. Here are the summarized tools based on the relevant columns:

1. **Documentation Granularity**:
   - Options include: 
     - "We do not document requirements."
     - "We document detailed requirements at the beginning of the project."
     - "We document high-level requirements at the beginning of the project and refine them as needed."
     - "Other (please specify)."

2. **Elicitation Methods**:
   - **Interviews**: Used by some teams for requirements elicitation.
   - **Analysis of Existing Documents**: Another method employed for gathering requirements.
   - **Risk Analyses**: Utilized to identify and manage potential risks in requirements.
   - **Prototyping**: A method for visualizing requirements through prototypes.
   - **Workshops and Focus Groups**: Engaging stakeholders in workshops to gather requirements.
   - **Reuse Databases and Guidelines**: Leveraging existing resources for requirements.
   - **External Experts**: Consulting with external experts for insights on requirements.

This summary indicates a variety of tools and methods available for effective requirements management within projects.
Source: napire data

Query: How to deal with changing requirements?
Context: it is important to recognise that requirements are dynamic and may change due to evolving stakeholder needs, changes in market 
conditions and advances in technology. it is important to adapt these requirements in the later stages of a project, either by 
reformulating, deleting or introducing new requirements. adopting this approach is essential to maintaining project responsiveness and
Source: software4kmu learning nuggets.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: closed(mc)
q 12
how do you deal with changing requirements after the initial release?
closed(sc)
q 13
which traces do you explicitly manage?
closed(mc)
q 14
how do you analyse the effect of changes to requirements?
closed(mc)
q 15
how do you align the software test with the requirements?
closed(mc)
rq 3
q 16
what re standard have you established at your company?
closed(mc)
q 17
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: a further proposition: “organisations use continuous change management.” this new proposition
could be explained by the continuous nature of change in agile development processes. both other
answer options lie below the threshold although both ci include it.
second, we asked how the respondents deal with changing requirements after the initial release.
status quo in requirements engineering
:25
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: also be supported by including and training re standards that put emphasis
on the way requirements should be elicited and speciﬁed.
2. adjusting its portfolio management to avoid accepting projects under extreme
time pressure or involving stakeholders that lack business vision.
3. assessing and improving the eﬃciency of their elicitation techniques.
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Query: How to deal with changing requirements?
Context: To deal with changing requirements, the following strategies can be summarized from the DataFrame:

1. **Documentation**: It is essential to document compatibility, maintainability, performance efficiency, portability, reliability, safety, security, and usability in a textual format. This ensures that all aspects of the requirements are clearly articulated and can be referred to when changes occur.

2. **Reflecting Changes**: There should be a systematic approach to reflect changes in requirements within the project. This involves updating documentation and ensuring that all stakeholders are aware of the changes.

3. **Addressing Dissatisfaction**: Common reasons for dissatisfaction in requirements engineering include a lack of structure and a lack of acknowledgment of changing requirements. Addressing these issues can help improve the overall process.

By focusing on clear documentation and actively managing changes, teams can better navigate the challenges posed by evolving requirements.
Source: napire data

Query: how to deal with changing requirements?
Context: it is important to recognise that requirements are dynamic and may change due to evolving stakeholder needs, changes in market 
conditions and advances in technology. it is important to adapt these requirements in the later stages of a project, either by 
reformulating, deleting or introducing new requirements. adopting this approach is essential to maintaining project responsiveness and
Source: software4kmu learning nuggets.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: ing customer expectations [18], aligning requirements with data 
[35, 42], changing requirements [25], and selecting proper metrics 
[44] were previously reported as difficulties, which emphasizes the 
importance of effective communication and technical expertise to 
bridge the gap between aspirations and technological feasibility.
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: closed(sc) 
q 12 
how do you deal with changing requirements after the initial 
release? 
closed(sc) 
q 13 
which traces do you explicitly manage? 
closed(mc) 
q 14 
how do you analyse the effect of changes to requirements? 
closed(mc) 
q 15 
how do you align the software test with the requirements? 
closed(mc) 
… 
… 
… 
q 23 
is your re continuously improved? 
closed(sc) 
q 24
Source: Requirements Engineering Practice and Problems in Agile Projects Results from an International Survey.pdf

Context: also be supported by including and training re standards that put emphasis
on the way requirements should be elicited and speciﬁed.
2. adjusting its portfolio management to avoid accepting projects under extreme
time pressure or involving stakeholders that lack business vision.
3. assessing and improving the eﬃciency of their elicitation techniques.
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Query: how to deal with changing requirements?
Context: To effectively deal with changing requirements, the following strategies and insights can be derived from the summarized data:

### Strategies for Managing Changing Requirements:
1. **Continuous Updates**: A significant number of projects (111 instances) emphasize the importance of continuously updating the requirements specification, even after formal acceptance. This approach helps in adapting to changes as they arise.

2. **Backlog Management**: Updating the product backlog (78 instances) is another common practice. This ensures that all changes are documented and prioritized for future sprints or iterations.

3. **Change Requests**: Many teams (51 instances) work with change requests but may not always update the requirements documentation accordingly. This highlights the need for a structured process to ensure that changes are reflected in the documentation.

4. **Documentation Practices**: Some teams (17 instances) do not update their requirements documentation at all, which can lead to confusion and misalignment. It is crucial to maintain up-to-date documentation to reflect the current state of requirements.

### Common Problems Encountered:
- **Communication Issues**: Problems related to communication between the project and the customer (44 instances) and within the project team (27 instances) are prevalent. Effective communication strategies should be implemented to mitigate these issues.
  
- **Incomplete Requirements**: Incomplete or hidden requirements (42 instances) can lead to significant challenges. Regular reviews and stakeholder engagement can help uncover these hidden requirements.

- **Changing Goals**: The presence of moving targets (21 instances) indicates that goals and business processes may frequently change, necessitating a flexible approach to requirements management.

- **Time Constraints**: Time boxing and insufficient time (34 instances) are common challenges that can hinder the ability to adapt to changes. Adequate planning and resource allocation are essential.

### Causes of Problems:
- **Stakeholder Engagement**: Weak access to customer needs (10 instances) and difficulties in separating requirements from known solutions (13 instances) can lead to misalignment. Engaging stakeholders throughout the project lifecycle is vital.

- **Terminological Issues**: Terminological problems (6 instances) can create confusion. Establishing a common language and understanding among team members and stakeholders can alleviate this issue.

- **Lack of Clarity**: Underspecified requirements (19 instances) and unclear non-functional requirements (3 instances) can complicate the requirements process. Clear definitions and examples should be provided to ensure understanding.

By implementing these strategies and addressing the common problems and their causes, teams can better manage changing requirements and enhance their overall project success.
Source: napire data

Query: What techniques can be used for requirements validation?
Context: survey of techniques, approaches, and tools. in
a. aurum and c. wohlin, editors, engineering and
managing software requirements, number isbn-13:
978-3642064074, chapter 2, pages 19–46.
springer-verlag berlin, 2005.
Source: Naming the Pain in Requirements Engineering  Design of a Global Family of Surveys and First Results from Germany.pdf

Context: 2. prototyping to support customers in getting a clear vision for the system
3. formal verification for systems with respective requirements such as avionic systems
4. reviews of requirements and the supporting information (e.g. goals, stakeholders, implementation) to validate and verify them
example
requirement: the user must be able to log in using their username and password.
Source: software4kmu learning nuggets.pdf

Context: research there is a strong focus on model-based testing and formal approaches when it comes to the
alignment of requirements specification and testing as a recent systematic mapping study shows [3].
however, limitations in practice often include the high effort for creating and maintaining models
as foundation for deriving code and test cases. thus, there is a trade-off between required efforts
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Query: What techniques can be used for requirements validation?
Context: The techniques used for requirements validation, based on the summarized data, include:

1. **Automatic checking used to validate or verify requirements**: 410 responses indicating usage.
2. **Informal peer reviews used to validate or verify requirements**: 78 responses indicating usage.
3. **Inspections (formal technical reviews using reading techniques or checklists) used to validate or verify requirements**: 406 responses indicating usage.
4. **Simulations used to validate/verify requirements**: 0 responses indicating usage.
5. **Walkthroughs used to validate/verify requirements**: 0 responses indicating usage.
6. **We do not verify or validate our requirements**: 0 responses indicating this approach.
7. **Testers participate in requirements reviews to align testing with requirements**: 0 responses indicating this approach.
8. **We check the coverage of requirements with tests to align testing with requirements**: 0 responses indicating this approach.
9. **We define acceptance criteria and tests for requirements to align testing with requirements**: 0 responses indicating this approach.
10. **We derive tests from system models to align testing with requirements**: 0 responses indicating this approach.

The most commonly used techniques are automatic checking and inspections, while other methods show minimal or no usage.
Source: napire data

Query: what techniques can be used for requirements validation?
Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Context: appropriate inspection methods (e.g., checklists or reading techniques), ideally 
involving different stakeholders (e.g., users, designers, and testers) in the verification 
and validation process. these counter measures represent a set of initial strategies 
based on the experience of the study team, i.e., the authors.
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: research there is a strong focus on model-based testing and formal approaches when it comes to the
alignment of requirements specification and testing as a recent systematic mapping study shows [3].
however, limitations in practice often include the high effort for creating and maintaining models
as foundation for deriving code and test cases. thus, there is a trade-off between required efforts
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: improve the analysis to be more detailed.  
more frequent meetings with the customer to align expectations. 
requirements reviews and frequent releases. 
improving the quality of the requirements documentation, or improving elicitation methods. 
developing requirements according to suggestions of the mps-sw reference model. 
improvement of the artefacts; adoption of software inspections.
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: 7. verifiability: it should be possible to verify that the system includes the specified menu bar with icons and labels, and that 
contextual tooltips are provided with simple tests during the development phase.
8. correctness: the stakeholder has formally agreed to the refined requirements and we may therefore assume that it accurately
Source: software4kmu learning nuggets.pdf

Query: what techniques can be used for requirements validation?
Context: The techniques used for requirements validation, based on the summarized data, include:

1. **Automatic Checking**: 78 instances
2. **Informal Peer Reviews**: 231 instances
3. **Inspections (Formal Technical Reviews)**: 194 instances
4. **Simulations**: 136 instances
5. **Walkthroughs**: 197 instances
6. **Non-validation**: 31 instances (indicating cases where requirements are not verified or validated)
7. **Testers Participation in Reviews**: 214 instances
8. **Coverage Checking with Tests**: 223 instances
9. **Defining Acceptance Criteria and Tests**: 271 instances
10. **Deriving Tests from System Models**: 82 instances

These techniques reflect various approaches to ensure that requirements are validated effectively within projects.
Source: napire data

Query: What are functional and non-functional requirements?
Context: incomplete and/or hidden re- 
quirements 
communication flaws between 
project team and customer 
moving targets (changing goals, 
business processes, and/or re- 
quirements) 
underspecified requirements 
that are too abstract 
timeboxing/not enough time 
in general 
stakeholders with difficulties in 
separating requirements from 
known solution designs 
insufficient support by cus- 
tomer
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: estimated duration
5 min
level
external ressources
dependencies
next item
goals (teaching 
perspective)
to familiarize learners with the various categories of requirements and their respective characteristics.
content description 
(teaching 
perspective)
overview of different types of requirements such as business, functional and non-functionalrequirements.
en
de
beginner  
intermediate
Source: software4kmu learning nuggets.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: implementation. note already here that the spectrum of what is covered by non-functional requirements is very broad covering both 
quality properties of the system under consideration and properties of the overall development process. while we may well differentiate 
better in later learning nuggets, here, for reasons of cimplicity, we focus on properties of the system itself.
Source: software4kmu learning nuggets.pdf

Context: types and forms of requirements
during product development, it is essential to document various types of requirements to guide the project efficiently. these include
goals and contstraints: these define the high-level goals and expected benefits from a business perspective, providing context for 
the project objectives.
Source: software4kmu learning nuggets.pdf

Query: What are functional and non-functional requirements?
Context: Functional requirements refer to the specific behaviors or functions that a system must perform. In the provided DataFrame, the following aspects are highlighted:

1. **Goals**: The objectives that the system aims to achieve.
2. **System Behaviour**: The expected actions and responses of the system under various conditions.
3. **User Interfaces**: The design and functionality of the interfaces through which users interact with the system.
4. **Usage Scenarios**: The contexts in which the system will be used.
5. **Requirements Elicitation Methods**: Various methods used to gather requirements, including:
   - Interviews
   - Analysis of existing documents
   - Prototyping
   - Workshops and focus groups
   - Engagement with external experts
   - Observations

All of these functional aspects have been documented in the DataFrame, with counts indicating that they are present in 455 to 488 instances.

Non-functional requirements, on the other hand, describe the quality attributes of the system. The DataFrame includes the following non-functional requirements:

1. **Compatibility**: The ability of the system to coexist and interoperate with other systems.
2. **Maintainability**: Attributes related to the system's analyzability, modularity, modifiability, reusability, and testability.
3. **Performance Efficiency**: Concerns regarding time behavior, resource utilization, and capacity.
4. **Portability**: The adaptability, installability, and replaceability of the system.
5. **Reliability**: Attributes such as availability, fault tolerance, maturity, and recoverability.
6. **Safety**: Ensuring accountability, authenticity, confidentiality, integrity, and non-repudiation.
7. **Security**: Addressing risks related to health or disaster.
8. **Usability**: Factors like accessibility, appropriateness, recognizability, learnability, operability, user error protection, and user interface aesthetics.

Each of these non-functional requirements is also documented in the DataFrame, with counts indicating their presence in 455 instances. 

In summary, the DataFrame provides a comprehensive overview of both functional and non-functional requirements, detailing the methods of elicitation and documentation for each category.
Source: napire data

Query: what are functional and non-functional requirements?
Context: incomplete and/or hidden re- 
quirements 
communication flaws between 
project team and customer 
moving targets (changing goals, 
business processes, and/or re- 
quirements) 
underspecified requirements 
that are too abstract 
timeboxing/not enough time 
in general 
stakeholders with difficulties in 
separating requirements from 
known solution designs 
insufficient support by cus- 
tomer
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: estimated duration
5 min
level
external ressources
dependencies
next item
goals (teaching 
perspective)
to familiarize learners with the various categories of requirements and their respective characteristics.
content description 
(teaching 
perspective)
overview of different types of requirements such as business, functional and non-functionalrequirements.
en
de
beginner  
intermediate
Source: software4kmu learning nuggets.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: types and forms of requirements
during product development, it is essential to document various types of requirements to guide the project efficiently. these include
goals and contstraints: these define the high-level goals and expected benefits from a business perspective, providing context for 
the project objectives.
Source: software4kmu learning nuggets.pdf

Context: tests for requirements. especially the role of automated tests would be interesting to 
follow-up in further studies. 
finally, we briefly touched also the topic of non-functional requirements (such as 
security or performance requirements). we found that most respondents document 
non-functional requirements with text. about half of those document non-functional
Source: Requirements Engineering Practice and Problems in Agile Projects Results from an International Survey.pdf

Query: what are functional and non-functional requirements?
Context: Functional requirements refer to the specific behaviors or functions that a system must perform. Based on the DataFrame, the following functional requirements were identified:

1. **Requirements Elicitation with Interviews**: 339 instances
2. **Requirements Elicitation with Analysis of Existing Documents**: 292 instances
3. **Requirements Elicitation with Risk Analyses**: 96 instances
4. **Requirements Elicitation with Prototyping**: 235 instances
5. **Requirements Elicitation with Workshops and Focus Groups**: 277 instances
6. **Requirements Elicitation with Reuse Databases and Guidelines**: 85 instances
7. **Requirements Elicitation with Design Thinking / Lean Startup**: 97 instances
8. **Requirements Elicitation with External Experts**: 84 instances
9. **Requirements Elicitation with Observations**: 171 instances
10. **We Do Not Elicit Requirements Ourselves**: 18 instances

Non-functional requirements relate to the quality attributes of the system. The summary of non-functional requirements documentation includes:

1. **Compatibility (Co-existence, Interoperability)**: 1000100000000010101000000010101010000011011011...
2. **Maintainability (Analysability, Modularity, Modifiability, Reusability, Testability)**: 0011100110010010100001100010101010100100111001...
3. **Performance Efficiency (Time Behavior, Resource Utilisation, Capacity)**: 1000111010011110111101000110111111000010111001...
4. **Portability (Adaptability, Installability, Replaceability)**: 1010100010000000000000000010101000000001010000...
5. **Reliability (Availability, Fault Tolerance, Maturity, Recoverability)**: 1011100111100010100111100010101011100110111001...
6. **Safety (Accountability, Authenticity, Confidentiality, Integrity, Non-repudiation)**: 0000110011000010000111100000111000100100011000...
7. **Security (Freedom of Risk for Health or Disaster)**: 1001100110001010100000100110111011000011110001...
8. **Usability (Accessibility, Appropriateness, Recognizability, Learnability, Operability, User Error Protection, User Interface Aesthetics)**: 1011101111001110100001000011111011000011011011...

This summary provides an overview of the functional and non-functional requirements as derived from the DataFrame.
Source: napire data

Query: Is the following requirement good? "The system must load within 2 seconds under a normal load of 1,000 users."
Context: quiz
what type of requirement is this? 
1. "the system should be able to process 1000 transactions per second".
2. "all user input should be validated to prevent incorrect data entry".
3. "the system should allow users to search for products by category and filter the results by price, brand and customer reviews."
Source: software4kmu learning nuggets.pdf

Context: yet, a systematic mapping study [52] adds that quality assessment plays an important role for
improving software requirements specifications.
at this point, we wanted to dig deeper and understand the reasoning behind doing a continuous
status quo in requirements engineering
:37
a certain certification (p = 0.12 [0.08, 0.17]) or due to a regulation like cmmi, cobit or itil
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: risk calculations
system success factors
application scenarios
user interface
user classes
system interaction
release strategy
domain model
environment model
system boundaries
quality requirements
assumptions
sw design constraints
acceptance criteria
acceptance test cases
release planning
behaviour model
system interaction
service interaction
data model
user interface
communication interfaces
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: furthermore, we collected the time spent for detecting defects. 
this allows us to compare the performance of the treatments 
in terms of efficiency, which is the metric that complements 
the answer to rq1. finally, we collected answers from the 
follow-up questionnaire. this questionnaire allowed us to 
receive feedback on the perceived usefulness and ease of use.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: ments that deﬁne properties of the system rela-
tive to other systems or circumstances12. when
searching for grammatical comparatives in re-
quirements, roughly 48% of the cases are of the
aforementioned kind. in roughly the same num-
ber of cases, however, the comparative describes a
condition. for example, if the requirement states
that if the system takes more than 1 second to re-
Source: Rapid quality assurance with Requirements Smells.pdf

Query: Is the following requirement good? "The system must load within 2 seconds under a normal load of 1,000 users."
Context: To assess the requirement "The system must load within 2 seconds under a normal load of 1,000 users," we can summarize the relevant information from the DataFrame regarding performance efficiency and usability. Here are the key points:

1. **Performance Efficiency**:
   - The DataFrame indicates that performance efficiency is considered highly important, with values ranging from 0 to 1, suggesting varying levels of emphasis on this aspect across different projects.
   - Documentation methods for performance efficiency include quantified textual requirements, response time metrics, and load testing results. This suggests that there are established practices for measuring and documenting performance requirements.

2. **Usability**:
   - Usability is also marked as highly important, with similar values (0 and 1) indicating varying levels of focus on usability across projects.
   - Documentation methods for usability include user stories, prototypes, and user acceptance testing, which are essential for ensuring that the system meets user needs effectively.

3. **Non-Functional Requirements**:
   - The DataFrame includes documentation on non-functional requirements related to both performance efficiency and usability, indicating that these aspects are formally recognized and documented in various projects.

4. **Quantified Requirements**:
   - There are references to quantified textual requirements, which are crucial for setting clear and measurable performance goals, such as the loading time specified in the requirement.

Based on this summary, the requirement "The system must load within 2 seconds under a normal load of 1,000 users" is a good requirement as it is specific, measurable, and aligns with the documented practices for performance efficiency in the DataFrame. It sets a clear expectation for system performance under defined conditions, which is essential for effective requirements engineering.
Source: napire data

Query: is the following requirement good? "the system must load within 2 seconds under a normal load of 1,000 users."
Context: furthermore, we collected the time spent for detecting defects. 
this allows us to compare the performance of the treatments 
in terms of efficiency, which is the metric that complements 
the answer to rq1. finally, we collected answers from the 
follow-up questionnaire. this questionnaire allowed us to 
receive feedback on the perceived usefulness and ease of use.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: system privacy 
system portability 
others 
percentage of answers 
figure 8: critical non-functional requirements of ml- 
enabled systems (n = 71) 
requirements with data (p = 53.556 [53.197, 53.915]), resolving 
conflicts (p = 42.346 [41.987, 42.706]), managing changing re- 
quirements (p = 40.915 [40.574, 41.257]), selecting metrics (p = 
[26.418, 27.021]). 
customer  expectactions
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: purpose, i.e., how well they benefit these requirements-affected
activities, can be effectively determined when (1) all affected
activities are known and (2) the performance of these activities
can be evaluated. the need for a systematic overview of (1)
requirements-affected activities as well as (2) the attributes
which quantify their performance has been well recognized in
Source: Measuring the Fitness-for-Purpose of Requirements An initial Model of Activities and Attributes.pdf

Context: (i.e. does the system satisfy the requirements?). in that sense, 
requirements verification is typically captured by (acceptance) 
testing. with verification and validation, overall, we evaluate 
requirements against stakeholder expectations. in that sense, 
we sometimes also prototype and showcase to the stakholders, 
perform formal verification where applicable, review the
Source: software4kmu learning nuggets.pdf

Context: ments that deﬁne properties of the system rela-
tive to other systems or circumstances12. when
searching for grammatical comparatives in re-
quirements, roughly 48% of the cases are of the
aforementioned kind. in roughly the same num-
ber of cases, however, the comparative describes a
condition. for example, if the requirement states
that if the system takes more than 1 second to re-
Source: Rapid quality assurance with Requirements Smells.pdf

Query: is the following requirement good? "the system must load within 2 seconds under a normal load of 1,000 users."
Context: The summarized information from the DataFrame regarding performance efficiency and usability indicates the following:

1. **Performance Efficiency**: 
   - The average score for performance efficiency is approximately 0.73, with a standard deviation of about 0.44. This suggests that while many projects consider performance efficiency important, there is a significant variation in how well they meet this requirement.
   - The minimum score is 0, indicating that some projects may not prioritize performance efficiency at all, while the maximum score is 1, showing that some projects fully meet this requirement.

2. **Usability**:
   - The average score for usability is also around 0.65, with a standard deviation of approximately 0.48. This indicates a moderate level of importance placed on usability across projects, but again, with considerable variation.
   - Similar to performance efficiency, the minimum score is 0, and the maximum score is 1.

3. **Requirements Elicitation**:
   - The data shows that various methods of requirements elicitation (such as analysis of existing documents, interviews, prototyping, and workshops) are utilized, with an average usage frequency of around 0.65 to 0.73 across these methods.

Based on this summary, while the requirement "the system must load within 2 seconds under a normal load of 1,000 users" aligns with the general emphasis on performance efficiency, the actual implementation and adherence to such a requirement can vary significantly among projects. Therefore, the effectiveness of this requirement would depend on the specific context and execution within a given project.

In conclusion, while the requirement is good in theory, its success would depend on the project's commitment to performance efficiency and the methods used to ensure it is met.
Source: napire data

Query: Whom to involve in the review of requirements?
Context: perspective.
involved stakeholders
at this phase in the requirement engineering process, various stakeholders should be involved to support the analysis. the leading stakeholders in requirement analysis are roles that have knowledge 
about the operational context and domain.
Source: software4kmu learning nuggets.pdf

Context: ments artifacts, however, need to involve all relevant
stakeholders [65], who must manually read and un-
derstand each requirements artifact. moreover, they
are diﬃcult to perform. they require a high domain
knowledge and expertise from the reviewers [65] and
the quality of their outcome depends on the quality of
the reviewer [75]. on top of all this, reviewers could
Source: Rapid quality assurance with Requirements Smells.pdf

Context: interested in the quality of the software system, while product 
managers also care about sustainability of the business model and 
balancing costs and quality of the product. 
in any case, capturing the stakeholders explicitly is important as 
they are the source for various information with respect to the 
operational context of a system and requirements (e.g. end users
Source: software4kmu learning nuggets.pdf

Context: compliance. moreover, stakeholders tend to want security 
requirement satisfaction to be very close to yes. third, the 
effort stakeholders might be willing to dedicate to satisfying 
sr also depends on the likelihood and impact of a failure to 
comply with them. this is even more challenging in the 
context of agile software projects because, apparently,
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: & decision
validation
training design
release
release planning
treatment design & design validation
brieﬂy summarised, we begin with a kickoﬀwhere the most important
stakeholders for the artefact model and their roles are identiﬁed, followed by
semi-structured interviews with these. subsequently, we review requirements
d. m´
endez fern´
andez, b. penzenstadler
Source: Artefact-based Requirements Engineering The AMDiRE Approach.pdf

Query: Whom to involve in the review of requirements?
Context: To involve in the review of requirements, the following roles should be considered based on their frequency of responsibility:

1. **Business Analyst** - 108 instances
2. **Project Lead / Project Manager** - 73 instances
3. **Requirements Engineer** - 63 instances
4. **Product Owner** - 62 instances
5. **Product Manager** - 41 instances
6. **Customer** - 29 instances
7. **Architect** - 19 instances
8. **Other** - 18 instances
9. **Developer** - 17 instances
10. **Nobody has the primary responsibility** - 15 instances

These roles are key participants in the requirements review process.
Source: napire data

Query: whom to involve in the review of requirements?
Context: ments artifacts, however, need to involve all relevant
stakeholders [65], who must manually read and un-
derstand each requirements artifact. moreover, they
are diﬃcult to perform. they require a high domain
knowledge and expertise from the reviewers [65] and
the quality of their outcome depends on the quality of
the reviewer [75]. on top of all this, reviewers could
Source: Rapid quality assurance with Requirements Smells.pdf

Context: interested in the quality of the software system, while product 
managers also care about sustainability of the business model and 
balancing costs and quality of the product. 
in any case, capturing the stakeholders explicitly is important as 
they are the source for various information with respect to the 
operational context of a system and requirements (e.g. end users
Source: software4kmu learning nuggets.pdf

Context: compliance. moreover, stakeholders tend to want security 
requirement satisfaction to be very close to yes. third, the 
effort stakeholders might be willing to dedicate to satisfying 
sr also depends on the likelihood and impact of a failure to 
comply with them. this is even more challenging in the 
context of agile software projects because, apparently,
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: the ﬁrst question directly evaluates our improvement approach for applica-
bility and usability, and the second question evaluates the appropriateness of
the resulting re reference model from the perspective of project participants.
during the intermediate evaluation, we conduct an assessment where the lead
of the process engineering group answers a questionnaire (jointly discussed with
Source: Improving Requirements Engineering by Artefact Orientation.pdf

Context: & decision
validation
training design
release
release planning
treatment design & design validation
brieﬂy summarised, we begin with a kickoﬀwhere the most important
stakeholders for the artefact model and their roles are identiﬁed, followed by
semi-structured interviews with these. subsequently, we review requirements
d. m´
endez fern´
andez, b. penzenstadler
Source: Artefact-based Requirements Engineering The AMDiRE Approach.pdf

Query: whom to involve in the review of requirements?
Context: To determine whom to involve in the review of requirements, the following relevant information can be summarized from the DataFrame:

1. **Who Responsible for Requirements Elicitation**: The most frequently mentioned role is the **Business Analyst**, which appears 108 times. Other roles may also be present but are less frequent.

2. **Relationship with Customer**: This column indicates the nature of the relationship with the customer, which can influence who should be involved in the review process.

3. **Stakeholders**: Identifying stakeholders is crucial as they are often key participants in the requirements review.

4. **Documentation Granularity**: The level of detail in documentation can affect the review process. The most common approach is documenting high-level requirements at the beginning of the project.

5. **Elicitation Methods**: Various methods such as interviews, workshops, and observations are used for requirements elicitation, which can indicate who should be involved based on their expertise.

In summary, the **Business Analyst**, relevant stakeholders, and individuals involved in customer relationships should be considered for involvement in the review of requirements. Additionally, those who participate in elicitation methods like interviews and workshops may also be valuable contributors to the review process.
Source: napire data

Query: What are quality requirements?
Context: engagement by the customer (∼6%), and a too high team distribution (∼6%).
in this case (figure 7), the main aﬀected categories were project or organiza-
tion (∼47%, i.e. 32 out of 68 eﬀects were from that category), product (∼22%),
and customer (∼19%). the main cited eﬀects for this problem were customer dis-
satisfaction (∼16%), time overrun (∼13%), and poor product quality (∼10%).
d. m´
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Context: as the obtained quality factors (and their practical value)
highly depend on the person deriving it, especially regarding
the expertise in the ﬁeld and, since deﬁnitions are vague,
experiences how the activities are carried out in practice. from
our experiences, we obtained more and more precise quality
factors when asking experienced testers compared to students.
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Context: our respondents also often have the role of a contractor. hence, the difficulties in gathering input by 
concrete customers, which might be hard to reach in anonymous markets, might explain the causes 
and effects in brazil, while the contractor role in germany demanding for stronger contracting 
components might explain the emphasis on the strict methods and the product. 
•
Source: Naming the Pain in Requirements Engineering Comparing Practices in Brazil and Germany.pdf

Context: judge the quality of requirements (and re) based on the extent
to which they are fit for purpose, i.e., how they impact the
attributes of requirements-affected activities [3]. still, research
on requirements quality is dominated by studies aiming to
determine the quality of a requirements specification solely
based on normative metrics [4].
recent endeavors to nuance requirements quality research
Source: Measuring the Fitness-for-Purpose of Requirements An initial Model of Activities and Attributes.pdf

Context: and completeness: first, discussing each quality factor and its
impacts on activities was seen as a validation of the company
guidelines. they considered re-evaluating guideline rules that
do not have a broad impact on the development process.
also, rules that have positive as well as negative impacts
should be debated within the company again, especially if
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Query: What are quality requirements?
Context: Quality requirements are essential attributes that a system must possess to ensure its effectiveness and user satisfaction. Based on the analysis of the DataFrame, the following average values for various quality requirements have been summarized:

1. **Compatibility** (co-existence, interoperability): 0.42
2. **Maintainability** (analysability, modularity, modifiability, reusability, testability): 0.56
3. **Performance Efficiency** (time behaviour, resource utilisation, capacity): 0.58
4. **Portability** (adaptability, installability, replaceability): 0.19
5. **Reliability** (availability, fault tolerance, maturity, recoverability): 0.59
6. **Security** (accountability, authenticity, confidentiality, integrity, non-repudiation): 0.50
7. **Safety** (freedom of risk for health or disaster): 0.28
8. **Usability** (accessibility, appropriateness, recognisability, learnability, operability, user error protection, user interface aesthetics): 0.63

These values indicate the importance and effectiveness of each quality requirement in the context of development.
Source: napire data

Query: what are quality requirements?
Context: incomplete and/or hidden re- 
quirements 
communication flaws between 
project team and customer 
moving targets (changing goals, 
business processes, and/or re- 
quirements) 
underspecified requirements 
that are too abstract 
timeboxing/not enough time 
in general 
stakeholders with difficulties in 
separating requirements from 
known solution designs 
insufficient support by cus- 
tomer
Source: Industrial Practices of Requirements Engineering for ML-Enabled Systems in Brazil.pdf

Context: judge the quality of requirements (and re) based on the extent
to which they are fit for purpose, i.e., how they impact the
attributes of requirements-affected activities [3]. still, research
on requirements quality is dominated by studies aiming to
determine the quality of a requirements specification solely
based on normative metrics [4].
recent endeavors to nuance requirements quality research
Source: Measuring the Fitness-for-Purpose of Requirements An initial Model of Activities and Attributes.pdf

Context: estimated duration
5 min
level
external ressources
dependencies
next item
goals (teaching 
perspective)
to familiarize learners with the various categories of requirements and their respective characteristics.
content description 
(teaching 
perspective)
overview of different types of requirements such as business, functional and non-functionalrequirements.
en
de
beginner  
intermediate
Source: software4kmu learning nuggets.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: rapid quality assurance with requirements smells
henning femmera,∗, daniel méndez fernándeza, stefan wagnerb, sebastian edera
asoftware & systems engineering, technische universität münchen, germany
binstitute of software technology, university of stuttgart, germany
abstract
context: bad requirements quality can cause expensive consequences during the software development
Source: Rapid quality assurance with Requirements Smells.pdf

Query: what are quality requirements?
Context: Quality requirements can be summarized based on the following key aspects:

1. **Performance Efficiency**: The average importance rating is approximately **0.58**. This reflects the significance of time behavior, resource utilization, and capacity in development.

2. **Reliability**: The average importance rating is around **0.59**. This encompasses aspects such as availability, fault tolerance, maturity, and recoverability.

3. **Security**: The average importance rating is about **0.50**. This includes accountability, authenticity, confidentiality, integrity, and non-repudiation.

4. **Safety**: The average importance rating is approximately **0.28**. This pertains to the freedom from risks related to health or disasters.

5. **Usability**: The average importance rating is around **0.63**. This covers accessibility, appropriateness, recognizability, learnability, operability, user error protection, and user interface aesthetics.

These ratings indicate the relative importance of each quality requirement in the context of development.
Source: napire data

Query: How to deal with ambiguous requirements?
Context: from requirements to their rationale or from requirements to the code level). we are currently working on
clarifying those potentially misleading variables by including examples into the questionnaire and making
the answer possibilities more precise. also, for the future replications, we need to collect more information
Source: Naming the Pain in Requirements Engineering A Design for a Global Family of Surveys and First Results from Germany.pdf

Context: 6. further refine and classification in order to achieve more clarity, completeness, and unambiguity​
7. conduct further analysis, refinement and completion as basis for further (stakeholder) feedback​
8. unless not approved by stakeholders, requirements remain candidates (or assumptions)​
9. since requirements elicitation is an iterative process, go back to 2.
requirements (elicitation) sources​
Source: software4kmu learning nuggets.pdf

Context: common confusion and pitfalls
confusion often arises when stakeholders focus on implementation details before fully understanding and agreeing the requirements. 
this can lead to a number of problems:
overlooking stakeholder needs: discussing solutions prematurely can cause stakeholders to miss the real needs, resulting in 
solutions that don't address the right problems.
Source: software4kmu learning nuggets.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: never be able to formally verify that the requirements are complet. it's therefore vital to take a pragmatic perspective here and ensure 
that each stakeholder agrees at least on the wording and essence of a requirement to ensure that it is consistent with all specified 
characteristics.
let us look at the above properties in a concrete example and refine a bad requirement together.
Source: software4kmu learning nuggets.pdf

Query: How to deal with ambiguous requirements?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how to deal with ambiguous requirements?
Context: 6. further refine and classification in order to achieve more clarity, completeness, and unambiguity​
7. conduct further analysis, refinement and completion as basis for further (stakeholder) feedback​
8. unless not approved by stakeholders, requirements remain candidates (or assumptions)​
9. since requirements elicitation is an iterative process, go back to 2.
requirements (elicitation) sources​
Source: software4kmu learning nuggets.pdf

Context: common confusion and pitfalls
confusion often arises when stakeholders focus on implementation details before fully understanding and agreeing the requirements. 
this can lead to a number of problems:
overlooking stakeholder needs: discussing solutions prematurely can cause stakeholders to miss the real needs, resulting in 
solutions that don't address the right problems.
Source: software4kmu learning nuggets.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: never be able to formally verify that the requirements are complet. it's therefore vital to take a pragmatic perspective here and ensure 
that each stakeholder agrees at least on the wording and essence of a requirement to ensure that it is consistent with all specified 
characteristics.
let us look at the above properties in a concrete example and refine a bad requirement together.
Source: software4kmu learning nuggets.pdf

Context: have to use a passkey to log in?
clarity: is the requirements clear and unambiguous to the customer? can there be missunderstandings towards which 
functionality requires a login?
example
requirement: the application must respond to user requests within 2 seconds.
verification activities:
define acceptance criteria: application responds within 2 seconds
Source: software4kmu learning nuggets.pdf

Query: how to deal with ambiguous requirements?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: Can you provide examples of user stories?
Context: we analyzed over 1,000 user stories containing roughly
28,000 words. for rq 2.2, we met with an experienced
scrum master and a long-term developer, who have
worked on several projects for techdivision.
6http://www.magento.com
7http://www.typo3.org
8https://atlassian.com/software/jira
case d: university of stuttgart. the requirements of
case d were created by 52 groups of three 2nd-year
Source: Rapid quality assurance with Requirements Smells.pdf

Context: technique is used in the next section. 
d. motivational example 
in the following, we demonstrate the application of our 
approach in an exemplary setting. table 7 shows a user story 
and its set of security specifications with some defects 
commonly applicable to any agile software project. 
table 7.input of the approach as agile requirements specifications. 
user story 
security specification
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: involving free form or with some constraints [43]. for this 
reason, the approach is focused on the user story format. 
these stories are often expressed in a simple sentence using 
the role/feature/reason schema and structured as follows: as a 
[role], i want to [feature], so that [reason]. 
user stories are analyzed independently. it makes sense to
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: requirements lists 
prototypes 
use case models 
data models 
vision document 
not documented 
goal models 
ml canvas 
bdd scenarios 
others 
percentage of answers 
data 
quality 
model 
reliability 
system performance 
model explainability 
system usability 
system reliability 
system maintanibility 
system security 
model 
transparency 
system compatibility 
model accountability
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: development neglects documentation and as such the trace from goals and constraints to more technical requirements is missing. 
however, given that the typical requirements artifacts in agile software development are 
themes: top-level objectives
epics: higher-level functionality represented by a group of user stories
user stories: brief statement of intent when interacting with the system
Source: software4kmu learning nuggets.pdf

Query: Can you provide examples of user stories?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: can you provide examples of user stories?
Context: we analyzed over 1,000 user stories containing roughly
28,000 words. for rq 2.2, we met with an experienced
scrum master and a long-term developer, who have
worked on several projects for techdivision.
6http://www.magento.com
7http://www.typo3.org
8https://atlassian.com/software/jira
case d: university of stuttgart. the requirements of
case d were created by 52 groups of three 2nd-year
Source: Rapid quality assurance with Requirements Smells.pdf

Context: technique is used in the next section. 
d. motivational example 
in the following, we demonstrate the application of our 
approach in an exemplary setting. table 7 shows a user story 
and its set of security specifications with some defects 
commonly applicable to any agile software project. 
table 7.input of the approach as agile requirements specifications. 
user story 
security specification
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: involving free form or with some constraints [43]. for this 
reason, the approach is focused on the user story format. 
these stories are often expressed in a simple sentence using 
the role/feature/reason schema and structured as follows: as a 
[role], i want to [feature], so that [reason]. 
user stories are analyzed independently. it makes sense to
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: requirements lists 
prototypes 
use case models 
data models 
vision document 
not documented 
goal models 
ml canvas 
bdd scenarios 
others 
percentage of answers 
data 
quality 
model 
reliability 
system performance 
model explainability 
system usability 
system reliability 
system maintanibility 
system security 
model 
transparency 
system compatibility 
model accountability
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: development neglects documentation and as such the trace from goals and constraints to more technical requirements is missing. 
however, given that the typical requirements artifacts in agile software development are 
themes: top-level objectives
epics: higher-level functionality represented by a group of user stories
user stories: brief statement of intent when interacting with the system
Source: software4kmu learning nuggets.pdf

Query: can you provide examples of user stories?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: How to document a requirement?
Context: 3. conduct structured elicitation by applying elicitation (and creativity) techniques​
 such as interviews, questionnaires… (more on techniques below)
4. document requirements, for example with the help of checklists and templates (e.g. volere or self-made)​
5. structure and transfer to models in order to provide a more structured representation: what belongs where?​
Source: software4kmu learning nuggets.pdf

Context: tive programming environments that can be used to process data and create ml 
models, appear as the most used tool for documenting requirements. again, this 
requirements overthinking (0.38%) 
project (0.38%) 
domain complexity (0.38%) strategic alignments (0.38%) 
solution uniqueness (0.38%) 
method (0.38%) 
difficulties in value creation (0.38%) 
define priorities (0.38%)
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: draft  
title
what makes a good requirement?
was macht eine gute anforderung aus?
tags
requirements quality
anforderungsqualität
estimated duration
10 min
level
external ressources
international standards for systems and software 
engineering
requirements engineering quick check
requirements smells
dependencies
next item
id 1.1.1.9 - form of requirements  
goals (teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: never be able to formally verify that the requirements are complet. it's therefore vital to take a pragmatic perspective here and ensure 
that each stakeholder agrees at least on the wording and essence of a requirement to ensure that it is consistent with all specified 
characteristics.
let us look at the above properties in a concrete example and refine a bad requirement together.
Source: software4kmu learning nuggets.pdf

Query: How to document a requirement?
Context: To document a requirement, the following approaches and insights can be summarized from the DataFrame:

1. **Compatibility Documentation**: The most common method is using non-quantified textual requirements, which was noted by multiple respondents.

2. **Maintainability Documentation**: Various methods are employed, but specific details are not quantified in the summary.

3. **Performance Efficiency Documentation**: Similar to maintainability, the documentation methods are varied but not explicitly detailed.

4. **Portability Documentation**: The approaches to documenting portability are also diverse, with no specific dominant method identified.

5. **Reliability Documentation**: Various strategies are used, but again, specific details are not provided.

6. **Safety Documentation**: The methods for documenting safety requirements are not explicitly detailed in the summary.

7. **Security Documentation**: Different approaches are utilized, but specific methods are not highlighted.

8. **Usability Documentation**: The documentation methods for usability are varied, with no clear consensus on a single approach.

9. **Documentation Granularity**: The responses indicate a range of granularity in documentation practices, but specific details are not quantified.

10. **Elicitation and Refinement**: On average, about 68.75% of respondents indicated that they elicit and refine requirements in several iterations, suggesting a common practice in the documentation process.

Overall, while the DataFrame provides insights into various methods of documenting requirements, it lacks specific quantitative details for many categories.
Source: napire data

Query: how to document a requirement?
Context: 3. conduct structured elicitation by applying elicitation (and creativity) techniques​
 such as interviews, questionnaires… (more on techniques below)
4. document requirements, for example with the help of checklists and templates (e.g. volere or self-made)​
5. structure and transfer to models in order to provide a more structured representation: what belongs where?​
Source: software4kmu learning nuggets.pdf

Context: tive programming environments that can be used to process data and create ml 
models, appear as the most used tool for documenting requirements. again, this 
requirements overthinking (0.38%) 
project (0.38%) 
domain complexity (0.38%) strategic alignments (0.38%) 
solution uniqueness (0.38%) 
method (0.38%) 
difficulties in value creation (0.38%) 
define priorities (0.38%)
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: draft  
title
what makes a good requirement?
was macht eine gute anforderung aus?
tags
requirements quality
anforderungsqualität
estimated duration
10 min
level
external ressources
international standards for systems and software 
engineering
requirements engineering quick check
requirements smells
dependencies
next item
id 1.1.1.9 - form of requirements  
goals (teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Query: how to document a requirement?
Context: To document a requirement effectively, the following methods and practices can be utilized based on the summarized data:

1. **Using Non-Quantified Textual Requirements**: This involves documenting requirements in a descriptive manner without specific metrics.

2. **Using Quantified Textual Requirements**: This method includes specifying requirements with measurable criteria.

3. **Using Quantified and Non-Quantified Textual Requirements**: A combination of both approaches can provide flexibility and clarity.

4. **Documentation Granularity**: It is essential to determine the level of detail required in the documentation, which can range from high-level overviews to detailed specifications.

5. **Following Company Guidelines**: Adhering to established company standards and practices ensures consistency and compliance.

6. **Using Diagrams**: Visual representations can enhance understanding and communication of requirements.

7. **Team Reviews**: Engaging team members in reviewing requirements can help identify gaps and improve accuracy.

8. **Test Plans**: Incorporating test plans into the documentation process ensures that requirements are verifiable.

9. **Specific Guidelines and Standards**: Referencing applicable standards can provide a framework for documenting requirements.

10. **Iterative Refinement**: Continuously refining requirements through iterations helps adapt to changes and improve clarity.

These practices can help ensure that requirements are well-documented, clear, and actionable, facilitating better communication among stakeholders and enhancing project outcomes.
Source: napire data

Query: How can I identify relevant stakeholders?
Context: stakeholders and artifacts).
needs to the requirements artifact and thus must be involved
in the deﬁnition of the abre-qm. accordingly, missing
stakeholders as well as unnecessary stakeholders can lead to
a suboptimal deﬁnition of the quality model. a project lead
is usually a good starting point for ﬁnding out who interacts
with the re artifact.
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Context: step 1.
as the ﬁrst step, we select the projects to participate in the ﬁeld study from a set of (project)
candidates. to identify candidates, our project partner provides us with a list of projects and corresponding
contact persons, which we contact by email. each project is represented by one person, who either is assigned
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: stakeholders, legacy system​
neutral​
neutral​
involvement​
reality​
apprenticing​
stakeholders, legacy system​
neutral​
individual​
involvement​
reality​
contextual inquiry​
stakeholders, legacy system​
neutral​
individual​
involvement​
reality​
brainstorming​
stakeholders​
questioning​
group​
analytical​
neutral​
analogy technique​
stakeholders​
questioning​
group​
analytical​
projecting​
Source: software4kmu learning nuggets.pdf

Context: main: the industrial sector, the general relationship with the customer and characteristics of the diﬀerent
stakeholders.
especially whether project participants have weak access to business process information
(e.g., for reasons of conﬁdentiality) has an inﬂuence on the ability and the necessity to specify the roi
calculations, the value for the customer and the business risk analysis.
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: - laying the foundation with the 
relevant information, for example operational workflows in a 
company capturing processes that shall be supported (partially) 
with the system under consideration. this context includes also 
the external systems our system under consideration shall 
interact with.
2. identify stakeholders​
 - laying the foundation with the relevant
Source: software4kmu learning nuggets.pdf

Query: How can I identify relevant stakeholders?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how can i identify relevant stakeholders?
Context: stakeholders and artifacts).
needs to the requirements artifact and thus must be involved
in the deﬁnition of the abre-qm. accordingly, missing
stakeholders as well as unnecessary stakeholders can lead to
a suboptimal deﬁnition of the quality model. a project lead
is usually a good starting point for ﬁnding out who interacts
with the re artifact.
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Context: step 1.
as the ﬁrst step, we select the projects to participate in the ﬁeld study from a set of (project)
candidates. to identify candidates, our project partner provides us with a list of projects and corresponding
contact persons, which we contact by email. each project is represented by one person, who either is assigned
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: stakeholders, legacy system​
neutral​
neutral​
involvement​
reality​
apprenticing​
stakeholders, legacy system​
neutral​
individual​
involvement​
reality​
contextual inquiry​
stakeholders, legacy system​
neutral​
individual​
involvement​
reality​
brainstorming​
stakeholders​
questioning​
group​
analytical​
neutral​
analogy technique​
stakeholders​
questioning​
group​
analytical​
projecting​
Source: software4kmu learning nuggets.pdf

Context: main: the industrial sector, the general relationship with the customer and characteristics of the diﬀerent
stakeholders.
especially whether project participants have weak access to business process information
(e.g., for reasons of conﬁdentiality) has an inﬂuence on the ability and the necessity to specify the roi
calculations, the value for the customer and the business risk analysis.
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: - laying the foundation with the 
relevant information, for example operational workflows in a 
company capturing processes that shall be supported (partially) 
with the system under consideration. this context includes also 
the external systems our system under consideration shall 
interact with.
2. identify stakeholders​
 - laying the foundation with the relevant
Source: software4kmu learning nuggets.pdf

Query: how can i identify relevant stakeholders?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: What are the benefits of using focus groups for elicitation?
Context: e. validity procedures
to increase the reliability of the statements of the industry
participants, and thus the internal validity, we perform a
group interview. through the interaction between the group
members, memories and experiences of the participants are
stimulated. this way, they can produce insights that would
be less accessible without this technique. furthermore, the
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: as the focus group participants were available, and the results
of the previous session were analyzed. overall, the sessions
took place over twelve months. as a result of the focus
group sessions with the first group of legal researchers, we
formulated four challenges. after that, we conducted another
one-hour-long focus group with two other legal researchers
Source: On Developing an Artifact-based Approach to Regulatory Requirements Engineering.pdf

Context: our respondents also often have the role of a contractor. hence, the difficulties in gathering input by 
concrete customers, which might be hard to reach in anonymous markets, might explain the causes 
and effects in brazil, while the contractor role in germany demanding for stronger contracting 
components might explain the emphasis on the strict methods and the product. 
•
Source: Naming the Pain in Requirements Engineering Comparing Practices in Brazil and Germany.pdf

Context: cross-company data helpful for dca all three participants 
agreed. participant #1, for instance, mentioned “i agree. 
mainly because if we wouldn’t have the suggested causes 
we could possibly limit our analysis to the causes that we 
remember, not considering relevant causes that may have 
happened in our context. the data supports the analysis, 
making it quicker and more effective”.
Source: Supporting Defect Causal Analysis in Practice with Cross-Company Data on Causes of Requirements Engineering Problems.pdf

Context: furthermore, we collected the time spent for detecting defects. 
this allows us to compare the performance of the treatments 
in terms of efficiency, which is the metric that complements 
the answer to rq1. finally, we collected answers from the 
follow-up questionnaire. this questionnaire allowed us to 
receive feedback on the perceived usefulness and ease of use.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Query: What are the benefits of using focus groups for elicitation?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: what are the benefits of using focus groups for elicitation?
Context: e. validity procedures
to increase the reliability of the statements of the industry
participants, and thus the internal validity, we perform a
group interview. through the interaction between the group
members, memories and experiences of the participants are
stimulated. this way, they can produce insights that would
be less accessible without this technique. furthermore, the
Source: A Case Study on the Application of an Artefact-Based Requirements Engineering Approach.pdf

Context: as the focus group participants were available, and the results
of the previous session were analyzed. overall, the sessions
took place over twelve months. as a result of the focus
group sessions with the first group of legal researchers, we
formulated four challenges. after that, we conducted another
one-hour-long focus group with two other legal researchers
Source: On Developing an Artifact-based Approach to Regulatory Requirements Engineering.pdf

Context: our respondents also often have the role of a contractor. hence, the difficulties in gathering input by 
concrete customers, which might be hard to reach in anonymous markets, might explain the causes 
and effects in brazil, while the contractor role in germany demanding for stronger contracting 
components might explain the emphasis on the strict methods and the product. 
•
Source: Naming the Pain in Requirements Engineering Comparing Practices in Brazil and Germany.pdf

Context: cross-company data helpful for dca all three participants 
agreed. participant #1, for instance, mentioned “i agree. 
mainly because if we wouldn’t have the suggested causes 
we could possibly limit our analysis to the causes that we 
remember, not considering relevant causes that may have 
happened in our context. the data supports the analysis, 
making it quicker and more effective”.
Source: Supporting Defect Causal Analysis in Practice with Cross-Company Data on Causes of Requirements Engineering Problems.pdf

Context: furthermore, we collected the time spent for detecting defects. 
this allows us to compare the performance of the treatments 
in terms of efficiency, which is the metric that complements 
the answer to rq1. finally, we collected answers from the 
follow-up questionnaire. this questionnaire allowed us to 
receive feedback on the perceived usefulness and ease of use.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Query: what are the benefits of using focus groups for elicitation?
Context: The analysis of the DataFrame reveals several benefits associated with using focus groups for requirements elicitation. Here are the summarized insights based on the relevant columns:

1. **Workshops and Focus Groups**: Approximately 56.76% of respondents indicated that workshops and focus groups are utilized for requirements elicitation.
2. **Iterative Refinement**: About 69.88% of participants reported that they elicit and refine requirements in several iterations, suggesting that focus groups facilitate ongoing feedback and adjustments.
3. **Dedicated Project Phase**: 30.74% of respondents noted that requirements are refined in a specifically dedicated project phase, indicating structured engagement through focus groups.
4. **Interviews**: 69.47% of the respondents also use interviews, which can complement focus group discussions by providing deeper insights.
5. **Prototyping**: 48.16% indicated the use of prototyping, which can be enhanced by feedback gathered in focus groups.
6. **Observations**: 35.04% of participants utilize observations, which can be informed by discussions in focus groups.
7. **External Experts**: 17.21% involve external experts, suggesting that focus groups can help identify when expert input is necessary.
8. **Design Thinking / Lean Startup**: 19.88% of respondents apply design thinking or lean startup methodologies, which can be supported by insights from focus groups.
9. **Risk Analyses**: 19.67% of participants conduct risk analyses, which can benefit from the diverse perspectives gathered in focus groups.
10. **Analysis of Existing Documents**: 59.84% of respondents analyze existing documents, indicating that focus groups can help contextualize and interpret these documents.

Overall, focus groups appear to enhance the requirements elicitation process by promoting iterative refinement, facilitating structured discussions, and integrating various elicitation techniques.
Source: napire data

Query: How can I conduct effective stakeholder interviews?
Context: requirements elicitation can be done in multiple techniques which are adapted according to the stakeholder characteristics.
inhibition and distortion (e.g., by personal questions)
example 2: questionnaire-based survey
similar to interviews, but ​
no possibility to interact​
no possibility for inquiries​
usually conducted individually​
scales better than interviews​
Source: software4kmu learning nuggets.pdf

Context: stakeholder
p3
specialist engineer
stakeholder
p4
it product owner
management
p5
experienced engineer
stakeholder
p6
senior engineer
stakeholder
p7
senior engineer
contributor
p8
senior engineer
stakeholder
p9
engineer
engineer invited for discussion
p10
expert engineer
experienced engineer invited for discussion
the interviews were conducted through microsoft teamstm and
Source: An investigation of causes and effects of trust in Boundary Artefacts.pdf

Context: strong dependency on the knowledge about the customers and their domain. in particular, the less familiar
customers are (e.g., in the ﬁrst development project for this customer), the higher the probability of deﬁning
system success factors and also acceptance criteria.
further parameters that the interviewees mentioned consider the stakeholders’ characteristics. the avail-
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: content creation and management from the contributors’ side and
evaluate the trust of the stakeholders concerning the ba.
3.2. data collection
the data for this study was collected by means of interviews, archive
documents, workshop, and informal conversations with practitioners.
the first and fourth authors had full access to the company network
Source: An investigation of causes and effects of trust in Boundary Artefacts.pdf

Context: whether and how they would integrate it in their
context. we asked those questions openly and tran-
scribed the answers for validation by the interviewees
and later coding. in the following, we report on the
results structured by topics. where applicable, we
provide the verbatim answers in relation to their cases
(a, b or c).
overall evaluation. in general,
all practitioners
Source: Rapid quality assurance with Requirements Smells.pdf

Query: How can I conduct effective stakeholder interviews?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how can i conduct effective stakeholder interviews?
Context: requirements elicitation can be done in multiple techniques which are adapted according to the stakeholder characteristics.
inhibition and distortion (e.g., by personal questions)
example 2: questionnaire-based survey
similar to interviews, but ​
no possibility to interact​
no possibility for inquiries​
usually conducted individually​
scales better than interviews​
Source: software4kmu learning nuggets.pdf

Context: interested in the quality of the software system, while product 
managers also care about sustainability of the business model and 
balancing costs and quality of the product. 
in any case, capturing the stakeholders explicitly is important as 
they are the source for various information with respect to the 
operational context of a system and requirements (e.g. end users
Source: software4kmu learning nuggets.pdf

Context: stakeholder
p3
specialist engineer
stakeholder
p4
it product owner
management
p5
experienced engineer
stakeholder
p6
senior engineer
stakeholder
p7
senior engineer
contributor
p8
senior engineer
stakeholder
p9
engineer
engineer invited for discussion
p10
expert engineer
experienced engineer invited for discussion
the interviews were conducted through microsoft teamstm and
Source: An investigation of causes and effects of trust in Boundary Artefacts.pdf

Context: whether and how they would integrate it in their
context. we asked those questions openly and tran-
scribed the answers for validation by the interviewees
and later coding. in the following, we report on the
results structured by topics. where applicable, we
provide the verbatim answers in relation to their cases
(a, b or c).
overall evaluation. in general,
all practitioners
Source: Rapid quality assurance with Requirements Smells.pdf

Context: content creation and management from the contributors’ side and
evaluate the trust of the stakeholders concerning the ba.
3.2. data collection
the data for this study was collected by means of interviews, archive
documents, workshop, and informal conversations with practitioners.
the first and fourth authors had full access to the company network
Source: An investigation of causes and effects of trust in Boundary Artefacts.pdf

Query: how can i conduct effective stakeholder interviews?
Context: To conduct effective stakeholder interviews, consider the following summarized insights derived from the DataFrame:

1. **Responsible for Requirements Elicitation**:
   - The most common roles responsible for requirements elicitation include Business Analysts, Project Leads/Managers, and Product Owners.

2. **Requirements Elicitation with Interviews**:
   - A significant majority of projects utilize interviews for requirements elicitation, with a high count of affirmative responses indicating their effectiveness.

3. **Requirements Elicitation with Workshops**:
   - Workshops and focus groups are also frequently used, suggesting a collaborative approach to gathering requirements.

4. **Requirements Elicitation with External Experts**:
   - There is less reliance on external experts, indicating that most teams prefer internal resources for requirements gathering.

5. **Requirements Elicitation with Observations**:
   - Observations are used in a notable number of cases, highlighting the importance of understanding user interactions and needs.

6. **Documentation Granularity**:
   - Most teams document high-level requirements initially and refine them into detailed requirements, which is crucial for clarity and alignment.

7. **Satisfaction with Requirements Engineering**:
   - A majority of respondents express satisfaction with their requirements engineering processes, indicating a positive perception of their methods.

8. **Reasons for Satisfaction**:
   - Satisfaction often stems from the ability to meet customer needs and the effectiveness of the requirements elicitation processes.

9. **Consequences of Satisfaction**:
   - Positive outcomes from effective requirements elicitation include successful project completions and higher satisfaction among end users.

10. **Top Problems Identified**:
    - Common challenges include communication flaws between the project and the customer, incomplete requirements, and time constraints, which should be addressed during interviews to ensure clarity and alignment.

These insights can guide the preparation and execution of stakeholder interviews, focusing on collaboration, clarity, and addressing common challenges.
Source: napire data

Query: How does this requirement contribute to the project? Requirement: "The system must allow real-time data synchronization across multiple platforms."
Context: managers, developers, testers and end users all bring unique perspectives that enrich the understanding and management of 
requirements. consensus among all stakeholders should confirm the need to implement a particular requirement.
misconception 7: “a perfect re guarantees a successful project”.
Source: software4kmu learning nuggets.pdf

Context: as our german respondents) have moving targets as an echoing problem, which could also be a 
reason for suppressing potential communication problems, which seem more prominent in brazil. 
• 
agile methods strongly depend on human-intensive exchange, collaboration, and trust, which, if not 
apparent, might quickly manifest as problems in a project. 
brazil 
germany 
problem 
prio 1 
prio 2
Source: Naming the Pain in Requirements Engineering Comparing Practices in Brazil and Germany.pdf

Context: these artifacts—both data sets and implementations—represent essential contributions fa-
cilitating empirical research and technology transfer. while the (annotated) data sets are the
main driver for developing new and improving existing implementations for quality factor
detection, implementations are the tools to be deployed in industry for actual integration and
Source: Let's Stop Building at the Feet of Giants Recovering unavailable Requirements Quality Artifacts.pdf

Context: backbone of project execution benefits (1) syntactic consistency and completeness of 
the results being compliant to the domain-specific reference model, (2) seamless mod-
elling of the results and continuity within the development process chain and, (3) can 
be customised to individual needs. such a customisation can be performed at organisa-
Source: A Meta Model for Artefact-Orientation Fundamentals and Lessons Learned in Requirements Engineering.pdf

Context: this requirement does not specify what “advanced features“ are, leaving it’s interpretation to the respective stakeholder.
the system should respond quickly to user input.
this requirements does not specify what “quickly” means, again leaving it to the stakeholders interpretation.
context of 
use
<a longer statement of the context of use if needed>
scope
Source: software4kmu learning nuggets.pdf

Query: How does this requirement contribute to the project? Requirement: "The system must allow real-time data synchronization across multiple platforms."
Context: The requirement "The system must allow real-time data synchronization across multiple platforms" contributes to the project in several ways, as summarized below:

1. **Performance Efficiency**: The average performance efficiency score is approximately **0.58**, indicating a moderate emphasis on performance aspects such as time behavior and resource utilization, which are crucial for real-time synchronization.

2. **Reliability**: The average reliability score is around **0.59**, suggesting that ensuring availability and fault tolerance is important for maintaining consistent data synchronization across platforms.

3. **Usability**: The average usability score is about **0.63**, reflecting a strong focus on user experience, which is essential for users interacting with synchronized data across different platforms.

4. **Security**: The average security score is approximately **0.51**, highlighting the importance of maintaining data integrity and confidentiality during synchronization processes.

5. **Agile vs Plan-driven Approach**: The project leans towards a hybrid approach, with **147** instances of hybrid methodologies, indicating flexibility in adapting to changes, which is beneficial for implementing real-time features.

6. **Documentation Granularity**: The majority of projects (319 instances) document high-level requirements initially and refine them later, which supports iterative development and adjustments needed for real-time synchronization.

7. **Goals**: The goals are primarily focused on achieving a score of **0** (297 instances), indicating a strong alignment towards meeting basic requirements, which may include real-time capabilities.

8. **Quality Properties**: A significant number of projects (334 instances) emphasize quality properties, which are essential for ensuring that the real-time synchronization feature meets user expectations.

9. **Stakeholders**: There are **349** instances where stakeholders are engaged, which is critical for gathering requirements and feedback on the synchronization feature.

10. **Top Problems**: The most common issues include communication flaws between the project and the customer (71 instances) and time constraints (58 instances), which can impact the successful implementation of real-time synchronization.

Overall, the requirement for real-time data synchronization is supported by a focus on performance, reliability, usability, and security, along with a collaborative approach to stakeholder engagement and documentation practices.
Source: napire data

Query: how does this requirement contribute to the project? requirement: "the system must allow real-time data synchronization across multiple platforms."
Context: managers, developers, testers and end users all bring unique perspectives that enrich the understanding and management of 
requirements. consensus among all stakeholders should confirm the need to implement a particular requirement.
misconception 7: “a perfect re guarantees a successful project”.
Source: software4kmu learning nuggets.pdf

Context: these artifacts—both data sets and implementations—represent essential contributions fa-
cilitating empirical research and technology transfer. while the (annotated) data sets are the
main driver for developing new and improving existing implementations for quality factor
detection, implementations are the tools to be deployed in industry for actual integration and
Source: Let's Stop Building at the Feet of Giants Recovering unavailable Requirements Quality Artifacts.pdf

Context: requests for developing web applications, e.g., sending 
sensitive information to other software systems and deleting 
data. when doing so, we relied as an orientation on sr 
specifications from real industrial software projects as used by 
our industry partners. our goal is to increase the similarity to 
the studied population units, but did not use real specifications
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: backbone of project execution benefits (1) syntactic consistency and completeness of 
the results being compliant to the domain-specific reference model, (2) seamless mod-
elling of the results and continuity within the development process chain and, (3) can 
be customised to individual needs. such a customisation can be performed at organisa-
Source: A Meta Model for Artefact-Orientation Fundamentals and Lessons Learned in Requirements Engineering.pdf

Context: this requirement does not specify what “advanced features“ are, leaving it’s interpretation to the respective stakeholder.
the system should respond quickly to user input.
this requirements does not specify what “quickly” means, again leaving it to the stakeholders interpretation.
context of 
use
<a longer statement of the context of use if needed>
scope
Source: software4kmu learning nuggets.pdf

Query: how does this requirement contribute to the project? requirement: "the system must allow real-time data synchronization across multiple platforms."
Context: The analysis of the relevant columns in the DataFrame provides the following insights regarding how the requirement for "the system must allow real-time data synchronization across multiple platforms" contributes to the project:

1. **Compatibility**: The average importance of compatibility and interoperability is approximately 0.42, indicating that this requirement is moderately important for ensuring that the system can work seamlessly across different platforms.

2. **Maintainability**: The maintainability score suggests that the requirement supports the system's ability to be analyzed, modified, and reused effectively, which is crucial for long-term project success.

3. **Performance Efficiency**: The performance efficiency score is not explicitly provided, but the requirement likely enhances the system's ability to utilize resources effectively, ensuring timely data synchronization.

4. **Portability**: The requirement contributes to the system's adaptability and installability across various platforms, which is essential for user accessibility.

5. **Reliability**: The average reliability score indicates that the requirement is important for ensuring system availability and fault tolerance, which are critical for real-time operations.

6. **Security**: The requirement may also enhance security measures, ensuring that data synchronization does not compromise accountability and confidentiality.

7. **Usability**: The requirement likely improves usability by ensuring that users can access synchronized data easily across platforms.

8. **Goals**: The requirement aligns with project goals by facilitating efficient data management and user satisfaction.

9. **Quality Properties**: The requirement contributes positively to the overall quality of the system, ensuring that it meets user expectations for real-time functionality.

10. **Stakeholders**: The majority of stakeholders (349 out of 455) indicate a preference for the requirement, suggesting strong support for its implementation.

Overall, the requirement for real-time data synchronization is crucial for enhancing compatibility, maintainability, reliability, and usability, thereby contributing significantly to the project's success.
Source: napire data

Query: How to deal with running out of time in the requirements phase?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: -
cross-cutting process aspects
time-boxing
+
+
+
+
existence external parties
+
+
+
+
+
+
external acceptance tests
+
+
+
+
+
+
+
explicit assignment of re
+
high amount of requirements
+
+
+
long project duration
+
+
+
+
estimations of functional complexity
+
weak given documentation
+
change mgmt. established
+
+
+
+
+
+
standardised design process
+
+
+
+
+
+
+
+
+
+
+
+
large team-size
+
+
+
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: requirements. this can be supported by integrating reuse of 
artefacts (e.g. requirements, test cases), proper scheduling of 
changes, accompanied with management of variability within 
requirements.
further information on requirements management
key takeaway
requirements engineering, independent of how it is performed 
spans five phases:
requirements elicitation: to gather requirements
Source: software4kmu learning nuggets.pdf

Context: strategies, which are the responses to speciﬁc project parameters. fourth, we investigate by statistical tests
the eﬀort spent in each strategy in relation to the eﬀort spent in change requests to evaluate the eﬃciency
of execution strategies.
results: we identiﬁed three artefact patterns and corresponding execution strategies. each strategy
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: be done." by focusing on the problem first and identifying solutions second, organizations can ensure that they meet the requirements 
of stakeholders, consider all project limitations and scope, and choose the best possible solution. this approach helps to streamline the 
process and achieve the desired outcomes more efficiently.
types and forms of requirements
Source: software4kmu learning nuggets.pdf

Query: How to deal with running out of time in the requirements phase?
Context: To address the issue of running out of time in the requirements phase, the following insights can be drawn from the summarized data:

1. **Time Constraints**: A significant number of responses indicate that time boxing and insufficient time in general are common problems, with the most frequent response being "Rather applies."

2. **Top Problems Identified**:
   - The most frequently mentioned problems include:
     - Time boxing and not having enough time in general.
     - Communication flaws within the project team.
     - Incomplete or hidden requirements.
     - Insufficient support by project leads.

3. **Causes of Problems**:
   - The leading causes for these problems often relate to:
     - Customers not clearly articulating their needs.
     - Stakeholders having difficulties in separating requirements from known solutions.
     - Inconsistent requirements leading to confusion.

### Recommendations:
- **Improve Communication**: Enhance communication between stakeholders and the project team to ensure clarity in requirements.
- **Set Realistic Timelines**: Establish more realistic timelines for the requirements phase to accommodate thorough discussions and clarifications.
- **Engage Customers Early**: Involve customers early in the requirements gathering process to better understand their needs and expectations.
- **Iterative Feedback**: Implement iterative feedback loops to refine requirements continuously, reducing the risk of running out of time later in the project. 

By focusing on these areas, teams can better manage time constraints during the requirements phase.
Source: napire data

Query: how to deal with running out of time in the requirements phase?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: -
cross-cutting process aspects
time-boxing
+
+
+
+
existence external parties
+
+
+
+
+
+
external acceptance tests
+
+
+
+
+
+
+
explicit assignment of re
+
high amount of requirements
+
+
+
long project duration
+
+
+
+
estimations of functional complexity
+
weak given documentation
+
change mgmt. established
+
+
+
+
+
+
standardised design process
+
+
+
+
+
+
+
+
+
+
+
+
large team-size
+
+
+
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: requirements. this can be supported by integrating reuse of 
artefacts (e.g. requirements, test cases), proper scheduling of 
changes, accompanied with management of variability within 
requirements.
further information on requirements management
key takeaway
requirements engineering, independent of how it is performed 
spans five phases:
requirements elicitation: to gather requirements
Source: software4kmu learning nuggets.pdf

Context: strategies, which are the responses to speciﬁc project parameters. fourth, we investigate by statistical tests
the eﬀort spent in each strategy in relation to the eﬀort spent in change requests to evaluate the eﬃciency
of execution strategies.
results: we identiﬁed three artefact patterns and corresponding execution strategies. each strategy
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: be done." by focusing on the problem first and identifying solutions second, organizations can ensure that they meet the requirements 
of stakeholders, consider all project limitations and scope, and choose the best possible solution. this approach helps to streamline the 
process and achieve the desired outcomes more efficiently.
types and forms of requirements
Source: software4kmu learning nuggets.pdf

Query: how to deal with running out of time in the requirements phase?
Context: To address the issue of running out of time in the requirements phase, the following insights can be drawn from the summarized data:

### Common Problems Encountered:
1. **Time boxing / Not enough time in general**: This was identified as a significant problem, indicating that time constraints are a prevalent issue.
2. **Incomplete or hidden requirements**: A frequent challenge that can lead to misunderstandings and delays.
3. **Communication flaws**: Both between the project team and with the customer, which can exacerbate time management issues.
4. **Moving targets**: Changing goals and business processes can disrupt timelines and project focus.
5. **Inconsistent requirements**: Variability in requirements can lead to confusion and inefficiencies.

### Causes of Problems:
1. **A lot of requirements to address**: This suggests that the volume of requirements can overwhelm the team, leading to time shortages.
2. **Weak access to customer needs**: Difficulty in understanding customer requirements can lead to misalignment and wasted time.
3. **Poorly specified requirements**: Ambiguity in requirements can cause delays as teams seek clarification.
4. **Insufficient support from project leads or customers**: Lack of guidance can hinder progress and lead to time overruns.

### Recommendations:
- **Improve Communication**: Establish clearer channels for communication between the project team and stakeholders to ensure everyone is aligned on requirements and timelines.
- **Prioritize Requirements**: Focus on the most critical requirements first to ensure that essential features are delivered on time.
- **Implement Agile Practices**: Consider iterative development and regular feedback loops to adapt to changes quickly and manage time more effectively.
- **Set Realistic Timelines**: Ensure that project timelines are achievable and account for potential delays due to unforeseen issues.
- **Enhance Requirement Specification**: Invest time in creating clear and detailed requirements to minimize ambiguity and reduce the need for rework.

By addressing these common problems and their underlying causes, teams can better manage their time during the requirements phase and improve overall project outcomes.
Source: napire data

Query: How to prioritize requirements?
Context: define priorities (0.38%) 
model evaluation metric 
choice (0.38%) 
balancing risks and benefits (0.38%) 
estimation issues (0.38%) 
incomplete/incorrect requirements (1.91%) 
end to end process (0.38%) 
scope definition (1.91%) 
accuracy checking (0.38%) 
defining/documenting requirements (2.29%) 
data science complexity (1.15%) 
unclear requirements (4.96%) 
lack of data science
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Context: affected activities will reliably determine the impact of any
treatment in requirements artifacts or processes [3]. this
affects all comparative studies in requirements engineering,
i.e., all controlled and quasi-experiments aiming to evaluate
the impact of a quality defect or the benefit of a new method.
only by measuring this impact on all requirements-affected
Source: Measuring the Fitness-for-Purpose of Requirements An initial Model of Activities and Attributes.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: obvious issues and focus on the important, diﬃcult,
domain-speciﬁc aspects in the review itself. third,
the requirements engineers receive a tool for immedi-
ate feedback, which can help them to increase their
awareness for certain quality aspects and establish
common guidelines for requirements artifacts.
yet, the low precision for some of the smells might
Source: Rapid quality assurance with Requirements Smells.pdf

Query: How to prioritize requirements?
Context: To prioritize requirements effectively, the following criteria can be considered based on the analysis of the DataFrame:

1. **Usability** (Average Importance: 0.652) - This is the highest priority, emphasizing the need for accessibility, recognizability, learnability, and user interface aesthetics.

2. **Performance Efficiency** (Average Importance: 0.565) - Focus on time behavior, resource utilization, and capacity, indicating the importance of efficient system performance.

3. **Reliability** (Average Importance: 0.554) - This includes aspects like availability, fault tolerance, and recoverability, which are crucial for maintaining system integrity.

4. **Maintainability** (Average Importance: 0.533) - Highlighting the importance of analyzability, modularity, and reusability, which are essential for long-term system sustainability.

5. **Security** (Average Importance: 0.402) - Addressing accountability, authenticity, confidentiality, and integrity, which are vital for protecting user data and system integrity.

6. **Compatibility** (Average Importance: 0.370) - Ensuring co-existence and interoperability with other systems is important for broader integration.

7. **Safety** (Average Importance: 0.304) - Focus on minimizing risks to health or disaster, which is essential for user safety.

8. **Portability** (Average Importance: 0.120) - While still relevant, this is the lowest priority, focusing on adaptability and installability.

The satisfaction with requirements engineering and reasons for dissatisfaction were not quantifiable in this analysis, indicating a need for further investigation in these areas. 

In summary, prioritizing requirements should start with usability, followed by performance efficiency, reliability, maintainability, security, compatibility, safety, and finally portability.
Source: napire data

Query: how to prioritize requirements?
Context: define priorities (0.38%) 
model evaluation metric 
choice (0.38%) 
balancing risks and benefits (0.38%) 
estimation issues (0.38%) 
incomplete/incorrect requirements (1.91%) 
end to end process (0.38%) 
scope definition (1.91%) 
accuracy checking (0.38%) 
defining/documenting requirements (2.29%) 
data science complexity (1.15%) 
unclear requirements (4.96%) 
lack of data science
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: requirements candidates into accepted requirements through vadalidation by the customers following the scope set out initially. this 
may be done in an manner as simple as asking them to formally accept the requirements in a written form and extend to employing a 
structured workshop with a walkthrough through all requirements and asking “why” questions (e.g. “why do you really need that
Source: software4kmu learning nuggets.pdf

Context: viable and suﬃciently justiﬁed, the requirement candidates are prioritized in
a project prioritization state (similar to backlog prioritization), called m1. fi-
nally, the prioritized requirements are hand-shaken with the developer teams
in a state called m2 [18]. when a requirement is unclear at the m2 state, it
is pushed back to m1 for re-prioritization. similarly, a requirement is pushed
Source: Causality in Requirements Artifacts Prevalence, Detection, and Impact.pdf

Context: affected activities will reliably determine the impact of any
treatment in requirements artifacts or processes [3]. this
affects all comparative studies in requirements engineering,
i.e., all controlled and quasi-experiments aiming to evaluate
the impact of a quality defect or the benefit of a new method.
only by measuring this impact on all requirements-affected
Source: Measuring the Fitness-for-Purpose of Requirements An initial Model of Activities and Attributes.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Query: how to prioritize requirements?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: How can I improve the following requirement? Requirement: "The system should handle a large number of users."
Context: quiz
what type of requirement is this? 
1. "the system should be able to process 1000 transactions per second".
2. "all user input should be validated to prevent incorrect data entry".
3. "the system should allow users to search for products by category and filter the results by price, brand and customer reviews."
Source: software4kmu learning nuggets.pdf

Context: and manage in atlassian jira8. user stories at tech-
divison follow the common connextra format: as a
[role], i want [feature], so that [reason]. we will
also follow this terminology here.
the systems under analysis consist of two online
shopping portals, a customer-relationship system and
a content-management system, all of which we cannot
name for non-disclosure-agreement reasons. in total,
Source: Rapid quality assurance with Requirements Smells.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: ability of the stakeholders (in particular of the future users of a system) strongly inﬂuences the possibilities
of specifying application scenarios, e.g., via use cases. projects that have no access to the users often doc-
ument services (abstract description of system functions) as an abstraction of use cases with no ordered
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Context: access to frequently used functions.
3. unambiguity: the refined requirement is clearer, but it could still be interpreted differently by different stakeholders. let's clarify it 
further.
refined requirement: the system must display a fixed menu bar at the top of the interface, containing universally understood icons
Source: software4kmu learning nuggets.pdf

Query: How can I improve the following requirement? Requirement: "The system should handle a large number of users."
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how can i improve the following requirement? requirement: "the system should handle a large number of users."
Context: quiz
what type of requirement is this? 
1. "the system should be able to process 1000 transactions per second".
2. "all user input should be validated to prevent incorrect data entry".
3. "the system should allow users to search for products by category and filter the results by price, brand and customer reviews."
Source: software4kmu learning nuggets.pdf

Context: and manage in atlassian jira8. user stories at tech-
divison follow the common connextra format: as a
[role], i want [feature], so that [reason]. we will
also follow this terminology here.
the systems under analysis consist of two online
shopping portals, a customer-relationship system and
a content-management system, all of which we cannot
name for non-disclosure-agreement reasons. in total,
Source: Rapid quality assurance with Requirements Smells.pdf

Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: distributes software-intensive products for a b2c market. the number of en-
gineers involved with the product line of the data set in question varied from
1000 to 4000 worldwide. the original data set, pre-processed by olsson et
al. [41] contains 4446 requirements collected in 20162. the data set has been
chosen because it contains the aforementioned features necessary for the eval-
Source: Causality in Requirements Artifacts Prevalence, Detection, and Impact.pdf

Context: ability of the stakeholders (in particular of the future users of a system) strongly inﬂuences the possibilities
of specifying application scenarios, e.g., via use cases. projects that have no access to the users often doc-
ument services (abstract description of system functions) as an abstraction of use cases with no ordered
Source: Field study on requirements engineering Investigation of artefacts, project parameters, and execution strategies.pdf

Query: how can i improve the following requirement? requirement: "the system should handle a large number of users."
Context: To improve the requirement "the system should handle a large number of users," consider the following insights derived from the DataFrame:

1. **Performance Efficiency**: The average score for performance efficiency is approximately 0.58, indicating that there is room for improvement in how the system utilizes resources and manages time behavior. Enhancing performance efficiency can directly impact the system's ability to handle more users effectively.

2. **Reliability**: The reliability score is not explicitly quantified, but it is essential to ensure that the system is available and fault-tolerant. Aim for high availability and implement mechanisms for fault tolerance to maintain service during high user loads.

3. **Usability**: The usability aspect is crucial for user satisfaction. Ensure that the system remains user-friendly even when the number of users increases. This includes optimizing user interfaces and ensuring that the system is accessible and easy to navigate.

4. **Goals and Quality Properties**: Clearly define the goals related to user capacity and performance. Establish quality properties that the system must meet, such as response time under load and maximum concurrent users.

5. **Stakeholder Involvement**: Engage stakeholders to gather requirements and expectations regarding user capacity. Their insights can help shape the system's design to better accommodate a large user base.

6. **Documentation**: Ensure that non-functional requirements related to performance and reliability are well-documented. This will guide the development process and help in validating that the system meets the necessary criteria.

7. **Testing Under Load**: Implement load testing to simulate a large number of users. This will help identify bottlenecks and areas for improvement before deployment.

By focusing on these areas, you can enhance the requirement to be more specific and actionable, such as: "The system should efficiently handle up to [specific number] concurrent users with a response time of less than [specific time] under peak load conditions."
Source: napire data

Query: What are the dependencies between the requirements?
Context: requirements, (c) how requirements are changed and aligned with tests, (d) what
and how re standards are applied and tailored, (e) how re is improved, and
ﬁnally (f) what problems practitioners experience in their re. in the study at
hands, we focus on the problems practitioners experience in their re while using
d. m´
endez fern´
andez et al.
table 3 questions (simpliﬁed and condensed excerpt).
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Context: ulatory requirements’ content item in requirements layer should
provide an overview of new requirements or needed requirements
changes combined with the reasoning for such changes. the new
content items are integrated with existing amdire content items
through dependencies and relations that encompass the main arte-
facts and information that regulatory requirements depend on or
are related to.
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: to the solution space covering the how (to do it). this also reflects how requirements emerge. at first, a business need or constraint is 
formulated describing the what on a high-level focusing on the why certain things are important. from this business need or 
constraint, more specific requirements are derived describing in detail the what. once the what is described in sufficient detail, we
Source: software4kmu learning nuggets.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Context: when considering requirements, it is important to look at them as a whole rather than individually. collections of requirements should 
have certain characteristics:
1. completeness: taken together, the requirements should cover all the necessary aspects of the system.
2. consistency: they should not contradict each other.
Source: software4kmu learning nuggets.pdf

Query: What are the dependencies between the requirements?
Context: The analysis of the DataFrame reveals the following insights regarding the dependencies between requirements based on the selected columns:

1. **Requirements Elicitation with Interviews**: Approximately 69.5% of the respondents indicated that they utilize interviews for requirements elicitation, suggesting a strong reliance on this method.

2. **Requirements Elicitation with Analysis of Existing Documents**: This method is also commonly used, with a significant number of respondents indicating its importance in understanding existing requirements.

3. **Requirements Elicitation with Risk Analyses**: The use of risk analyses for requirements elicitation is present, indicating that some projects consider potential risks when defining requirements.

4. **Requirements Elicitation with Prototyping**: Prototyping is employed by a notable portion of respondents, highlighting its role in refining and validating requirements.

5. **Requirements Elicitation with Workshops and Focus Groups**: This method is utilized by many, suggesting collaborative approaches to gather requirements.

6. **Requirements Elicitation with Reuse Databases and Guidelines**: There is some engagement with existing databases and guidelines, indicating a dependency on prior knowledge and resources.

7. **Requirements Elicitation with Design Thinking / Lean Startup**: This modern approach is also reflected in the responses, showing a trend towards innovative methods in requirements gathering.

8. **Requirements Elicitation with External Experts**: The involvement of external experts is noted, which can enhance the quality and comprehensiveness of the requirements.

9. **Requirements Elicitation with Observations**: Observational methods are used, indicating a practical approach to understanding user needs and requirements.

10. **We Do Not Elicit Requirements Ourselves**: A small percentage (about 3.7%) of respondents indicated that they do not engage in requirements elicitation, which may suggest reliance on other teams or stakeholders for this process.

Overall, the data suggests that there are multiple methods employed for requirements elicitation, indicating interdependencies among these methods as teams may use a combination of approaches to gather comprehensive requirements.
Source: napire data

Query: what are the dependencies between the requirements?
Context: requirements, (c) how requirements are changed and aligned with tests, (d) what
and how re standards are applied and tailored, (e) how re is improved, and
ﬁnally (f) what problems practitioners experience in their re. in the study at
hands, we focus on the problems practitioners experience in their re while using
d. m´
endez fern´
andez et al.
table 3 questions (simpliﬁed and condensed excerpt).
Source: Naming the Pain in Requirements Engineering Contemporary Problems, Causes, and Effects in Practice.pdf

Context: ulatory requirements’ content item in requirements layer should
provide an overview of new requirements or needed requirements
changes combined with the reasoning for such changes. the new
content items are integrated with existing amdire content items
through dependencies and relations that encompass the main arte-
facts and information that regulatory requirements depend on or
are related to.
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: to the solution space covering the how (to do it). this also reflects how requirements emerge. at first, a business need or constraint is 
formulated describing the what on a high-level focusing on the why certain things are important. from this business need or 
constraint, more specific requirements are derived describing in detail the what. once the what is described in sufficient detail, we
Source: software4kmu learning nuggets.pdf

Context: dependencies
id 1.2.1.4 - artefact model  
id 1.2.2.1 - (delete?) amdire core artefacts  - learning nugget  
id 1.2.2.2 - amdire context specification (overview)  
id 1.2.2.3 - amdire requirements specification (overview) - learning path  
id 1.2.2.4 - amdire system specification (overview) - learning path  
next item
id 1.2.1.6 - operationalisation  
goals (teaching 
perspective)
Source: software4kmu learning nuggets.pdf

Context: engineering as it very much depends on a plethora of project 
characteristics, such as:
do we develop a new system or do we replace an already 
existing system?
what is the information already documented an known?
we we develop internally (in-house) or do we elaborate 
requirements for external suppliers or do we develop 
requirements as external suppliers for our customer?
Source: software4kmu learning nuggets.pdf

Query: what are the dependencies between the requirements?
Context: The analysis of the DataFrame reveals the following insights regarding the dependencies between requirements:

1. **Compatibility**: There is a significant emphasis on compatibility, with many responses indicating its importance for co-existence and interoperability.

2. **Maintainability**: Responses highlight the importance of maintainability, particularly in terms of analysability, modularity, and reusability.

3. **Performance Efficiency**: Performance efficiency is frequently mentioned, indicating that time behavior and resource utilization are critical factors.

4. **Portability**: Adaptability and installability are noted as important aspects of portability, suggesting a dependency on how easily the system can be adapted to different environments.

5. **Reliability**: Availability and fault tolerance are key concerns, indicating that reliability is a major dependency for successful project outcomes.

6. **Security**: Security aspects such as confidentiality and integrity are highlighted, showing a dependency on how well these factors are managed.

7. **Safety**: Safety considerations are also mentioned, indicating a dependency on risk management for health or disaster scenarios.

8. **Usability**: Usability factors, including accessibility and user error protection, are emphasized, suggesting that user experience is a critical dependency.

9. **Documentation Granularity**: The level of detail in documentation is noted, which can impact the clarity and understanding of requirements.

10. **Satisfaction with Requirements Engineering**: The overall satisfaction with requirements engineering processes indicates a dependency on how well these processes are executed.

These insights suggest that the requirements are interdependent, with various factors influencing each other, particularly in terms of performance, usability, and maintainability.
Source: napire data

Query: Do you have a checklist for security requirements?
Context: shall be secure“ could be measured as the aggregation of non-functional requirements derived from it, such as “user data must be 
encrypted following the recommendations of the bsi”.
example
technical: all interfaces must have a javadoc-compatible documentation.
legal: system may not be available in country xyz dues to national regulations.
example
the system has to be maintainable.
Source: software4kmu learning nuggets.pdf

Context: work has been published (e.g., [10][14][16]) on how to 
support inspectors with detailed reading support for reviewing 
security related aspects.  
elberzhager et al. [16] propose a model for security goals 
that involves guided checklists to support inspectors when 
checking security. they describe a step-by-step guide that 
results in questions to be checked by an inspector. this model
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: have to use a passkey to log in?
clarity: is the requirements clear and unambiguous to the customer? can there be missunderstandings towards which 
functionality requires a login?
example
requirement: the application must respond to user requests within 2 seconds.
verification activities:
define acceptance criteria: application responds within 2 seconds
Source: software4kmu learning nuggets.pdf

Context: provide security-specific questions for a requirements 
inspection. two of them are part of the pbr technique 
(designer and tester). they also created a new perspective 
based on the needs of a black hat tester. in this additional 
perspective, the reviewer focuses on three types of security 
information: cryptography, authentication, and data validation.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: user story 
security specification 
1. as a customer, i 
want to be able to 
export my personal 
information so that i 
can use it in other 
systems. 
1. the system shall ensure that there is no residual 
data exposed. 
2. the system shall store credentials securely using 
the aes encryption algorithm. 
3. the system shall use the rsa encryption 
algorithm to protect all data all the time.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Query: Do you have a checklist for security requirements?
Context: The summarized information regarding security requirements and checklist usage from the DataFrame is as follows:

- **Security Requirements**:
  - Count of responses indicating the presence of security requirements: 246
  - Count of responses indicating the absence of security requirements: 242

- **Checklist Usage**:
  - Count of responses indicating the use of checklists: 294
  - Count of responses indicating the absence of checklist usage: 194

This indicates that a significant number of respondents have security requirements and that checklists are commonly used in the context of requirements validation and verification.
Source: napire data

Query: do you have a checklist for security requirements?
Context: keyword 
security property 
confidentiality 
integrity 
availability 
identification 
authentication 
access 
x 
x 
change 
x 
export 
x 
send 
x 
recover 
x 
backup 
x 
password 
x 
role 
x 
time 
x 
this repository is strongly based on a similar one provided 
by slankas and williams [38] in their work about automated 
extraction of non-functional requirements in available
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: provide security-specific questions for a requirements 
inspection. two of them are part of the pbr technique 
(designer and tester). they also created a new perspective 
based on the needs of a black hat tester. in this additional 
perspective, the reviewer focuses on three types of security 
information: cryptography, authentication, and data validation.
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: work has been published (e.g., [10][14][16]) on how to 
support inspectors with detailed reading support for reviewing 
security related aspects.  
elberzhager et al. [16] propose a model for security goals 
that involves guided checklists to support inspectors when 
checking security. they describe a step-by-step guide that 
results in questions to be checked by an inspector. this model
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: has also brought others to the surface [20]. 
security is an essential non-functional requirement that 
requires special attention, inter alia, due to business needs to 
protect data. much of security-related information is hosted on 
the internet, making web applications a target. security 
requirements often appear throughout but also beyond the
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: have to use a passkey to log in?
clarity: is the requirements clear and unambiguous to the customer? can there be missunderstandings towards which 
functionality requires a login?
example
requirement: the application must respond to user requests within 2 seconds.
verification activities:
define acceptance criteria: application responds within 2 seconds
Source: software4kmu learning nuggets.pdf

Query: do you have a checklist for security requirements?
Context: The DataFrame indicates that there are 174 entries related to security requirements across three relevant columns. This suggests that there is a consistent presence of information regarding security requirements, including documentation and checklist aspects. Therefore, it can be inferred that a checklist for security requirements is likely available based on the data provided.
Source: napire data

Query: Why do I need RE in agile environments?
Context: 1   introduction 
we have seen a substantial change in the way requirements engineering (re) is 
practiced in today’s software engineering projects because of the success of agile 
methods: “no matter the specific method, agile’s treatment of requirements is 
fundamentally different.” [11] furthermore, recent studies indicate that agile practices
Source: Requirements Engineering Practice and Problems in Agile Projects Results from an International Survey.pdf

Context: what are the benefits of applying requirements engineering?
alignment with stakeholder needs: requirements engineering facilitates clear communication between stakeholders, ensuring 
that the final product meets their expectations and increasing user satisfaction.
improved communication and collaboration: requirements engineering fosters collaboration across cross-functional teams,
Source: software4kmu learning nuggets.pdf

Context: part of software engineering. misunderstandings and defects in 
requirements-related artifacts can easily lead to design flaws 
and cause severe and costly problems [24]. agile requirements 
engineering relies on lightweight documentation and face-to-
face collaborations between customers and developers [9]. yet, 
agility does not necessarily compensate the problems of more
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: in multi project env.
adapt flexibility to 
change
increase knowledge 
transfer w/ customer
reﬁne reqs.
improve team 
communication
improve team skills
parallelise re and 
design activities
improve 
communication w/ 
customer
improve cost 
transparency
negotiations
no further 
improvement
obsolete reqs
category
code
x
occurence
(codes pre-deﬁned 
in questionnaire)
uncertainty in re
Source: Naming the Pain in Requirements Engineering A Design for a Global Family of Surveys and First Results from Germany.pdf

Context: 4.5   problems in agile re (rq 4) 
finally, after getting an overview of the current state of practice (rq1–3), we wanted 
to know what common problems the respondents experience in their respective 
project environments. to this end, we presented a list of common re problems and 
asked the respondents whether they agree that these problems occur in their setting.
Source: Requirements Engineering Practice and Problems in Agile Projects Results from an International Survey.pdf

Query: Why do I need RE in agile environments?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: why do i need re in agile environments?
Context: requirements validation and verification – ensuring validity and quality of created requirements.
impact on project success
effective requirements engineering is critical to successful software development. research shows that 33% of errors in the software 
development lifecycle are rooted in insufficient requirements engineering, and 36% of these errors lead to project failure.
Source: software4kmu learning nuggets.pdf

Context: it is important to recognise that requirements are dynamic and may change due to evolving stakeholder needs, changes in market 
conditions and advances in technology. it is important to adapt these requirements in the later stages of a project, either by 
reformulating, deleting or introducing new requirements. adopting this approach is essential to maintaining project responsiveness and
Source: software4kmu learning nuggets.pdf

Context: what are the benefits of applying requirements engineering?
alignment with stakeholder needs: requirements engineering facilitates clear communication between stakeholders, ensuring 
that the final product meets their expectations and increasing user satisfaction.
improved communication and collaboration: requirements engineering fosters collaboration across cross-functional teams,
Source: software4kmu learning nuggets.pdf

Context: of agile practices, little is yet known about how industrial environments conduct re 
in an agile setting [3] and what problems they face. such an understanding would be 
needed to steer future research in a problem-driven manner. 
napire (naming the pain in requirements engineering) is an international 
initiative which tries to fill this gap and to establish a broad survey investigating the
Source: Requirements Engineering Practice and Problems in Agile Projects Results from an International Survey.pdf

Context: management. 
it’s important to tailor the approach for requirements engineering to the unique needs of each project. 
while effective re is critical, it does not guarantee project success; several other factors play an important role.
in diesem lernabschnitt befassen wir uns mit gängigen missverständnissen über requirements engineering (re). wir verstehen, was
Source: software4kmu learning nuggets.pdf

Query: why do i need re in agile environments?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: Give me a template for a textual use case.
Context: diagrams (activity diagrams, message sequence charts, etc.). 
use cases integrate all possible scenarios, which might occur 
when an actor tries to achieve a specific usage goal. notations 
used for the specification of use cases are structured text, use 
case diagram. 
an example of use scenarios.
5 - pa1463 - requirements engineering - functional 
requirements.pptx (sharepoint.com)
link to:
Source: software4kmu learning nuggets.pdf

Context: requirements lists 
prototypes 
use case models 
data models 
vision document 
not documented 
goal models 
ml canvas 
bdd scenarios 
others 
percentage of answers 
data 
quality 
model 
reliability 
system performance 
model explainability 
system usability 
system reliability 
system maintanibility 
system security 
model 
transparency 
system compatibility 
model accountability
Source: Status Quo and Problems of Requirements Engineering for Machine Learning Results from an International Survey.pdf

Context: we will introduce the content later, a take-away now is that, for 
instance, the system vision in the requirements specification 
comprises an overview of the major use cases; its definition and 
agreement indicate therefore that the use cases are sufficiently 
defined to be further elaborated in detail and, thus, allowing, for 
example, for first cost estimations based on function points or
Source: software4kmu learning nuggets.pdf

Context: instructions on how to describe use cases at munich re.
data collection. following the process as described in
sec. iii-b, the approach contained four phases: first, we
received and analysed a full set of 51 requirements engineering
artifacts that were created in the project, including use cases,
business rules and others. in the ﬁrst, 90-minutes workshop
Source: It's the Activities, Stupid! A New Perspective on RE Quality.pdf

Context: free-form textual domain/business process models 
textual structured requirements lists with constraints 
semi-formal (uml) data models 
free-form textual use case models 
textual use case models with constraints 
free-form textual goal models 
semi-formal (uml) domain/business process models) 
textual domain/business process models with constraints   
formal data models
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Query: Give me a template for a textual use case.
Context: Based on the summarized information from the DataFrame, here is a template for a textual use case:

---

**Use Case Template**

**1. Goals:**
   - [Define the primary objectives of the use case.]

**2. Quality Properties:**
   - [List the quality attributes that are important for the system, such as performance, reliability, and usability.]

**3. Stakeholders:**
   - [Identify the key stakeholders involved in this use case, including users, customers, and project team members.]

**4. System Behavior:**
   - [Describe how the system is expected to behave in this use case, including any specific functionalities.]

**5. User Interfaces:**
   - [Outline the user interfaces that will be involved in this use case, including any specific screens or interactions.]

**6. Usage Scenarios:**
   - [Provide examples of how the system will be used in real-world scenarios.]

**7. Non-Functional Requirements:**
   - [Detail any non-functional requirements related to usability, accessibility, and other quality attributes.]

**8. Documentation Approach:**
   - [Explain how the usability and other requirements will be documented.]

**9. Satisfaction with Requirements Engineering:**
   - [Summarize how satisfied stakeholders are with the requirements engineering process.]

**10. Reasons for Satisfaction:**
   - [List the reasons stakeholders are satisfied with the current requirements engineering efforts.]

---

This template can be filled out with specific details relevant to the project or system being developed.
Source: napire data

Query: give me a template for a textual use case.
Context: free-form textual domain/business process models 
textual structured requirements lists with constraints 
semi-formal (uml) data models 
free-form textual use case models 
textual use case models with constraints 
free-form textual goal models 
semi-formal (uml) domain/business process models) 
textual domain/business process models with constraints   
formal data models
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: main advantage of textual requirements is therefore the accessibility. every stakeholder can read, understand and contribute to the 
requirements (given enough context knowledge). this renders natural language requirements the easiest employable technique to 
convey requirements between stakeholders of diverse backgrounds (e.g. business analysts and developers).
Source: software4kmu learning nuggets.pdf

Context: textual free form with no constraints, textual with constraints such as the user story template (“as a...,
and formal semantics. furthermore, we briefly go into non-functional requirements and expect
them to be documented in a non-quantified and textual way. the propositions of our theory related
to requirements documentation are given in table 11. they are all new in relation to the theory
Source: Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf

Context: features can be, for example, high-level use cases. the content of 
those identified use cases is then described in the usage model 
when documenting the functional requirements.
notations
system context diagram
die kakerlake
eines morgens, als gregor samsa aus unruhigen träumen 
erwachte, fand er sich in seinem bett in ein schreckliches 
die bedeutung
Source: software4kmu learning nuggets.pdf

Context: diagrams (activity diagrams, message sequence charts, etc.). 
use cases integrate all possible scenarios, which might occur 
when an actor tries to achieve a specific usage goal. notations 
used for the specification of use cases are structured text, use 
case diagram. 
an example of use scenarios.
5 - pa1463 - requirements engineering - functional 
requirements.pptx (sharepoint.com)
link to:
Source: software4kmu learning nuggets.pdf

Query: give me a template for a textual use case.
Context: ### Use Case Template

**Title:** [Insert Title Here]

**1. Overview:**
   - **Purpose:** Describe the purpose of the use case.
   - **Scope:** Define the scope of the use case.

**2. Actors:**
   - **Primary Actor:** [Identify the main user or system that will interact with the system.]
   - **Secondary Actors:** [List any other users or systems that may interact with the primary actor.]

**3. Preconditions:**
   - [List any conditions that must be met before the use case can be executed.]

**4. Postconditions:**
   - [Describe the state of the system after the use case has been executed.]

**5. Main Flow:**
   1. [Step 1: Describe the first action taken by the primary actor.]
   2. [Step 2: Describe the response from the system.]
   3. [Step 3: Continue detailing the interactions until the use case is complete.]

**6. Alternative Flows:**
   - **Flow 1:** [Describe any alternative paths that can be taken if certain conditions are met.]
   - **Flow 2:** [Continue listing alternative flows as necessary.]

**7. Requirements:**
   - **Functional Requirements:** [List any functional requirements that are relevant to this use case.]
   - **Non-Functional Requirements:** 
     - **Compatibility:** [0.42]
     - **Maintainability:** [0.56]
     - **Performance:** [0.58]
     - **Portability:** [0.19]
     - **Reliability:** [0.59]
     - **Security:** [0.50]
     - **Safety:** [0.28]
     - **Usability:** [0.63]

**8. Customer Relationship:**
   - **Overall Satisfaction:** 
     - Good: [239]
     - Very Good: [116]
     - Neutral: [100]
     - Bad: [13]
     - Very Bad: [3]

**9. Agile vs. Plan-Driven Approach:**
   - **Hybrid:** [161]
   - **Rather Agile:** [118]
   - **Rather Plan-Driven:** [77]
   - **Agile:** [76]
   - **Plan-Driven:** [47]

**10. Notes:**
   - [Any additional notes or considerations related to the use case.]

This template provides a structured approach to documenting a use case, ensuring that all relevant aspects are covered.
Source: napire data

Query: How can I ensure regulatory compliance in requirements?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: compliance. moreover, stakeholders tend to want security 
requirement satisfaction to be very close to yes. third, the 
effort stakeholders might be willing to dedicate to satisfying 
sr also depends on the likelihood and impact of a failure to 
comply with them. this is even more challenging in the 
context of agile software projects because, apparently,
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: never be able to formally verify that the requirements are complet. it's therefore vital to take a pragmatic perspective here and ensure 
that each stakeholder agrees at least on the wording and essence of a requirement to ensure that it is consistent with all specified 
characteristics.
let us look at the above properties in a concrete example and refine a bad requirement together.
Source: software4kmu learning nuggets.pdf

Context: ulatory requirements’ content item in requirements layer should
provide an overview of new requirements or needed requirements
changes combined with the reasoning for such changes. the new
content items are integrated with existing amdire content items
through dependencies and relations that encompass the main arte-
facts and information that regulatory requirements depend on or
are related to.
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: the software system as requirements evolve.
regulatory and standards compliance: requirements engineering ensures compliance with regulatory requirements and industry 
standards, mitigating the risk of non-compliance during development.
accurate project planning: knowing the key problems in advance is a foundation for an effective and efficient development and
Source: software4kmu learning nuggets.pdf

Query: How can I ensure regulatory compliance in requirements?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

Query: how can i ensure regulatory compliance in requirements?
Context: mitigation actions for incomplete/hidden requirements 
improve the documentation and conduct more meetings with the developers to detect analysis defects. 
hire or specialize a requirements analyst. 
creating templates. 
creation of a dor (definition of readiness) for the team. 
invest more time in requirements specification, using scenarios and prototypes to gather requirements
Source: Preventing Incomplete Hidden Requirements Reflections on Survey Data from Austria and Brazil.pdf

Context: compliance. moreover, stakeholders tend to want security 
requirement satisfaction to be very close to yes. third, the 
effort stakeholders might be willing to dedicate to satisfying 
sr also depends on the likelihood and impact of a failure to 
comply with them. this is even more challenging in the 
context of agile software projects because, apparently,
Source: An Approach for Reviewing Security-Related Aspects in Agile Requirements Specifications of Web Applications.pdf

Context: are crucial in the years to come, together with the expected contri-
bution of our suggested approach. future regulatory re should:
empower software engineers to consider regulatory compliance
and related risks already at the early stages of software system
development. in our approach this is enabled by its applicability to
early stage software development artefacts (e.g., business plans).
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: ulatory requirements’ content item in requirements layer should
provide an overview of new requirements or needed requirements
changes combined with the reasoning for such changes. the new
content items are integrated with existing amdire content items
through dependencies and relations that encompass the main arte-
facts and information that regulatory requirements depend on or
are related to.
Source: Vision for an Artefact-based Approach to Regulatory Requirements Engineering.pdf

Context: never be able to formally verify that the requirements are complet. it's therefore vital to take a pragmatic perspective here and ensure 
that each stakeholder agrees at least on the wording and essence of a requirement to ensure that it is consistent with all specified 
characteristics.
let us look at the above properties in a concrete example and refine a bad requirement together.
Source: software4kmu learning nuggets.pdf

Query: how can i ensure regulatory compliance in requirements?
Context: Sorry, the DataFrame doesn’t provide enough information.
Source: napire data

