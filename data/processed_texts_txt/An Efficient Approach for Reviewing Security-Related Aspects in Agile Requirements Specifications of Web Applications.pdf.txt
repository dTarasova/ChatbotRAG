
noname manuscript no.(will be inserted by the editor)


an eﬃcient approach for reviewingsecurity-related aspects in agile requirementsspeciﬁcations of web applications


hugo villamizar · marcos kalinowski ·alessandro garcia · daniel mendez


received: date / accepted: date


abstract defects in requirements speciﬁcations can have severe consequencesduring the software development lifecycle. some of them may result in poorproduct quality and/or time and budget overruns due to incorrect or missingquality characteristics, such as security. this characteristic requires specialattention in web applications because they have become a target for manip-ulating sensible data. several concerns make security diﬃcult to deal with.for instance, security requirements are often misunderstood and improperlyspeciﬁed due to lack of security expertise and emphasis on security duringearly stages of software development. this often leads to unspeciﬁed or ill-deﬁned security-related aspects. these concerns become even more challengingin agile contexts, where lightweight documentation is typically produced. totackle this problem, we designed an approach for reviewing security-relatedaspects in agile requirements speciﬁcations of web applications. our proposalconsiders user stories and security speciﬁcations as inputs and relates thoseuser stories to security properties via natural language processing. basedon the related security properties, our approach identiﬁes high-level securityrequirements from the open web application security project (owasp) tobe veriﬁed, and generates a reading technique to support reviewers in detect-ing defects. we evaluate our approach via three experiment trials conductedwith 56 novice software engineers, measuring eﬀectiveness, eﬃciency, useful-ness, and ease of use. we compare our approach against using: (1) the owasphigh-level security requirements, and (2) a perspective-based approach as pro-posed in contemporary state of the art. the results strengthen our conﬁdencethat using our approach has a positive impact (with large eﬀect size) on theperformance of inspectors in terms of eﬀectiveness and eﬃciency.


keywords agile requirements · requirements veriﬁcation · softwareinspection · software security


hugovillamizare-mail:hvillamizar@inf.puc-rio.br·marcoskalinowskie-mail:mendez e-mail: daniel.mendez@bth.se


arxiv:2009.03678v1  [cs.se]  6 sep 2020


2hugo villamizar et al.


1 introduction


requirements engineering (re) is an inherently complex part of software en-gineering. given its complexity, defects such as ambiguities, inconsistenciesand incomplete requirements may arise. these defects have been reported bypractitioners to be causing problems in software projects, such as poor productquality and time and budget overruns [23]. moreover, the costs for correctingthese re-related problems increases throughout the software development life-cycle [9]. these additional costs reinforce the importance of identifying suchdefects at early stages.the rapidly changing business environments in which many companiesoperate are challenging traditional re approaches. this gave rise to agilemethods for re. agile re relies on lightweight documentation and face-to-face collaborations between customers and developers [10]. yet, agility doesnot necessarily compensate for problems that have been reported for plan-driven software process models (e.g., rup, v-model xt, waterfall), such asmoving targets and communication ﬂaws [23]. it can even make those problemsmore explicit if a critical prerequisite for successful re are not met: human-intensive exchange, collaboration, and trust [24]. in other words, agile re hashelped to address some re problems, but it has also hindered others, such asunder-speciﬁed requirements that are too abstract [23].security is an essential non-functional requirement (nfr) that requiresspecial attention of any software system that manages valuable data and pro-cesses, among others, due to business needs to protect restricted user infor-mation. much of sensitive information is hosted on the internet, making webapplications an often favoured target. in today’s software systems, securityvulnerabilities are increasing [16] and ensuring security controls is becomingmore diﬃcult. defects in security requirements can lead to important vulner-abilities that impact core functionality, leading to loss of reputation, ﬁnancialpenalties, and even legal consequences. for instance, in september 2016, theinternet giant yahoo announced it had been the victim of the biggest databreach in history [25]. the hackers stole personal information of 500 millionusers. the attack was performed via phishing emails with a link. once it wasclicked, malware was downloaded to the network. thus, bad actors gained ac-cess to the user database. this can be seen as a breach not covered by thesecurity requirements. not surprisingly, security is considered as a relevantnfr for the 21st century [44].for that reason, specifying and verifying security requirements is crucialto ensure software product quality. nevertheless, security requirements are of-ten misunderstood and improperly speciﬁed due to lack of security expertiseand emphasis on security during early stages of software development [38].while software requirements inspections represent a promising approach toeﬀectively verify security requirements, security expertise is essential, but of-ten lacking in software engineers [12]. hence, software engineers could beneﬁtfrom speciﬁc reading techniques to support the veriﬁcation of security aspectsduring requirements inspections.


title suppressed due to excessive length3


the picture is even more challenging in agile contexts. most agile teamsdo not have a security expert on board. therefore product owners (pos)and developers are, at best, responsible for identifying and prioritizing secu-rity requirements [14]. however, pos as well as developers, often lack securityknowledge [52]. this may results in software which fails to properly deal withsecurity. according to eberlein [19], there is a need for agile methods to in-clude techniques that make it possible to identify nfrs early. there is also aneed to describe them in such a way that they may be analyzed early, thusreducing the likelihood of costly rework [36]. alsaqaf et al. [1] conducted aliterature review on engineering nfrs in agile projects that cover securityconcerns. they reported 12 challenges such as the inability of user stories, themost used artifact in agile re, to document quality requirements, the prod-uct owners lack of knowledge, the dependence on the product owner as thesingle point to collect the requirements, and the delay in the validation of therequirements. that is why several recent secondary studies acknowledge theurgent need for methods to systematically engineer security requirements inagile projects [1, 56]. in that direction, villamizar et al. [56] identiﬁed thatmost of the studies dealing with security in agile contexts, lack empirical eval-uation and research on requirements veriﬁcation. such activities should beconducted to assure those agile requirements speciﬁcations are correct, con-sistent, unambiguous, and complete. this means appropriately covering basicsecurity-related aspects, such as input validation, unauthorized access, assign-ment of administrative privileges and denial-of-service attacks.although these secondary studies have reported several challenges in liter-ature, the number of solution proposals to address these concerns is limited.existing approaches (e.g., [12] [20] [43] [46]) employ inspection techniques toverifying security or identify security goals from textual documents. theseproposals are not focused on agile, but this does not mean that they cannotaddress these kinds of requirements. for instance, carver et al. [12] proposea perspective-based approach to identify security defects in general require-ments. in this case, the authors do not explicitly mention considering theirapproach in an agile context, but that does not exclude it to cover textualrequirements or agile speciﬁcations. to the best of our knowledge, only onestudy explicitly proposes a methodology to address security veriﬁcation ac-tivities in agile software development [18]. the study proposes a lightweightmethodology to address nfrs early in agile software development processes.activities such as elicitation, reasoning and validation are considered withinthe methodology in an eﬀort to maintain agility while at the same time at-tempting to improve the quality of software developed with agile processes.given the contemporary state of reported evidence, we took a step for-ward to address the existing literature gap concerning security requirementsveriﬁcation in agile contexts. we proposed and evaluated an approach forreviewing security-related aspects in agile requirements speciﬁcations of webapplications, previously presented in [57]. we decided to focus on web applica-tions given that they have become a target for accessing or extracting sensibledata. results of our initial experimental evaluation, comparing our approach


4hugo villamizar et al.


against using the complete list of owasp high-level security requirements,indicated that using our approach has a positive impact on the performanceof inspectors in terms of eﬀectiveness and eﬃciency.in this paper, we extend our previous study [57] in two ways: first, we pro-vide further details on the approach and its initial evaluation, thus facilitatingits adoption. second, we conducted a new experimental trial which comparesour approach with the perspective-based approach as reﬂected by carver etal.’s contribution [12]. the results of this new study strengthen our conﬁdencein improving eﬀectiveness and eﬃciency when using our approach.the remainder of this work is organized as follows. section 2 introduces thebackground of agile re and how security veriﬁcation is typically performed inthis context. in this section, we also present related work. section 3 presentsin detail the technique we chose to evaluate our proposed approach, in thiscase, the perspective-based reading proposed by carver et al. [12]. section 4introduces the approach we designed to deal with security veriﬁcation in agilecontexts. section 5 presents the study design used to evaluate the approach.the results of the experimental trials are presented in sections 6. we discussedthreats to validity and the results of the experiments in section 7 and 8,respectively. section 8.5 provides a discussion of limitations of our approach.finally, our concluding remarks are presented in section 9.


2 background and related work


this section introduces the background on agile re, inspections based on read-ing techniques, security properties and requirements and the synergy betweenthese ﬁelds with veriﬁcation activities. in addition, we describe related workto our proposed approach.


2.1 agile requirements


the term “agile requirements” emerged in response to the agile manifesto.it is used to deﬁne the “agile way” of executing and reasoning about reactivities [31]. yet, not much is known about the challenges posed by the col-laboration oriented agile way of dealing with re activities. ramesh et al. [45]performed a study with 16 organizations that develop software using agilemethods. they identiﬁed that agile re practices resulted in challenges re-garding neglected nfrs, minimum documentation and no requirements ver-iﬁcations. the recent report from the naming the pain in requirements en-gineering initiative [24] (napire) extends already known challenges with (i)communication ﬂaws between teams and customers, and (ii) under-speciﬁedrequirements that remain too abstract and, thus, are not measurable. theseobservations give a picture on the diﬃculties of dealing with nfrs in agilecontexts. it is reasonable to believe that security requirements are no diﬀerentin this respect.


title suppressed due to excessive length5


2.2 inspection based on reading techniques


software inspection is a quality assurance method to detect defects early dur-ing the software development process. the aim is to guarantee that developersdeal with complete, consistent, unambiguous, and correct artifacts. in general,several authors have worked on quality assurance methods for verifying thequality properties of requirements. one of the most compared and evaluatedmethods, in several experiments and studies, are defect detection techniques,so-called reading techniques [28]. software reading techniques attempt to in-crease the eﬀectiveness of individual reviewers by providing guidelines thatcan be used to examine (by reading) a given software artifact and identifydefects [53]. there is empirical evidence that software reading is a promisingtechnique for increasing software quality for diﬀerent situations and documentstypes [49].perspective-based inspection is a variant of a formal technical review. thistype of inspection is based on explicitly deﬁning the important stakeholdersfor a particular artifact and the types of issues that are of importance to theteam. rather than asking each reviewer to search for all types of problems,the perspective-based approach requires inspectors to examine the documentusing a role-based scenario based on how one speciﬁc stakeholder [12]. forexample, an inspection of system requirements may include an inspector usinga tester perspective. this inspector reviews the requirements by following ascenario in which he/she considers how to generate test cases based on therequirements.weak alignment of re with inspection activities may lead to problemsin delivering the required products in time with the right quality [7]; for in-stance, weak communication of requirements changes to testers may result inlack of veriﬁcation of new requirements and incorrect veriﬁcation of old in-valid requirements, leading to software quality problems, wasted eﬀort anddelays [32].


2.3 security properties and requirements


security is an important quality characteristic of any software system thatmanages valuable data and processes [3] [13] [17]. hence, software developmentshould be conducted with security in mind at all stages and it should not bean afterthought [36]. however, developing secure software is not a trivial taskoften due to lack of awareness and security expertise in stakeholders and theinadequacy of methodologies to support developers who are not security ex-perts [29]. typically, security is often dealt with in retrospective and retroﬁttedwhen the system has already been designed and put into operation [38]. thiscauses defects that have a major impact on the project resulting in a highercost to ﬁx them.security properties are the targets the customer establishes for their secu-rity program. without security properties, they do not know what they are


6hugo villamizar et al.


trying to accomplish for security and therefore will not reach any goals [43].security requirements (srs) engineering can provide a foundation for devel-oping secure systems. nevertheless, like other quality requirements, they tendnot to have simple yes/no satisfaction criteria. haley et al. [27] present somechallenges related to srs. first, people generally think about and express srsin terms of “bad things” (negative properties) to be prevented. it is diﬃcult, ifnot impossible, to measure negative properties. second, for srs, the toleranceon “satisﬁed enough” is small, often zero, given the implications of noncom-pliance. moreover, stakeholders tend to want srs satisfaction to be very closeto yes. third, the eﬀort stakeholders might be willing to dedicate to satis-fying srs also depends on the likelihood and impact of a failure to complywith them. in recent years, srs has been investigated by several researchers.mellado et al. [38] have conducted a systematic review of srs approaches tosummarize existing methodologies. fabian et al. [21] also provide a comparisonof srs methods. methods such as square [37] and microsoft sdl [30] arecompared.


2.4 related work


our related work was based on ﬁndings from literature reviews such as [1, 56]and empirical searches in indexed databases. for instance, alsaqaf et al. [1]shows that very little is known about the evolution of nfrs (included se-curity) in agile software development setting and more research is needed tounderstand the contexts in which these approaches would ﬁt and add value,specially because very little empirical evaluation has been conducted. thesestudies revealed an important number of published proposals addressing secu-rity requirements in agile context. most of them focused on analysing, identi-fying and prioritizing these kind of requirements. on the other hand, we alsofound studies focused on showing challenges and practitioners perspectives inthis context. however, few authors have addressed the speciﬁc problems ofsecurity veriﬁcation activities ( [12], [20], [43]). the picture is even poorer inthe agile context as concluded in [56]. we are aware of only one study thatexplicitly states to address security veriﬁcation activities in agile methods [18].as far as security veriﬁcations are concerned, we include, as related work, somestudies that do not explicitly mention their suitability in agile contexts, butgiven their domain application we consider them suitable to address the samedirection of our approach.domah et al. [18] propose a lightweight methodology to address nfrsearly in agile software development processes. nfrs elicitation, reasoning,and validation are considered within that methodology. regarding veriﬁcation,it depends on a quantiﬁcation taxonomy with diﬀerent levels of decomposi-tion for identifying quantiﬁed validation criteria for each nfr. however, thismethodology does not oﬀer speciﬁc guidance to support inspectors in identi-fying security-related defects in requirements speciﬁcations. hence, previousknowledge on security is required to take advantage of the methodology.


title suppressed due to excessive length7


riaz et al. [46] describes a tool-assisted process for identifying key at-tributes of sentences to be used in security-related analysis and speciﬁcation offunctional security requirements using a set of context-speciﬁc templates. thetool takes natural language requirements artifacts (requirement speciﬁcations,feature requests, etc.) and a trained classiﬁer for the current problem domainas input. it also parses the artifacts as text sentences and identiﬁes which (ifany) security properties relate to each sentence. the tool then presents theuser with a list of applicable security requirements templates for the identi-ﬁed properties. we can say this work conceives security in the same way asour approach. the diﬀerence is that they propose an approach for identifyingsecurity requirements whereas our approach focuses on detecting defects fromsecurity requirements already speciﬁed.elberzhager et al. [20] propose a model for security goals that involvesguided checklists to support inspectors when checking security. they describea step-by-step guide that results in questions to be checked by an inspector.this model is similar to our proposal because it works using a reading tech-nique that supports the inspector on how to review security. however, thereare diﬀerences. first, our approach focuses on verifying srs in early stages,i.e., right after requirements speciﬁcation and within agile requirement arti-facts. second, our approach addresses high-level srs as deﬁned by the openweb application security project (owasp) [42], which provides a well-knownindustry standard on security. furthermore, our proposal involves classifyingthe defects found by inspectors, providing a better understanding of the dis-tribution of the problems.peine et al. [43] propose a model named security goal indicator tree(sgit) that maps negative and non-local goals to positive, concrete featuresof the software that can be checked during an inspection. the model supportsinspection of software documents from various phases of the development pro-cess. an sgit links a security goal with numerous indicators (which may bebeneﬁcial or detrimental for the achievement of the goal) and structures theset of indicators by boolean and conditional relationships enabling an eﬃcientselection of indicator subsets. despite the deep analysis provided by this work,it is not clear the level of expertise needed by inspectors to use the model. fur-thermore, as the related work above, the model does not shed light on the typeof defects detected.carver et al. [12] focus their proposal on a pbr technique with the aim ofidentifying security defects. they describe a set of perspectives that providesecurity-speciﬁc questions for a requirements inspection. two of them are partof the pbr technique (designer and tester). they also created a new perspec-tive based on the needs of a black hat tester. in this additional perspective,the reviewer focuses on three types of security information: cryptography, au-thentication, and data validation. according to the authors, those types ofinformation and the related questions were adapted for requirements fromaraujo and curpheys article on security code reviews [2]. however, due tothe large number of software vulnerabilities and the variety of ways to deploycomputer attacks, it could not be enough to consider only three types of secu-


8hugo villamizar et al.


rity controls. indeed, the list is incomplete when compared to other securitystandards such as owasp [42] or the common criteria [39].to summarize, only few approaches exist that address the systematic de-tection of security defects, especially during early stages, and the numberdecreases when considering agile contexts which redraws the picture of howsecurity could and should be dealt with [56]. however, we consider this lastwork, proposed by carver et al. [12], the most related work given its natureto detect defects early via a reading technique and its focus on security. forthat reason, we decided using this work to compare it against our approachwith the aim of evaluating the suitability with respect to others proposals. inthe following section, we present in detail the work proposed by carver et al.


3 perspective-based reading black hat approach


one of the objectives of carver et al.’s work is to integrate practices fromthe security engineering and software engineering communities into a set oftechniques for identifying and removing security vulnerabilities early in thesoftware lifecycle. this work is an adaptation of the pbr technique to addressthe security vulnerability problem during a requirements inspection process.the authors tailored pbr to focus on software security by augmenting two ofthe standard pbr perspectives (the designer and the tester) with additionalsecurity speciﬁc questions. in addition, the authors proposed a new perspectivebased on the needs of a black hat tester. using this approach, the inspectorreviews the requirements by following a scenario in which he/she considershow to generate test cases based on the requirements.


3.0.1 set of perspectives for requirements inspection


the designer perspective has the goal of ensuring that there is enough, con-sistent information present in the requirements to successfully create a sys-tem design. the existing scenario is augmented with questions that focus onwhether important security-related information has been correctly speciﬁedrather than being left up to the designer, who may not be familiar with alldetails of the security policy. this perspective provides a set of questions thatthe reviewer should consider when following this perspective:


– have the requirements speciﬁed enough information about the securitypolicies for the designer to understand whether a layered security policy isrequired instead of a single point of vulnerability?


– if several administrator roles are deﬁned, have they been deﬁned as separateaccounts with limited access to security resources, or a single account withcomprehensive super user permissions?


on the other hand, the scenario for the tester perspective remains un-changed, but is augmented with security speciﬁc questions. the inspector us-ing the tester perspective has the goal of ensuring that the trustworthiness of


title suppressed due to excessive length9


the system will be knowable during the testing phase. the questions of thisperspective should consider the following:


– have the requirements speciﬁed appropriate exception-handling function-ality?


– have the requirements speciﬁed adequate safeguards that would take eﬀectonce a malicious user has gained unauthorized access to the system?


– does the system have a well-deﬁned status, either a secure failure state orthe start of a plausible recovery procedure, after a failure condition?


as a new perspective proposed by the authors, the black hat perspectivefocuses the reviewer on ﬁnding weaknesses in the requirements that could beexploited via an attack. the scenario that the reviewer follows is to create aset of malicious attack scenarios that seek to exploit system vulnerabilities.


3.0.2 types of security properties


while creating the black hat scenario, the reviewer focuses on three typesof security properties at the requirements stage: cryptography, authentica-tion/authorization, and data validation. these types of properties, alongwith the related questions were adapted for requirements from araujo andcurpheys article on security code reviews [2].cryptography relates to the encoding mechanisms speciﬁed for dataitems within the system. during the review, the inspector is looking for under-speciﬁed or incorrectly speciﬁed features that could be exploited. the questionsinclude the following:


– can the encoding mechanism speciﬁed for transmission and storage of databe broken?


– do the cryptography mechanism speciﬁed follow well-known, well-document-ed, and publicly scrutinized algorithms, and if not, can they be easily bro-ken?


authentication/authorization focuses the reviewer on on determininghow unauthorized users could gain access to the system. the questions includethe following:


– can the protocols for validating user identity be broken?– if account lockout is speciﬁed, are there requirements in place to preventdenial-of-service attacks?


– can user privileges be artiﬁcially elevated due to omission or poorly spec-iﬁed requirements?


lastly, data validation is an important source of security vulnerabilitiesand focuses the reviewer on determining whether invalid data could be enteredinto the system. the question is: do the requirements leave any opportunitiesfor invalid data to be entered by the lack of validation of external data?


10hugo villamizar et al.


4 our approach


in this section, we present our approach for reviewing security-related as-pects in agile requirements speciﬁcations of web applications. the approachwas designed considering user stories and their security speciﬁcations as in-put and involves applying natural language processing (nlp). the goal isto relate those user stories to candidate security properties and high-level se-curity requirements proposed by the open web application security project(owasp), a well known online community that produces freely-available ar-ticles, methodologies, documentation, tools, and technologies in the ﬁeld ofweb application security [42]. as a result, the approach provides a user storyfocused reading technique that can be used to support the manual inspectionof agile requirements. the reading technique helps to verify the user storysecurity speciﬁcations against the owasp high-level security requirementsto identify defects such as omissions, ambiguities, inconsistencies, or incor-rect facts. in the following, we provide more details of the conception of theapproach.


4.1 assumptions


the approach was designed with some underlying assumptions in mind. theseassumptions are as follows.requirements are speciﬁed in a user story format. the software industryhas gradually increased the use of agile and hybrid methods in its projects [33].in this context, user story is the most frequently used artifact for require-ments speciﬁcation [48]. therefore, the approach is focused on agile and, morespeciﬁcally, on user stories. the stories are often analyzed independently andstructured in a sentence as follows: as a [role], i want to [feature], so that[reason].the owasp represents a reliable baseline and standard of security guide-lines. owasp has a strong focus on web applications, one of the targets of ourapproach. owasp concerns providing practical information about security inweb applications to individuals, corporations, universities, government agen-cies, and other organizations worldwide. many open source security-relatedsecurity use owasp as a deﬁnitive reference. hence, we consider the reliabilityof this project as a reasonable assumption.


4.2 approach scope delimitation


hereafter, we answer some potential questions to provide further understand-ing of the intended approach.


1 https://docs.sonarqube.org/latest/user-guide/security-rules/


title suppressed due to excessive length11


to whom is the approach intended? our approach was designed to supportnovice inspectors and junior security analysts. this work provides them witha reading technique to assist in the identiﬁcation of defects related to securityaspects in agile requirements speciﬁcations. according to nerur [40], peoplewith a high-level of competence are of vital importance in agile teams becausethey tend not to depend on documentation to fulﬁll their functions. much ofthe knowledge in agile development is tacit and resides in the heads of the de-velopment team members [8]. even more challenging, competence in softwaresecurity is typically not widely spread among agile practitioners [26]. giventhis, it is helpful to guide novice inspectors, including junior security analysts,by providing a detailed reading technique to support them. we believe thatsenior security analysts could still use the approach, but they are outside ofthe scope of our evaluation.what security-related aspects does the approach cover? we decided to fo-cus on security properties and high-level srs as proposed by the owasp [42].these high-level srs describe the most important security features that archi-tects and developers should include in every web application [42]. the systemand software quality requirements and evaluation (square) model [59] alsodeﬁne security characteristics, which hereafter, for term compatibility, will alsobe referred to as security properties. owasp contains three security proper-ties: conﬁdentiality, integrity, and availability. square, in contrast, containsﬁve: conﬁdentiality, accountability, integrity, non-repudiation, and authenti-cation. based on their deﬁnitions, all of the square security properties canbe mapped onto the owasp security properties. for our ﬁnal list of consid-ered security properties, we used the owasp properties with a single change,splitting conﬁdentiality into two separate properties: (i) conﬁdentiality and(ii) identiﬁcation and authentication. table 1 presents the security propertiesconsidered by our approach.


table 1 security properties considered by our approach


security propertydescription


conﬁdentiality (c)degree to which the data is disclosed only as intended.integrity (i)degree to which a system or component prevents unauthorizedaccess to, or modiﬁcation of, computer programs or data.availability (a)degree to which a system or component is operational whenrequired for use.identiﬁcationauthorization (ia)degree to which the identity of a subject or resource can beproved to be the one claimed.


what types of requirements defects does the approach cover? in re, a defectcan be deﬁned as any problem of correctness and completeness with respect tothe requirements, internal consistency, or other quality attributes [53]. a com-mon defect taxonomy used when inspecting requirements is the one proposedby shull [49]. the defect types in this taxonomy are: omission, ambiguity, in-


12hugo villamizar et al.


consistent information, incorrect fact, and extraneous information. however,we excluded the extraneous information defect type (which concerns specifyingrequirements that are not needed). this decision was taken because we use theowasp high-level srs as a reference; while they are stated as mandatory forinclusion, they are not necessarily complete, given that speciﬁc security needsmay sprout for speciﬁc applications. hence, given the impact that a missingsecurity requirement can have on the application, we did not feel comfort-able to recommend exclusions. table 2 shows the defect types covered by ourapproach, their deﬁnitions and examples applied to security.


table 2 defect types deﬁnition and examples in scope of our approach


defect typedeﬁnitionapplied to security


omission (o)necessary information aboutthe system has been omittedfrom the software artifact.


one or more security require-ments that are not coveredby the speciﬁcations originallycreated by an agile team.ambiguity (a)a requirement has multiple in-terpretations due to multipleterms for the same character-istic.


for example, “the system shallinactivate a session when it ex-ceeds certain periods of inac-tivity” is ambiguous because itis not clear the amount of timenecessary to inactivate the ses-sion. it could be seconds, min-utes or hours.inconsistency (is)two or more requirements arein conﬂict.one security requirement spec-iﬁestoencryptdatawithrsaalgorithmbutanotherone speciﬁes to encrypt it withaes.incorrect fact (if)a requirement asserts a factthat cannot be true under theconditions speciﬁed for the sys-tem.


for example, “the system shallprotect the ﬁrewall” does notmake sense because it is theﬁrewall that protects the sys-tem.


what kind of review technique does the approach use? typically, developersand software analysts rely on ad-hoc methods or checklists to analyze docu-ments. in an ad-hoc review, the reader is not given directions on how to read.the result is that reviewers tend to build up skills in document understandingslowly based on individual experiences acquired over time [4]. for this rea-son, we decided to focus the review of our approach on a reading techniqueto increase the eﬀectiveness of individual reviewers by providing a systematicguide that can be used to examine, in our case, security-related aspects andconsequently to identify defects.to which part of the lifecycle of agile methods can the approach be applied?agile methods are characterized by having iterative structures that shouldallow early delivery, continual improvement, and rapid and ﬂexible responseto change [6]. hence, we envision that our approach is used just before a user


title suppressed due to excessive length13


story is deﬁned as ready for codifying. in this way, we avoid rework that canbe caused by not considering a security control or integrating one requirementwith another one.


4.3 overview of our approach


we propose our approach in two deﬁned phases: (1) generating artifacts forthe reading technique based on the agile requirements speciﬁcation, and (2)following the reading technique to identify defects. figure 1 shows the ﬂowand relationships between the artifacts and phases that form our approach.


fig. 1 overall structure of our approach


4.3.1 phase 1: generating artifacts for the reading technique


to generate the artifacts to follow our reading technique, we use natural lan-guage processing (nlp) to extract keywords from the user story. thereafter,these words are used to identify security properties and to link the relatedowasp high-level srs to be veriﬁed. the availability of automatic tools forthe quality analysis of natural language requirements is recognized as a keyfactor for achieving software quality [34]. details on how keywords and securityproperties are identiﬁed follow.extracting keywords. this activity involves automatically analyzing auser story that describes the features and functional requirements of the soft-ware to be built. our approach extracts the relevant verb (action) of the user


14hugo villamizar et al.


story that indicates a potential behavior to consider when thinking about se-curity. for instance, the verb “export” could indicate conﬁdentiality concernsbecause it is an action about transporting something. on the other hand, theverb “modify” could indicate integrity concerns because it is an action thatinvolves altering something. in some cases, the nouns of the user story canalso indicate situations where certain security features should be considered.this is particularly important to identify availability needs, e.g., time values(day, hour, second, period) may indicate scale/performance restrictions of thesoftware. in that sense, nouns are also extracted for matching purposes. insummary, the verb is extracted from the second block of the user story formatand nouns are extracted from the third block. table 3 shows where the wordscome from.


table 3 way to extract the keywords from the user story


type of worduser story skeleton


verbsas a [user], i [want to], [so that].nounsas a [user], i [want to], [so that].


to extract the words, we developed a software framework (fesras),2


which uses the stanford corenlp tool3 through a library that provides a setof natural language analysis tools written in java. the library represents eachsentence as a directed graph where the vertices are words and the edges arethe relationships between them. thereby, the software framework can take theverbs and nouns of the user story. figure 2 shows how the stanford corenlptool represents the user story to identify verbs, nouns, among other kind ofwords. for this, consider the sentence: the system shall terminate a remotesession after 30 minutes of inactivity.


fig. 2 sentence representation [50]


2 https://github.com/hrguarinv/fesras3 https://github.com/stanfordnlp/corenlp


title suppressed due to excessive length15


note that the words extracted by using the stanford core nlp are notalways keywords. after extracting the verb and nouns, we need to determineif these words match any keyword of our repository. if so, the user story con-tains at least one keyword that indicates some security concern that shouldbe addressed. this matching is explained below.identifying security properties and linking high-level srs. afteridentifying the keywords of the user story, we need to identify security prop-erties in order to map high-level srs that represent a set of security-speciﬁcfeatures to be veriﬁed. we use the keywords extracted from the user story tomap security properties. our software framework contains a set of keywordsthat are related to at least one security. table 4 shows some these keywordsthat are part of our repository, to indicate which security properties should beconsidered. as an example, observe that the keyword “access”, that is a verb,indicates security concerns related to conﬁdentiality, identiﬁcation and autho-rization, because when accessing data, controls must be in place to guaranteethe correct disclosure to it. our online material, available at zenodo4, containsall the keywords of the repository.


table 4 relationship between the keywords and security properties


keywordconﬁdentialityintegrityavailabilityia


accessxxalterxapplyxauto-populatexchangexcreatexdeﬁnexdeletexdisplayxestablishxexportxgeneratexmodifyxreadxxrecoverxbackupxdayxhourxpasswordxperiodxprivilegexrolextimex


this repository is based on a similar one provided by slankas and williams [50]in their work about automated extraction of nfrs in available documentation.


4 https://doi.org/10.5281/zenodo.3966542


16hugo villamizar et al.


however, we complement it by (1) considering additional keywords stated bythe owasp and (2) including synonyms of the words from these sources. bydoing this, we increase the coverage of our repository. if there is no match be-tween the words extracted and the keywords of our repository that indicatessecurity properties, our approach will link the user story with their securityspeciﬁcations to all the security properties stored in our repository. with thisthe inspection will not be as advantageous in terms of eﬀort and time as weanticipated because the reviewer will have to evaluate each of the securityproperties. however, in this way we ensure that the user story is examined bythe four main domains of security in web applications.after identifying the security property, we need to link the high-level srs,which according to owasp, are basic to deal with security in web applications.table 5 shows the owasp high-level srs by security property.


table 5 owasp high-level security requirements by security property


security propertyowasp high-level security requirements


conﬁdentialityc1. data shall be protected from unauthorized observationand disclosure both in transit and when stored.c2. system sessions shall be unique to each individual andcannot be shared.c3. system sessions are invalidated when timed out duringperiods of inactivity.c4. tls protocol shall be used where sensitive data is trans-mitted.c5. system shall use strong encryption algorithm at all times.integrityi1. any unauthorized modiﬁcation of data must yield an au-ditable security-related event.i2. all input is validated to be correct and ﬁt for the intendedpurpose.i3. data from an external entity shall always be validated.availabilitya1. the application server shall be suitably hardened from adefault conﬁguration.a2. http responses contain a safe character set in the contenttype header.a3. backups must be implemented and recovery strategiesmust be considered.identiﬁcation &authorizationia1. users are associated with a well-deﬁned set of roles andprivileges.ia2. the digital identity of the sender of a communicationmust be veriﬁed.ia3. only those authorized are able to authenticate and cre-dentials are transported and stored in a secure manner.ia4. passwords treatment must include complex passphrases,options to recover and reset the password and default pass-words not allowed.


at this point of our approach, we already identiﬁed the keywords of the userstory, the security properties related to those keywords and consequently, theowasp high-level srs that address those security properties. the next step is


title suppressed due to excessive length17


to build the defect reporting form that works as a model and synthesizes mostof the information the inspector needs to identify defects in the speciﬁcations.this form presents, in a structured way, much of the information that thereviewer must analyze to identify and classify the defects. information suchas the user story, the security property, the owasp high-level srs and thedefect types are provided by the form. figure 3 shows a template of this formwith two of the security properties covered by our approach.


fig. 3 defect reporting form


with the defect reporting form ready to be used the inspectors can useit as a model to verify whether the security speciﬁcations built, in a realis-tic example, by requirements or security analysts, contains any of the defecttypes covered in this work. this happens when inspectors compare the securityspeciﬁcations against the owasp high-level srs presented in the reportingform. to reach this, our approach formulates a set of veriﬁcation questions tohelp identifying the diﬀerent defect types in the security speciﬁcations. table 6shows the questions.


table 6 veriﬁcation questions for the diﬀerent defect types


type of defectquestion


omissionwhen comparing the security speciﬁcations with the owasphigh-level srs, are there high-level srs or characteristics thatwere not speciﬁed?ambiguitydoes any security speciﬁcation allow for multiple interpretations?inconsistencyare there two or more security speciﬁcations in conﬂict?incorrect factis there any security speciﬁcation stating information that is nottrue under the conditions speciﬁed?


the ﬁrst question aims to identify omission defects. for this type of defect,we provide to inspectors our rewritten owasp high-level srs that work as amodel. with this, we seek to identify which srs, stated by owasp as basicand essential, are missing in the security requirements that were speciﬁed inagile software projects. note that in the worst case, few or no security re-quirements are speciﬁed, as typically occurs in this type of projects. thus, bydoing this comparison we can oﬀer relevant insights to inspectors to identify


18hugo villamizar et al.


this type of defect. to identify the remaining defects, we use their deﬁnitionsin a clear and short way. our intention is to provide agile support to increasethe eﬃciency of the inspection task. we believe that inspectors can directlyassociate the concept of the defect with the actions that allow them to identifysuch defects. for instance, to detect ambiguity defects our reading techniqueasks the inspector if any security speciﬁcation allows for multiple interpreta-tions. regarding inconsistency defects, the inspectors must focus on ﬁguringout whether two or more security speciﬁcations are in conﬂict. in this way,the meaning of the defect seeks to guide the inspector on the detection ofambiguity, inconsistency and incorrect fact defects.


4.3.2 phase 2: following the reading technique


this phase aims to guide the reviewer in ﬁnding the requirements defects.using the artifacts generated in phase 1, we propose a reading technique thatinspectors can follow to answer the veriﬁcation questions in order to lookfor defects. as presented in section 2.2, software reading techniques help areviewer to “read” a requirement artifact for the purpose of ﬁnding relevantinformation that gives speciﬁc and practical guidance for identifying, in thiscase, security-related defects in agile requirements speciﬁcations.to facilitate the review, our approach rewrites the owasp high-level srsin such a way that inspectors can easily identify certain security aspects. forinstance, we use the “and” logical connector in capital letters to get the at-tention of the reader and indicate that both aspects must be considered tosatisfy the high-level sr, e.g., we have the following to the ﬁrst conﬁdentialityhigh-level sr: c1. data shall be protected from unauthorized observation ordisclosure both in transit and when stored. in this case, if the speciﬁcationswere well speciﬁed, they must consider security aspects related to data pro-tection both in transit and in storage. otherwise, there is an omission defect.


fig. 4 visual aspect of the rewritten owasp high-level srs


on the other hand, the security statements provided by our reading tech-nique also present examples for some concepts in order to give inspectors an


title suppressed due to excessive length19


idea about the context of the owasp high-level srs. an example to the sec-ond integrity high-level sr follows: i2. all input, e.g., query parameters, stringvariables and cookies, is validated to be correct and ﬁt for the intended pur-pose. in this way, reviewers are provided with a reading technique that shouldincrease their performance during the review. figure 4 shows an example ofhow the owasp high-level srs looks to get the attention of inspectors.


to summarize how inspectors should use our approach, we present figure 5that provides a step-by-step of the activities to be followed by inspectors.the process begins by reading and analyzing the user story and their securityspeciﬁcations (input of our approach) to compare them with the owasp high-level srs. after this, inspectors can read our security veriﬁcation questions foreach defect type with the aim of detecting them and then report them (outputof our approach). please note that the process is repeated for each user storywith their respective security speciﬁcations. we clarify that if there are norelated security speciﬁcations as input in our approach, the result will be allof the owasp high-level srs related to the security property matched by thewords extracted from the user story.


fig. 5 procedures to apply to each user story


20hugo villamizar et al.


4.4 motivational example


in the following, we demonstrate the application of our approach in an exam-ple setting. for this purpose, we present one of the agile speciﬁcations used inthe experiments. table 7 shows a user story and its set of security speciﬁca-tions (inputs of our approach) with some defects commonly applied to a webapplication.


table 7 input of the approach as agile requirements speciﬁcation


user storysecurity speciﬁcation (ss)


as a customer, i want to beable to export my personalinformation so that i can useit in other systems.


ss1. the system shall ensure that there is no residualdata exposed.ss2. the system shall store credentials securely usingthe aes encryption algorithm.ss3. the system shall use the rsa encryption algo-rithm to protect all data all the time.ss4. the system shall deactivate a session when it ex-ceeds certain periods of inactivity.ss5. the system shall encrypt the roles and privilegesof the system.


with the user story in sight, the software framework extracts the words ofthe second and third block of the user story by using the stanford corenlp,and then evaluates whether there is match to link the security properties.in this case, the extracted words are “export” (from the second block) and“system” (from third block). the following illustrates which keywords areextracted from the user story.


as a customer, i want to be able to export my personal information sothat i can use it in other systems.


thereafter, the framework can verify whether some security property isrelated to the extracted words. according to table 4, “export” matches con-ﬁdentiality, while “system” does not match any of the security properties.figure 6 presents the relationship between the keyword and the security prop-erty.in this way, since our approach identiﬁed conﬁdentiality as security prop-erty, it can propose owasp high-level srs (cf. table 5, conﬁdentiality). aspart of our approach, we rewrite those owasp high-level srs to improve itsreadability and understanding. for that reason, the owasp high-level srsare provided to inspectors in the following way.


– c1. data shall be protected from unauthorized observation and disclosureboth in transit and when stored.


– c2. system sessions shall be unique to each individual and cannot beshared.


title suppressed due to excessive length21


– c3. system sessions are invalidated when timed out during periods of in-activity.


– c4. tls protocol shall be used where sensitive data is transmitted.– c5. system shall use strong algorithms (e.g, des, aes, rsa) to encryptdata.


fig. 6 matching keywords to security properties


these owasp high-level srs are the basis to determine if the securityspeciﬁcations presented in table 7 contains omission defects. note that in-spectors are encouraged to read our veriﬁcation questions to further analyzethe quality of the speciﬁcations.our approach then generates the defect reporting form by showing theuser story with the linked security properties and owasp high-level srs.the veriﬁcation questions are also provided here. thus, inspectors know whichsecurity aspects they should verify. in that sense, the veriﬁcation process startsat this point. by having inspectors responding to the veriﬁcation questionslooking for defects, we expect to obtain valuable insights from them on thequality of the security speciﬁcations. a sample enactment of answering thesequestions follows.when comparing the security speciﬁcations with the owasp high-levelsrs, are there high-level srs or characteristics that were not speciﬁed? inthis case, 3 out of 5 conﬁdentiality high-level security requirements linked intable 5 are related or make sense to the security speciﬁcations. however, wehave two unspeciﬁed high-level requirements. note that the second conﬁden-tiality high-level sr (c2) and the fourth conﬁdentiality high-level sr (c4)are not covered by the security speciﬁcations. therefore, we have detected twodefects that should be marked as “omission”.


22hugo villamizar et al.


does any security speciﬁcation allow for multiple interpretations? if we an-alyze with caution, we see that the fourth security speciﬁcation (ss4) reﬂectsa weak statement as the amount of time concerning “certain periods of inac-tivity”. it could be hours or seconds. thus, we have identiﬁed a defect relatedto ambiguity.are there two or more security speciﬁcations in conﬂict? the answer isaﬃrmative. the second security speciﬁcation (ss2) and third security speciﬁ-cation (ss3) conﬂict because ss3 indicates to encrypt all data using the rsaalgorithm. nevertheless, ss2 indicates to protect credentials, which are alsodata, using the aes algorithm. thus, we have identiﬁed a defect related toinconsistency.is there any security speciﬁcation stating a characteristic that cannot betrue under the conditions speciﬁed for the system? the ﬁfth security speci-ﬁcation (ss5) is not correct because the concepts of the system cannot beencrypted. the action “encrypt” is not correct in the statement.


table 8 defects reporting form


user storysecurity propertyowasp high-level srsoaisif


us1conﬁdentiality


c1.datashallbepro-tected from unauthorizedobservationanddisclo-sure both in transit andwhen stored.


ss4ss2ss3ss5


c2. system sessions shallbe unique to each individ-ual and cannot be shared.


x


c3. system sessions are in-validated when timed outduring periods of inactiv-ity.c4. tls protocol shall beused where sensitive data istransmitted.


x


c5. system shall use strongalgorithms (e.g, des, aes,rsa) to encrypt data.


finally, the reviewers ﬁll out the defect reporting form that summarizesthe defects found. table 8 presents the output of the review using the readingtechnique. note that the o column is related to the owasp high-level srsthat were omitted to satisfy the security property (sp). the other columnsare related to the remaining defect types.in summary, this table indicates that the security speciﬁcations related tothe user story contain six defects. two out of them were marked as omissionbecause the second and fourth owasp high-level srs related to conﬁdential-ity (c2, c4) are not covered by the security speciﬁcations. the rest of thedefects (4) are related to ambiguous, inconsistent and incorrect fact defects.in this case, the fourth security speciﬁcation (ss4) was marked as ambiguous,


title suppressed due to excessive length23


the second security speciﬁcation (ss2) and the third security speciﬁcation(ss3) were marked as inconsistent and the ﬁfth security speciﬁcation (ss5)was marked as incorrect.


5 experiment


we evaluated the approach by conducting three controlled experiment trialswith eight graduate and 48 undergraduate computer science students of thepontiﬁcal catholic university of rio de janeiro. the focus was to observe theimpact of using our approach on eﬀectiveness, eﬃciency, usefulness and easeof use.we evaluated the study in two phases. in the ﬁrst, we wanted to knowwhether our approach was suitable under certain non-complex conditions.with some positive results, the second phase was planned. in this case, thegoal was to obtain more empirical evidence and then determine whether ourapproach is technically promising to use it in more complex environments.thus, we conducted a new study by analyzing the eﬀectiveness and eﬃciencyof our approach when compared with the pbr black hat approach proposedby carver et al. [12]. this decision was supported due to that approach uses thesame type of inspection technique that our approach and therefore is totallyaimed at identifying security-related defects.the motivation for conducting the new study is to examine whether theﬁndings can be replicated in diﬀerent levels of support (e.g., using the pbrblack hat approach), incorporating lessons learned from the ﬁrst evaluation.we considered guidelines for reporting additional experimental studies pro-posed in [11].in this section, we detail the design of the experiments conducted to evalu-ate our approach. we present the goal, hypotheses, variable selection, selectionof subjects, instrumentation, among others. we break down the experimentsin three trials with diﬀerent characteristics. in the original study, we allocatedundergraduate and graduate students of computer science that were dividedinto two trial experiments. regarding the new study (third trial), we assignedundergraduate students. table 9 present some relevant details of the trialsconducted across the study.


table 9 controlled experiment trials conducted across the study


studytrialdateundergraduategraduatetotal


original1march, 2019250252march, 2019088new3november, 201923023


in the following, we present similarities and diﬀerences between the origi-nal and the new study. in all the studies, subjects were assigned to the task of


24hugo villamizar et al.


identifying security-related defects based on a set of agile requirements speci-ﬁcations.


5.1 goal, hypotheses and research questions


for all the experiments (original and new study), we wanted to determinewhether the use of our approach leads to eﬃcient and eﬀective detection ofsecurity-related defects when compared to an ad-hoc inspection based on per-sonal expertise and the pbr black hat approach. table 10 details the deﬁni-tion of this study’s goal by following the template provided by basili [5].


table 10 goal deﬁnition of the experiments


analyzethe reading technique generated by our approachfor the purpose ofcharacterizationwith respect tothe eﬀectiveness, eﬃciency, usefulness and ease of use of the approachfrom the point ofview ofresearchers (on the measured eﬀectiveness and eﬃciency) and in-spectors (on the perceived usefulness and ease of use)in the context ofnovice inspectors using our approach, when compared to using theowasp high-level srs and the pbr black hat approach.


based on our goal, we formulated research questions (rqs) that seek toaddress two aspects that we believe should be covered by our approach. first,eﬃciency and eﬀectiveness play an important role in inspection activities, asinspectors should be able to ﬁnd defects (eﬀectiveness) with reasonable eﬀort(eﬃciency). second, we also address usefulness concerns, because they areclosely related to the adoption of the approach. therefore, we deﬁned thefollowing two rqs that apply to both the studies conducted.


– (rq1) does our approach have an eﬀect on defect detection eﬀectivenessand eﬃciency when compared to the other review approaches of the study?


– (rq2) how do the inspectors perceive the usefulness and ease of use ofour approach?


based on rq1, we derived hypotheses to be evaluated quantitatively. notethat we deﬁned hypotheses that vary depending on the study performed andthat they may refuted or supported only in comparison with the consideredother methods. in the original study, the following hypotheses were derived:


– h01a: there is no diﬀerence in terms of eﬀectiveness when using our ap-proach, when compared to using the owasp high-level srs.


– h11a: there is a diﬀerence in terms of eﬀectiveness when using our ap-proach, when compared to using the owasp high-level srs.


– h02a: there is no diﬀerence in terms of eﬃciency when using our approach,when compared to using the owasp high-level srs.


– h12a: there is a diﬀerence in terms of eﬃciency when using our approach,when compared to using the owasp high-level srs.


title suppressed due to excessive length25


regarding the new study, we compare the performance of using our ap-proach against the pbr black hat approach. thus, we deﬁned the followinghypotheses.


– h01b:there is no diﬀerence in terms of eﬀectiveness when using our ap-proach, when compared to using the pbr black hat approach.


– h11b: there is a diﬀerence in terms of eﬀectiveness when using our ap-proach, when compared to using the pbr black hat approach.


– h02b: there is no diﬀerence in terms of eﬃciency when using our approach,when compared to using the pbr black hat approach.


– h12b: there is a diﬀerence in terms of eﬃciency when using our approach,when compared to using the pbr black hat approach.


5.2 variables selection


the independent variable is the treatment applied by the groups to detectdefects in the srs speciﬁcations. in that sense, inspectors who were part of thecontrol group in the ﬁrst and second trial received as support the owasp high-level srs. on the other hand, in the third trial, inspectors who were part ofthe control group received the pbr black hat approach, but at the same time,they received the same support that inspectors in the ﬁrst and second trial,that is, they also received the owasp high-level security requirements. withrespect to the experimental group, all the inspectors received our approach.


table 11 metrics used to answer the rqs and test the hypotheses


criteriatypedescription


eﬀectivenessquantitativeratio between the number of defects found and thetotal of seeded defects in the speciﬁcationseﬃciencyquantitativeratio between the number of real defects found andthe time spent in ﬁnding themusefulnessquantitativefrequency of the participants’ perception on the use-fulness of the approach using a follow-up questionnairequalitativecoding of the answers of the follow-up questionnaireease of usequantitativefrequency of the participants’ perception on the easeof use of the approach using a follow-up questionnairequalitativecoding of the answers of the follow-up questionnaire


regarding the dependent variables, we used eﬀectiveness and eﬃciency,deﬁned as follows. eﬀectiveness is expressed as the ratio between the numberof real defects found and the total of seeded defects in the documents. on theother hand, eﬃciency refers to the ratio between the number of real defectsfound and the time spent in ﬁnding them. for these variables, we collectedquantitative data to test the hypotheses presented in section 5.1. we alsocollected qualitative data with open questions via a follow-up questionnaire.


26hugo villamizar et al.


the aim was to gain insights about the perceived usefulness and ease of use ofthe approach. table 11 summarizes the metrics collected in the experiments.


5.3 selection of subjects


our subjects were intended to represent novice inspectors. we thus selectedsubjects, by convenience, from classes on computer science at puc-rio, in-volving, for the original study, 25 undergraduate (ﬁrst trial) and eight grad-uate students (second trial). regarding the new study, the experiment wasconducted in one trial (third trial), involving 23 undergraduate students fromclasses on computer science at puc-rio. there is evidence that using studentsis an eﬀective way to advance software engineering theories and technologiesbut, like any other aspect of study settings, should be carefully considered dur-ing the design, execution, interpretation, and reporting of an experiment [22].we characterized the subjects by their experience and knowledge in ﬁveareas: agile software development (asd), agile re (are), security aspects(sa), security requirements (sr) and requirements inspections (ri). to thisend, we deﬁned a scale from one to ﬁve where lower score indicates lowerexperience and high score indicates experience in the industry.table 12 shows details of the characterization of the students of the originalstudy. subjects with at least three values greater to three were highlightedto identify the participants were equally divided between the groups of theexperiments, applying the blocking principle. we did not list subjects of thenew study because none of them met the requirements to be treated diﬀerently.therefore, they were randomly assigned into control and experimental groups.as a result, we found that the majority of students had a low level of secu-rity and requirements inspection experience. hence, they match our intendedproﬁle (novice inspectors).


5.4 experiment context


in the following, we detail the experiment context of the studies. before con-ducting the controlled experiment of the ﬁrst trial, we carried out a pilot studywith two independent volunteers. the aim was to evaluate the overall (partic-ularly technical) feasibility, time, adverse events, and improve the experimentmaterials before the experiment trials.all the studies were conducted with the same agile speciﬁcations. theserequirements contain a set of user stories in this format: as a [role], i want[feature], so that [reason]. the document also contained their related securityspeciﬁcations with seeded defects that represent speciﬁcations that in realsettings, would be created by requirements analysts or product owners in agile


title suppressed due to excessive length27


table 12 details of the characterization of the subjects


experimentlevelidtrialasdaresasrri


originalundergraduate11331122121112


3144442


4141434


51524426122212712233381222119132112101522121112122112132122131111111412533115122222161552131713111118131322191411222015522121144111


22155224231232222414411125122321graduate2623233127222331


282424422924211130241222


312434453222223333222222


aiming at mitigating threats to validity concerning the distribution of sub-jects between groups, we characterized the subjects and then applied the prin-ciples of balancing, blocking and random assignment [58]. in all the trials, stu-dents who demonstrated experience on the topics involved in the study wereseparated and distributed equally into the control and experimental group.in the case of the ﬁrst and second trials, we allocated equally 6 out of 33between the groups, given they had higher scores. regarding the new study,subjects were randomly placed into the experimental and control group sincethe characterization did not shed light. table 13 shows the support given tothe control and experimental group in each trial.


in table 14, we present the number of undergraduate students (us) andgraduate students (gs) in each group of the trials.


28hugo villamizar et al.


subjects who found less than two defects were discarded as outliers be-cause, in our understanding, their results reﬂect a lack of interest in havinga good performance in the review. in the original study, we discarded twosubjects from the ﬁrst trial and one for the second trial. all these discardedsubjects conducted the inspection by using the owasp high-level srs (con-trol group). regarding the new study, we discarded one subject from the thirdtrial. in this case, the discarded subject conducted the inspection by using ourapproach (experimental group).


table 13 support provided to each group of the experiments


trialcontrol groupexperimental group


1, 2owasp high-level srsour approach3pbr black hat + owasp high-level srsour approach


table 14 number of subjects by experiment, trial and group


experimenttrialcontrolexperimentaltotal


original112 us13 us2524 gs4gs8new311 us12 us23


to avoid the defect seeding to represent a confounding factor, the typeand amount of seeded defects to evaluate the suitability of our approach wascarefully considered. all the trials were conducted with the same type anddistribution of defects. table 15 shows the distribution of the seeded defectsper user story. in total, 14 defects were seeded. three independent researchersreviewed the representativeness of the requirements speciﬁcations and the de-fects before conducting the experiment trials.


table 15 distribution of the seeded defects


user storyomissionambiguityinconsistencyincorrect facttotal


us122217us222217


the original (ﬁrst and second trial) and the new study (third trial) diﬀeredin terms of certain aspects related to the setting of the study. in the originalstudy 33 subjects participated, divided into two trials with 25 undergraduateand eight graduate students. in the new study, we involved 23 undergraduatestudents. this number of participants was deﬁned according to the availability


title suppressed due to excessive length29


of students to whom we had access and who met our study proﬁle. we con-ducted the experiments as an in-class activity to have the attendance of mostof our subjects. we motivated the subjects to give their best, while we guar-anteed the conﬁdentiality of their results. regarding training, in the originalstudy we did not provide training on inspection techniques because, at thattime, we considered that our approach and our task description could be self-assimilated by the students. after the lessons learned from the ﬁrst study, weidentiﬁed that training should be provided in the new study. for that reason,we provided training on both, our approach and the pbr black hat approach.additionally, we reminded inspectors to pay attention to the task descriptionaccording to the treatment provided. these changes were motivated by thefeedback received by the inspectors in the follow-up questionnaire of the ﬁrsttwo trials. table 16 presents the main factors involved in the experiments tosummarize the context of the original and the new study.


table 16 context factors of the experiments


context factorsoriginal studynew study


subjects25 us and 8 gs23 us


settingin-class activityin-class activity


training provided–security properties andowasp–type of defects


–security properties and owasp–type of defects–our reading technique and pbrblack hat approach


other changesna–reminder to follow the task de-scription


5.5 experiment design


our experiments were composed of one factor with two treatments: (1) usingour proposed reading technique and (2) using the owasp high-level srs (ﬁrsttwo trials) or using the pbr black hat approach (third trial). figure 7 showsall the phases involved in the experiments.the study design is composed of a set of artifacts distributed into threephases. details of the artifacts used in the experiment are available at zenodo5.in the ﬁrst phase, all the students ﬁlled out a characterization questionnairewith questions about their expertise in the topics related to the study. theyalso received training to introduce the main topics. in the second phase, weobtained quantitative data by conducting the original (ﬁrst and second trial)and new study (third trial). the students of all the experiments were dividedinto two groups in order to evaluate the performance by executing the review


5 https://doi.org/10.5281/zenodo.3966542


30hugo villamizar et al.


fig. 7 experimental design of the study


using or not our approach. finally, in the third phase, the participants of theexperiments gave us feedback on the execution of the experiment. the instru-ments used to conduct the experiment are further described in the following.


5.6 instrumentation


characterization questionnaire. the goal of the questionnaire is to characterizethe experience of the subjects and identify key characteristics of four topics:agile software development, re, software security and inspections.training. in the ﬁrst and second trials, the training was focused on thesecurity properties, the owasp high-level srs and the defect types involvedin the experiment. in the third trial, we included training on how to use eachof the inspection techniques. furthermore, we provided feedback on commonerrors along with the experiments and we emphasize strictly following the taskdescription of the experiment.user story and security speciﬁcations: the input of our approach is a userstory and its set of security speciﬁcations. therefore, we created the speciﬁ-cations following the guidelines proposed by lucassen et al. [35]. they werebased on typical customer requests for developing web applications, e.g., send-ing sensitive information to other systems and deleting data. when doing so,we relied as an orientation on srs speciﬁcations from real industrial softwareprojects as used by our industry partners. we did not use real speciﬁcationsverbatim in our setting for conﬁdentiality reasons.task description. this document explains to the students how to ﬁll out thedefect reporting form according to their treatment. both treatments received


title suppressed due to excessive length31


the same speciﬁcations. for one treatment (experimental group), the techniquewas generated according to the user story and its related owasp high-levelsrs. for the other treatment (control group), in the ﬁrst two trials, the list ofthe owasp high-level srs with the list of the defect types was provided. inthe third trial the control group also received the pbr black hat approach.defect reporting form. this form was used by subjects to record the startand end time of the review, as well as the defects by location and type. thedefect reporting form for the experimental group was the one generated forapplying the reading technique in table 8.follow-up questionnaire. this questionnaire was based on the technologyacceptance model (tam). tam has been extensively used in several stud-ies [54]. we wanted to know whether the approach was useful and easy to use.we included open text questions to gather feedback about the diﬃculties andbeneﬁts of using our approach.


5.7 data collection procedure


we used the following procedures to collect the data necessary for answeringour research questions and test our hypotheses.collect defects found and false positives: inspectors applied the readingtechnique generated by our approach on the given requirements artifacts,which generated a list of detected defects by each inspector. the same pro-cess was applied by the remaining treatments involved in the experiments. wereviewed the output of each inspector in pairs of researchers, and classiﬁed aregistry as false positive if it was not a defect. based on this data, we evaluatedthe performance of the treatments in terms of eﬀectiveness, considering onlydefects (i.e., true positives).collect time spent for detecting defects: in this study, time spent refersto the amount of time inspectors spent to identify defects. we collected thetime spent by each inspector during the inspection. the time spent is thediﬀerence between the start time and end time. note that this time does notinclude activities such as training and follow-up questionnaire. we deﬁned1 hour as the maximum time limit to be spent by an inspector to ﬁnd theseeded defects. the pilot study was helpful to deﬁne the time it would take forinspectors to complete the inspection task. based on this data, we evaluatedthe performance of the treatments in terms of eﬃciency.collect perceptions of the subjects:finally, to answer rq2, we used thetam based [54] follow-up questionnaire to collect feedback on the usefulnessand ease of use of our approach and the pbr black hat approach.


5.8 analysis procedure


we structure our analysis procedure into four steps. each step leads to theresults necessary for answering one of our research questions.


32hugo villamizar et al.


calculate eﬀectiveness and eﬃciency of the experiment treatments: first,we analyzed the performance of each treatment by carrying out descriptivestatistics such as the percent of defects detected in the agile speciﬁcations andthe time duration to perform the review. hypotheses testing was also applied.to this end, the analysis was conducted using the statistical tool rstudioversion 1.1.4. for the hypotheses testing, we used the mann-whitney testwith alfa = 0.05. the small number of independent samples motivated thischoice of statistical signiﬁcance and test. second, to get a deeper insight intothe defects detection, we analyze the distribution of types of defects identiﬁedby inspectors. this provided answers for rq1.analyze the number of false positives:we know that the reliability ofan inspection technique is important. therefore, we analyze false positives todetermine to which extent our approach leads inspectors to false positives. wealso analyzed this metric for the approaches compared in the experiments.interpret questionnaire answers: we analyze the frequencies of responsesto the tam questionnaire. additionally, we conducted a qualitative analysisapplying grounded theory open coding activities to the open questions. thisprovided answers to rq2.


5.9 operation of the experiments


the original study (i.e., the ﬁrst two trials) was conducted in march of 2019[57], whereas the new study (i.e., the third trial) was conducted in novemberof 2019. all trials were executed along two days. on the ﬁrst day, the subjectsanswered the characterization form in order to allow dividing them into ex-perimental groups. on the second day before the execution of the experiment,concepts of the security properties, owasp high-level srs, and defect typeswere reviewed by subjects in a training session. in the case of the new study,training on the inspection techniques was provided. after that, the inspectionwas conducted as follows.all subjects had up to one hour to ﬁnish the review. in the original study,the control group used the owasp high-level srs as support during the re-view, while in the new study the control group used the pbr black hatapproach. the experimental group used our approach. when the subjects ﬁn-ished the task, they had to ﬁll out the follow-up questionnaire.


6 results


in the following, we present the results of the trials conducted in the study. weﬁrst describe the results on defect detection eﬀectiveness and eﬃciency. we alsopresent more speciﬁc results on false positives introduced by inspectors andthe types of defects identiﬁed by them. we end by evaluating the perceptionof the inspectors on the usefulness and ease of use of our approach.


title suppressed due to excessive length33


6.1 results on defect detection eﬀectiveness


in this section we present the performance of inspectors in terms of eﬀective-ness across the trials involved in the experiments. we analyze the numberof defects found by inspectors who used our approach and other inspectionmethods with diﬀerent levels of support. we wanted to understand the po-tential of our approach to detect security-related defects in agile requirementsspeciﬁcations of web applications. for this, we compared the performance ofthe eﬀectiveness of our approach against the performance of the eﬀectivenessof inspections conducted with the owasp high-level srs and the pbr blackhat approach. figure 8 presents the defect detection eﬀectiveness of each in-spection technique by showing the distribution of the number of defects foundby the subjects in each experimental trial.


fig. 8 defect detection eﬀectiveness across the experiments


it is possible to observe that our approach was more eﬀective than inspec-tions conducted with the owasp high-level srs and the pbr black hat ap-proach. in the original study (ﬁrst and second trial), both experimental groups(green block) identiﬁed more defects than the control groups (blue block). forinstance, in the ﬁrst trial of the original study, conducted by undergraduatestudents, the experimental group (students who used our approach) identiﬁedin median, 54% defects, while the control group (students who conducted theinspection by using the owasp high-level srs) identiﬁed 23%. the diﬀerencewas even higher when observing the performance of the second trial conductedby graduate students. those who used our approach identiﬁed, in median, 69%of the defects versus 23% identiﬁed by the students who did not use it. thisimprovement can be explained for two reasons. (1) often, graduate studentshave more experience than undergraduate students since the ﬁrst ones havefaced several real projects. we showed this trend in our characterization ques-


34hugo villamizar et al.


tionnaire. on the other hand, (2) in the second trial, we slightly modiﬁed thedefect reporting form to ease its understanding and fulﬁllment. the reason wasthat in the ﬁrst trial several inspectors mentioned that the defect reportingform was confusing. the change consisted of merging the columns a, is andir to understand better that those defect types do not have a 1 to 1 relation-ship with the security speciﬁcations such as the o column. in other words, weimproved the design of the defect reporting form, while it remained to capturethe same information.


concerning the third trial (new study) conducted by undergraduate stu-dents, the eﬀectiveness followed the same pattern as the original study. thatis, students who used our approach identiﬁed more defects than students whoused the pbr black hat approach. note that in this trial, the control groupalso used the owasp high-level srs to support the pbr black hat approach.we decided to provide that support because the pbr black hat approach doesnot cover all the defect types introduced in the security speciﬁcations. it isnoteworthy that the pbr black hat approach was not originally designed forthe agile context, however, at the same time, its conception does not excludethis type of requirements. in the end, the experimental group (green block)identiﬁed, in median, 58% of the defects, while the control group (red block)identiﬁed 38%.


when comparing the results between the new and the original study, wefound that the pbr black hat approach (red block) improved the performancein terms of eﬀectiveness when compared to the inspection conducted usingonly the owasp high-level srs (blue block). this indicates that the pbrblack hat approach also helps in detecting security-related defects. this isoutstanding if we consider that the pbr black hat approach was conceived in2002 under diﬀerent security concerns than those evaluated in our experiment.


we also wanted to test our null hypothesis on the eﬀectiveness (h01a andh01b), i.e., we checked whether the diﬀerences obtained in our experimentswere signiﬁcant to aﬃrm or reject the hypotheses. to this end, we used themann-whitney test. in that sense, the results of the tests allowed to rejecth01a and h01b for all experimental trials because we obtained p-values ofmeans there is a signiﬁcant diﬀerence in terms of eﬀectiveness when using ourapproach compared to conducting inspections with the owasp high-level srsand the pbr black hat approach. in other words, the amount of defects foundof our approach can be considered signiﬁcantly high compared to the othertechniques involved in the experiments. besides, to complement the p valuesresults, we calculated cohen’s eﬀect size which is a quantitative measure ofthe magnitude of a phenomenon. for all the experiments we obtained values ofto [55], this values can be considered as very large eﬀect size. thus, we canpartially answer rq1: our approach has a positive impact on defect detectioneﬀectiveness with a very large eﬀect size.


title suppressed due to excessive length35


6.2 results on defect detection eﬃciency


after knowing the eﬀectiveness of our approach across the diﬀerent trials, wecan question its eﬃciency by analyzing the defects found per hour by theinspectors. figure 9 shows the distribution of the eﬃciency of the subjectsinvolved in the experiments.


fig. 9 defect detection eﬃciency across the experiments


note that the eﬃciency follows the same pattern of the eﬀectiveness, thatis, the number of defects found per hour by the students who used our approach(green block) was higher than the students who used the owasp high-levelsrs and the pbr black hat approach (blue and red blocks, respectively).in the original study, both experimental groups, in median, identiﬁed moredefects per hour than the control groups. for instance, in the ﬁrst trial con-ducted by the undergraduate students, our approach eﬃciency was 15 defectsfound per hour (we seeded 14 defects, but participants took less than onehour to complete their tasks). in contrast, the median of the undergraduatestudents who used only the owasp high-level srs was four. in the secondtrial conducted by the graduate students, the performance of our approachimproved. the mean of our approach eﬃciency increased to 21 defects foundper hour versus four defects found per hour by the graduate students who didnot use it. this improvement is proportional to the eﬀectiveness performanceshown in figure 8. thus, we can explain these diﬀerence across the ﬁrst twotrials.in the third trial (new study) conducted by undergraduate students, theexperimental group identiﬁed, in median, 22 defects per hour, whereas thecontrol group identiﬁed, in median, ten defects. this means that the inspec-tors who used our approach identiﬁed defects faster than inspectors who usedthe owasp high-level srs and the pbr black hat approach. in this trial, we


36hugo villamizar et al.


can see that undergraduate students who used our approach performed at thesame level than graduate students (second trial) who used our approach. un-der the same conditions, this would not be a typical performance consideringthe experience of the inspectors of each group. we believe that the trainingprovided in the third trial on how our approach works and how the defectreporting form must be ﬁlled out may be a cause of this improvement.regarding statistical hypothesis testing for eﬃciency, we found that themann-whitney test suggests rejecting our second null hypotheses (h02a andh02b) with p-values of 0.02, 0.01 and 0.02 for the ﬁrst, second and third trial,respectively. this means there is a signiﬁcant diﬀerence in terms of eﬃciencywhen using our approach against the inspection conducted with the owasphigh-level srs and the pbr black hat approach. in the same direction, wefound that the relevance of this diﬀerence (cohen’s eﬀect size [55]) was largefor all the experiments (1.56, 3.29 and 2.32 for the ﬁrst, second and third trials,respectively). with this information, we can fully answer rq1. our approachhas a positive impact on security defect detection eﬀectiveness and eﬃciencywhen compared to directly using the owasp high-level srs and to using thepbr black hat approach.


6.3 results on false positives


to understand to which extend our approach leads inspectors to report defectsthat are not truly defects (false positives), we analyzed the output of eachinspector of the trials to manually and in pairs classify whether the reporteddefect concerns a true defect or a false positive. false positives may aﬀectboth eﬃciency and eﬀectiveness, thus these results provide additional insightsto answer rq1. note that this analysis was conducted in pairs of researchers.we present figure 10 to provide an overview of the false positives by trial andgroups involved in the experiments.


fig. 10 average of false positives by trial and technique


title suppressed due to excessive length37


according to table 10, we see that all the trials followed the same pattern.inspectors who used our approach introduced less false positives than inspec-tors who conducted the inspection by using the owasp high-level srs andthe pbr black hat approach. for instance, in the second trial our approachled the inspectors to introduce, in average, 4.5 false positives while the inspec-tors who used only the owasp high-level srs introduced in average 6.0. inthe third trial, where we evaluated our approach against the pbr black hatapproach, we see that our approach led the inspectors to introduce, in average,1.7 false positives against 5.4 introduced by the inspectors who used the pbrblack hat approach. when investigating the possible causes of these ﬁndings,we believe that the context factors involved in each experiment, and whichwere presented in table 16, inﬂuenced to improve the results of the third trialwith respect to the ﬁrst and second one. for instance, we provided additionaltraining in the new study by teaching the inspectors to follow the task de-scription and our reading technique. overall, this can be seen as a beneﬁt ofour approach since this factor is closely tied to software quality assurance. inother words, if we link these results on false positives with the results on defectdetection eﬀectiveness and eﬃciency, when using our approach inspectors tendto ﬁnd more defects in less time, making less mistakes. therefore, these resultssupport again our ﬁndings on eﬀectiveness and eﬃciency presented before.


6.4 analysis across experimental trials


we present a synthesis of our ﬁndings from the ﬁrst, second and third trialconducted in this study as follows. we provide overall median scores for eﬀec-tiveness and eﬃciency performance in table 17. in order to provide a high-level overview of our ﬁndings, we rank the results by eﬃciency performance.we consider eﬃciency instead of eﬀectiveness given the importance of timespent on agile methods. we also present the subject level, undergraduate (u)or graduate (g), the treatments and the experimental trial number.


table 17 overall mean scores of performance sorted by eﬃciency


rankingeﬃciency(def/hour)eﬀectivenessleveltreatmenttrial


12258,4uour approach322168,9gour approach231554,2uour approach141038,3upbr black hat approach35423,6gowasp high-level srs26423,1uowasp high-level srs1


38hugo villamizar et al.


if we compare the performance across the trials we see that the best threeperformances were obtained by the inspectors who used our approach. in otherwords, experimental group always performed better than control group. tak-ing a look at the performance by educational level (undergraduate and grad-uate), we see that this factor had limited inﬂuence on the performance of theinspectors. in our experiments, performance was mainly deﬁned by the treat-ment given to inspectors, that is, if a support such as structured technique isprovided, the performance of the inspectors, regardless of his/her educationlevel, can improve. this is supported by analyzing the performance of the in-spectors who used the pbr black hat approach. these inspectors performedbetter than inspectors who did not received support in form of a structuredtechnique.


6.5 results on types of defects identiﬁed


we also wanted to determine to what extent our approach helps to identifyincomplete, inconsistent, incorrect and ambiguous security-related aspects. ta-ble 18 shows the distribution of the defects found per type by each partici-pant in all the trials. we highlighted the discarded subjects as mentioned insection 5.4. for a better understanding of the data shown in table 18, wesummarize in table 19 the average percentage of defects found by defect typeaccording to the techniques involved in the experiments.we observed that inspectors who used our approach on average identiﬁeding the other defect types, we observed that these inspectors found 45,2% ofambiguity defects, 60,5% of inconsistency defects, and 42,6% of defects re-lated to incorrect facts. in total, inspectors who used our approach in averageidentiﬁed 60% of the seeded defects. in comparison with the performance ofthe inspectors who used the pbr black hat, they did not perform at thesame level as inspectors who used our approach. for instance, inspectors whoused the pbr black hat approach found in average 32,2% of omission defects,29,5% of ambiguity defects, 54,8% of inconsistent defects and 31% of incorrectfacts defects. considering all defect types, in average, this group found 40% ofthe defects against 60% found by subjects using our approach. the landscapeis even poorer if we compare the performance of the inspectors who conductedthe inspection by using only the owasp high-level srs, which in averagefound only 23%.given these results, we are conﬁdent that our approach helps identifyingomission defects, that is, to detect security-related aspects that were not con-sidered or were not covered by the security speciﬁcations originally created byrequirements analysts. we also consider that our approach contributes identi-fying inconsistency defects since more than half of these defects were identiﬁed.comparing the other defect types, we see that our approach is slightly betterthan the pbr black hat approach and the inspection conducted with onlythe owasp high-level srs.


title suppressed due to excessive length39


table 18 detail of the inspectors’ performance in all trials


idtrialtreatmenttimeom%am%is%if%p


11our approach00:55410025012500721our approach01:00410012512500631our approach00:484100000000441owasp hlsr00:503751250000451owasp hlsr00:38375125310000761owasp hlsr00:442501250000371our approach00:40375125250006


81owasp hlsr00:40000000150191owasp hlsr00:3000125001502101our approach00:50410000001505111our approach00:2041000000004121owasp hlsr00:3500125125002131our approach00:363750000003141owasp hlsr00:310000250002


151owasp hlsr00:280000125001161our approach00:204100375250210011171owasp hlsr00:25125250250005181our approach00:262500000002191our approach00:17410012525007201owasp hlsr00:2500125250003211owasp hlsr00:250025031001506221our approach00:2041000000004231our approach00:204100125250007241our approach00:154100125250007251owasp hlsr00:1525000125003


262owasp hlsr00:330000125001272our approach00:354100250250210010282our approach00:214100375250009292our approach00:204100375250009302owasp hlsr00:500000250002312our approach00:3741001252501508322owasp hlsr01:00003752501506332owasp hlsr00:401251251251504343our approach00:102502502501507353our approach00:154100250375009363pbr black hat00:301251252501505373pbr black hat00:24001252501504383our approach00:163751253751508393our approach00:183751252501507403pbr black hat00:25125375375007413pbr black hat00:2600003751504423our approach00:28410025037515010433our approach00:26250250250006443pbr black hat00:302502502501507453pbr black hat00:28410000250006463our approach00:2541002502501509


473our approach00:301250000001483our approach00:302501253751507493our approach00:3037512525021008503our approach00:3125012537521008513pbr black hat00:36125002501504523pbr black hat00:3641002502501509533pbr black hat00:43002503751506543pbr black hat00:450000375003553pbr black hat00:40125250125004563our approach00:53410037537515011


om: omissionam: ambiguityis: inconsistencyif: incorrect fact


40hugo villamizar et al.


table 19 distribution of defects found per treatment


treatmentomissionambiguityinconsistencyincorrect facttotal


owasp high-level srs23,2%25,8%36,5%14,8%23%pbrblackhat+owasp32,8%29,5%54,8%31,8%40%


our approach92,4%45,2%60,5%42,6%60%


note that the results of the ambiguity defect are not very diﬀerent amongthe experiments, that is, neither the support of our technique nor the supportof the pbr black hat approach generates a relevant improvement comparedto an ad-hoc inspection (using only owasp high-level srs).


despite promising results in identifying defects of omission and inconsis-tency, we believe that the veriﬁcation questions that are part of our approachshould be reviewed to improve its eﬀectiveness. this is specially importantfor ambiguity and incorrect fact defects. it is also particularly interesting thatthe percentage to identify incorrect fact defects was low in all the inspec-tions. probably, this happened due to the additional domain knowledge thatis usually needed to detect such problems. this may indicate the diﬃculty ofidentifying this type of defects is higher than the others. in summary, we mustconsider improvements to increase the eﬀectiveness in detecting this kind ofdefects.


6.6 perception of the inspectors on the usefulness and ease of use


after inspectors conducted the inspection task by reviewing the security spec-iﬁcations provided in the experiments, we asked whether they found our ap-proach useful and easy to use. through the tam questionnaire [15], we wantedto know about their perceptions on using our approach and the pbr blackhat approach. figure 11 and figure 12 show the frequencies of the responsesof the inspectors that measures their perception on ease of use and usefulness,respectively. these ﬁgures present green tones that indicate agreement andred tones that indicate disagreement with our statements of ease of use andusefulness. note that dark tones indicate a strong agreement/disagreementand light tones indicate a partial agreement/disagreement.


we start by analyzing the responses of the inspectors that measures theirperception related to the ease of use of the reading-based approaches. figure 11shows the perception of the inspectors for the statement “i found the approacheasy to use”.


title suppressed due to excessive length41


fig. 11 perception of the inspectors to the statement “i found the approach easy to use”


first, we can see that the we have a higher concentration of red tones inthe ﬁrst trial. in this case,the perception of inspectors about the ease of use improved across thetrials. for instance, in the ﬁrst trial, 4 out of 13 (31%) strongly or partiallydisagreed with the statement “i found the approach easy to use”. only oneinspector strongly agreed with. in the second and third trial, the picture wasdiﬀerent. just one out of 15 (6%) inspectors who used our approach in thesetrials partially disagreed. the other 14 inspectors partially (8) and strongly(6) agreed. a large number of disagreements and partial agreements in theﬁrst trial indicated that improvements should be added to facilitate the useof the approach and then improve the detection of defects. in that direction,the inspectors proposed some points that could enhance the ease of use ofthe approach, such as providing a lighter document, modifying the designof the defect reporting form and showing an example of how to ﬁll it outcorrectly. this feedback was taken into account to perform the second andthird trials. in fact, as mentioned in section 6.1, the inspectors’ defect detectioneﬀectiveness improved, in our opinion, because we introduced some changes tothe defect reporting form such as merging the columns related to ambiguous,inconsistency and incorrect facts, and simplifying the number of steps in thetask description document.when comparing the perception of ease of use of the approaches involvedin the third trial (our approach against the pbr black hat approach), we seethat, in principle, inspectors found our approach easier to use. for instance,nine of the inspector who used the pbr black hat approach partially agreedand none of them strongly agreed with the sentence about ease of use. thisindicates they faced diﬃculties to follow the inspection under its guidance. incontrast, seven inspectors who used our approach partially agreed and threestrongly that the approach was easy to use.we were also interested in knowing the perception of the inspectors inrelation to the usefulness of the approach. we deﬁned usefulness as a metric


42hugo villamizar et al.


of productivity based on eﬃciency. more speciﬁcally, we asked whether usingthe approach would improve their performance when conducting the securityrequirements inspection (ﬁnd defects faster). table 12 gives an insight into theperception of the inspectors related to the usefulness of our approach.


fig. 12 perception of the inspectors to the statement “using the approach improved myperformance (ﬁnd defects faster)”


in this case, the perception of the inspectors regarding the usefulness of ourapproach in the trials was, in general, positive. for instance, all the inspectorswho used our approach (28) partially or strongly agreed with the sentence weprovided about usefulness. more speciﬁcally, 12 out of them (43%) stronglyagreed and 16 (57%) partially agreed. however, note that most of the partialagreements were reported in the ﬁrst trial (10 out of 16). this perceptionarises from the diﬃculties faced by the inspectors in that trial. for example,one inspector stated the following: “the review may be exhausting and time-consuming because the task description document is not lightweight”. anotherone stated: “it would be better to automate the proposal”. the inspectors alsomentioned some diﬃculties faced, such as “the veriﬁcation questions couldindicate better how to identify defects such as ambiguity or incorrect facts”.we believe these barriers may aﬀect the performance of the inspectors and,thus, the perception of usefulness.concerning the perception of the inspectors who used the pbr black hatapproach in the third trial, we observed that most of the inspectors found ituseful. in this case, just one inspector partially disagreed with the sentenceabout the usefulness we provided. 8 out of 11 (73%) partially agreed and 2out of 11 (18%) strongly agreed. this reinforces the idea that novice inspec-tors need support to review security-related aspects. therefore, approachesaddressing these concerns help to identify defects that would not be easilyidentiﬁed by ad-hoc inspections.nevertheless, if we compare the perception of usefulness between our ap-proach and the pbr black hat approach, we see that more inspectors strongly


title suppressed due to excessive length43


agreed with our approach. this reﬂects that inspectors felt more comfortableusing our approach. also, this perception is aligned with the performance ofinspectors across the trials, since inspectors who used our approach performedbetter than inspectors who did not use it.in summary, to the question of how do the inspectors perceive the useful-ness and ease of use of our approach, we have that inspectors who used ourapproach found it, in principle, easy to use and usefulness. indeed, the percep-tion of the inspectors was positive in comparison with other security inspectiontechniques. however, we have several challenges to improve these aspects, suchas automating our approach and improving the security veriﬁcation questions.


7 threats to validity


we report several threats to validity following the recommendations by wohlinet al [58] that we considered or mitigated during the design and execution ofthe original and new study.


7.1 internal validity


first, aiming to avoid personal bias, we used researcher triangulation to collectand analyze all data. the proﬁle of researchers varies in relation to experiencebut remains in relation to the application domain, in this case, software engi-neering. one master and one ph.d student in informatics with the supervisionof one senior researcher were involved in this research triangulation. we care-fully reviewed the extraction of defects and calculation of the percentages ofperformance of the inspectors.second, we characterized all the subjects with the aim of removing con-founding factors. the characterization allowed us to apply the blocking prin-ciple by distributing the participants so that these characteristics were equallydistributed among the experimental and control groups. table 12 highlightsthe subjects who were chosen because of the partition principle. random as-signment was employed for subjects with similar characteristics.we also consider that the performance of participants could be aﬀected ifinspectors try to guess the purpose of the experiment. in the original study,participants were not aware of the existence of experimental versus controlgroups or whether they belonged to diﬀerent groups. participants were toldonly that they were supposed to perform the task of detecting security-relateddefects based on a given requirements speciﬁcations. thus single blinding wasused to minimize biases. regarding the new study, participants were aware ofthe group treatment because we introduce them both the inspection techniquesinvolved in the experiment. we examined the responses by the groups to seeif they resembled closely with treatment responses. however, we did not ﬁndany evidence of treatment diﬀusion across the groups.finally, regarding training, we provided the same examples of user stories,defects, security speciﬁcations and controls to the experimental and control


44hugo villamizar et al.


group of all the trials, so any potential bias is similar for all the subjects. insummary, participants received the same training.


7.2 construct validity


in our evaluation, we analyzed the suitability of our approach in terms ofthe number of defects detected, defect types and number of false positives.to this end, quantitative analysis was performed. we used metrics such aseﬀectiveness and eﬃciency that are commonly used in inspection studies thatare empirically evaluated. we also analyzed the perceptions on usefulness andease of use of the inspectors when using our approach and the pbr black hatapproach. to this evaluation, qualitative analysis was considered. we used thetam questionnaire [15], which has also been widely used and evaluated [54]to measure the acceptances of techniques, applications and technologies.


7.3 conclusion validity


reliability of measures is an important consideration to draw valid conclusionsabout the results. we used the mann-whitney test with the aim of determin-ing whether we reject or not our null hypotheses. the decision of using thismethod was supported according to the distribution of our independent sam-ples, in this case, the treatments of the experiments. besides statistical signiﬁ-cance, we used the cohen’s h metric that is a measure of distance between twoproportions or probabilities. with this, we determine whether the diﬀerenceof our results can be considered as small, medium, or large. in our study, wefound the relevance scores of the experimental group was signiﬁcantly betterthan the control group.regarding number of participants, we had 56 participants divided intogroups that characterize diﬀerent samples. factors such as type of study (orig-inal and new), position of the students (undergraduate and graduate) and typeof treatment (experimental and control) were considered among the experi-ments.


7.4 external validity


to mitigate this kind of validity threat, the sample population should be rep-resentative of the population we want to evaluate. regarding the subject rep-resentativeness, we used students to represent novice inspectors. using stu-dents as subjects remains a valid simpliﬁcation of real-life settings needed inlaboratory contexts [22]. in the studies, participants are representative of stu-dents in computer science enrolled in two diﬀerent graduate and undergraduatecourses. for all of them, we provided concepts related to security principlesand inspection techniques. regarding the objects, we created the agile speci-ﬁcations following the quality guidelines proposed by lucassen [35]. we also


title suppressed due to excessive length45


peer-reviewed the requirements speciﬁcations and the seeded defects in termsof their representativeness. through the new study, we have demonstrated theapplicability of the requirements speciﬁcations created in identifying security-related defects. as we planned to conduct a limited amount of trials with alimited amount of subjects, the experiment package is available for externalreplications.


8 discussion


this work brought up several further questions that have strong implicationson future research. therefore, in the following, we discuss several of theseaspects in more depth.


8.1 suitability of the owasp high-level srs


we are aware that not all owasp high-level srs might be useful in all situ-ations. however, we are conﬁdent that as a starting point it is useful to havea basis that allows novice inspectors, at least, to consider the basic needs todeal with security.


8.2 generalization of our approach


we know that not only security is challenging in agile projects. indeed, it seemsthat other nfrs such as maintainability and performance are often ignoredor ill-deﬁned in this context. moreover, plan-driven software projects may facesimilar problems. this provides an opportunity to extend our approach, e.g.,considering other types of inputs such as open textual requirements and cov-ering other quality characteristics such as portability and usability. currently,knowledge on the available veriﬁcation techniques to assure these quality char-acteristics are met is scattered and limited. furthermore, those techniquesare commonly not properly integrated into the agile development philosophy.thus, we consider this, a ﬁrst step in this direction was conducted by investi-gating security, a speciﬁc product quality characteristic.


8.3 implications of our research for practitioners


unfortunately, security problems tend to be postponed to later stages[47].for practitioners, our approach provides a way to detect defects related to se-curity aspects that should be speciﬁed. according to the results of the originaland new study, we are conﬁdent to say that in principle our approach sup-ports novice inspectors by providing guidance in applying a reading techniquethat will help them to identify defects in agile requirements speciﬁcations ofweb applications. in addition, we designed the approach in such a way that it


46hugo villamizar et al.


works without expensive review cycles, aligned with the agile philosophy. wesee three main potential beneﬁts of this approach. first, narrowing the secu-rity knowledge gap that exists between experts and novice inspectors. second,the reading technique provides a strong focus on security aspects. in this way,the team can avoid discussing obvious issues and focus on important, diﬃcult,security-speciﬁc aspects of the review. third, we saw that our approach pro-vided positive results regarding the performance of individual inspectors whenconducting the security inspection.


8.4 implications of our research for researchers


this work contributes already to closing an important literature gap that existswith respect to security requirements veriﬁcation in the agile context. basedon the scarce literature on the topic, we believe that our approach constitutesan interesting starting point to discuss in depth veriﬁcation activities centeredon security in agile contexts. for us, the results strengthen our conﬁdence infurther extending our approach to scale its usability up to practical settingscovering a full, tool-supported process integration, which was not (and couldnot be) in scope of a development in our research-centric environment.


8.5 limitations


we concentrated on a set of speciﬁc security properties and high-level srsfrom the owasp (matching security sub-characteristics also described in thesquare quality model). there are several security standards that are diﬀerentfrom the ones provided by owasp. thus, we could complement the securityvision of our approach with other standards.moreover, given the complexity of working with nlp in re, there is alimitation related to the completeness of the keyword repository needed tolink the user stories with the security properties. to deal with this, we decidedto consider synonyms regarding the initial set of keywords.we only evaluated our approach with a use case scenario (two user storieswith their security speciﬁcations) as a starting point for detecting defectsrelated to security. however, additional use cases can also be provided asinput to the participants and may give us insights on the suitability of ourapproach in diﬀerent contexts. we are currently designing an industrial casestudy to evaluate the coverage of detecting security defects by our approach fora real software system. the results will provide evidence on how the approachgeneralizes when applied with the help of security analysts without the timeand other experimental constraints.we are also aware that the security speciﬁcations involved in the exper-iments constitute a limitation of the study. in a perfect scenario, we wouldhave security concerns speciﬁed by companies or independent practitioners,but often this information is restricted. therefore, we invested our best eﬀorts


title suppressed due to excessive length47


to carefully create and verify the speciﬁcations on their representativeness.nevertheless, external replications, including a wider range of user stories andsecurity speciﬁcations, are needed to improve external validity of our results.


9 concluding remarks


this work addresses a gap in the literature concerning the absence of veriﬁ-cation techniques for security in agile requirements engineering and its lack ofempirical evidence. it is well-known that the poor deﬁnition of nfrs, mini-mum documentation and lack of requirements veriﬁcation are among the mostimportant concerns of software requirements engineering researchers [13], [41].therefore, we presented an approach for reviewing security-related aspectsin agile requirements speciﬁcations of web applications, which we empiricallyevaluated via three controlled experiment trials. in the following, we sum-marize our conclusions and we discuss potential practical implications of ourresearch.the three trials concerned evaluating the eﬀectiveness, eﬃciency, useful-ness and ease of use of our approach when compared to an ad-hoc inspectionsupported with the owasp high-level srs and another one supported withthe pbr black hat approach. in the combined analysis of all the controlledexperiments, participants in the experimental group performed signiﬁcantlybetter than participants in the control group in terms of eﬀectiveness and eﬃ-ciency, i.e., participants who used our approach identiﬁed more defects in lesstime than participants who did not use it. we also identiﬁed that participantswho used our approach found it, in principle, useful and easy to use.future work includes evaluating the performance of using our approach inindustrial settings. we want to reach out to better understand the performanceof using our approach in real settings, as well as further information to help usbetter addressing practitioners needs. therefore, we might have to provide toolsupport for the application of our approach, in such a way that, for instance,applying the reading technique could be guided by the fesras framework.

