,question,contexts,ground_truth,evolution_type,metadata,episode_done
0,How is the product backlog updated in the change management approach?,"['  \n\n\n        \n\n\n  \n\n\n     \n\n\n \n\n\n       \n\n\n \n\n\n        \n\n\n          \n\n\n   \n\n\n          \n\n\nwe have a change management approach that applies after formally \n\n\naccepting a requirements specification.\n\n\nwe do not consider a change management in re.\n\n\nwe have a change management that applies during re.\n\n\n0.38\n\n\n0.33\n\n\n0.17\n\n\n0.16\n\n\n     we have a continuous change management.\n\n\n0.000.050.100.150.200.250.300.350.400.450.50\n\n\nfig. 7. how do you perform change management in your requirements engineering? (n = 215)\n\n\ntable 14. propositions about requirements changes and explanations after the survey (q 12, q 13, q 14, q 21)\n\n\nno.propositionschanged\n\n\np 14a requirements change management is established after formally accepting a requirements speci-fication.p 14aorganisations use continuous change management.✓p 15product backlogs are updated because of requirements changes after the initial release.p 16requirements changes after the initial release are reflected only in change requests.p 17traces between requirements and code are explicitly managed.p 18traces between requirements and design documents are explicitly managed.p 19for analyzing the effect of changes to requirements, impact analysis on the code is done.p 20for analyzing the effect of changes to requirements, impact analysis between requirements is notdone.\n\n\nno.explanationspropositions\n\n\ne 6in many development processes, requirements are fixed at some point(s) in time. a formal changemanagement is only needed afterwards.p 14\n\n\ne 7in agile development process, change is continuous.p 14ae 8requirements change during a development project and also after the initial release. many organ-isations only work with change requests in issue trackers. agile organisations work with somekind of product backlog (as in scrum) and change it regularly between iterations.\n\n\np 15, p 16\n\n\ne 9explicit traces make impact analysis more effective and efficient.p 17, p 18e 10despite traces between requirements and code, the effect of changes is most directly seen on thecode level.p 19, p 20\n\n\nin fact, the confidence interval of the latter does not overlap with the two most popular answers.answers for other (p = 0.10 [0.06, 0.14]) include “all methods, depends on the project” and “wemix product backlog and change requests.”hence, proposition p 15 on the product backlog update is supported by the data. proposition p 16on requirements change only done by change requests is similarly well supported. propositionsp 15 and p 16 can be explained by e 8.is not common that traces are not managed at all (p = 0.21 [0.16, 0,27]). for the other answer, severalrespondents mentioned traces between tests and requirements: “traces between requirementsand functional/system tests are most common for us.” propositions p 17 and p 18 state that traces\n\n\n\n\n\n:26s. wagner et al.\n\n\n \n\n\n      \n\n\n      \n\n\n    \n\n\n \n\n\nother\n\n\nwe regularly change the requirements specification.\n\n\nwe only work with change requests.\n\n\n    we update our product backlog.0.38\n\n\n0.33\n\n\n0.19\n\n\n0.10\n\n\n0.000.050.100.150.200.250.300.350.400.450.50\n\n\nfig. 8. how do you deal with changing requirements after the initial release? (n = 216)\n\n\nbetween requirements and code and between requirements and design documents are explicitlymanaged. the data supports these propositions. their confidence intervals are similar but do notoverlap with the interval of the answer “none.” explanation e 9 relates to these proposition incontext with the next question on impact analysis. as many respondents do impact analysis, explicittraces may make this activity more effective and efficient.\n\n\n \n\n\n      \n\n\n         \n\n\n     \n\n\ntraces between requirements and code\n\n\ntraces between requirements and design documents\n\n\nnone\n\n\n0.45\n\n\n0.43\n\n\n0.21\n\n\n0.000.100.200.300.40\n\n\n0\n\n\n0.600.50\n\n\nfig. 9']",The product backlog is updated in the change management approach.,simple,"[{'source': 'data\\processed_texts_txt\\Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf.txt', 'filename': 'data\\processed_texts_txt\\Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf.txt'}]",True
1,What are some examples of standard digital libraries used in literature studies in software engineering?,"[' inclusion (i) and exclusion (e) criteria for literature studies.\n\n\nno.criterion\n\n\n1ititle, keyword list, and abstract make explicit that the paper is related to [topic].2ithe paper presents [topic]-related contributions, e.g., [topic list].\n\n\n3ethe paper is not in english [or any other language of interest].4ethe paper is not in the domain [domain name(s)].5ethe paper is a tutorial-, workshop-, or poster summary only.6ethe paper relates to [topic] in its related work only.7ethe paper occurs multiple times in the result set.8ethe paper’s full text is not available for download.\n\n\nsimilar as with standard research questions (table 1), we experienced someinclusion and exclusion criteria to be useful in a broad spectrum of studies. thesestandard criteria listed in table 2 allow researchers to obtain an appropriate resultset and to deﬁne their requirements on the objective-dependent relevance of publi-cations retrieved. for instance, experience shows workshop- or tutorial summariescan contain a lot of relevant keywords, but might not necessarily advance the ac-tual body of knowledge. also, since contributions might occur multiple times ormight be out of scope, those have to be eliminated as soon as possible (criterion 7).another important criterion is the eighth, i.e., if the full text is not available, therespective publication is usually of little value (regarding possibilities to analyzethem and eventually draw proper conclusions). in context of a mapping study, thisissue can be compensated to a certain extent as those studies focus on an early,abstract-based analysis. however, when it comes to in-depth analyses, e.g., in asystematic review, the full text needs to be available.finally, kitchenham et al. [22] recommend aligning search strings with theresearch questions. we add to this the suggestion to also align the in-/exclusioncriteria with the research questions. this might result in a number of “duplicated”criteria, i.e., a paper could be relevant to topic a or to topic b if the literature studyaims at synthesizing knowledge thus requiring multiple topics to be addressed andanalyzed together. this furthermore allows for later replication why a speciﬁcpaper was in- or excluded to/from the study.\n\n\n3 as it is also criticized by staples and niazi [51]. in [28], however, we accepted this challenge.it took us about a year just to clean the data and perform the selection procedures. we donot recommend this for replication.\n\n\non the pragmatic design of literature studies in software engineering9\n\n\n2.2 data collection and dataset cleaning\n\n\nonce the study is designed, data can be collected. in that stage, the resultingdata needs to be analyzed, cleaned/harmonized, and prepared for the upcominginvestigations.\n\n\n2.2.1 data collection\n\n\nthe data collection is usually conducted as an automated search using diﬀerentsources. automated data search, however, needs careful preparation and poten-tially extra test runs, as every data source has a slightly diﬀerent format of thequery strings, or constraints regarding the queries’ length and complexity (see alsothe discussion in [1,2,4,22]). in practice, we experienced the design of multiple andoverlapping query strings beneﬁcial. although the search procedure must be exe-cuted several times and produces some overhead, simple queries are usually betteraccepted by the search engines (see sect. 3 for a detailed discussion).\n\n\nappropriate data sources depending on the particular disciplines, several stan-dard databases or collections (so-called baskets4) are available. in the following,we give an exemplary discussion for software engineering. apart from speciﬁcconference- and workshop series (so-called restricted approach [22]), a literaturesearch should address the most common sources. that is, instead of searchingspeciﬁc proceedings of a conference, search queries should be designed to workwith entire digital libraries. for the more general ﬁeld of software engineering, thefollowing libraries can be considered as standard libraries (or subsets thereof ifopting for the restricted approach):\n\n\n– ieee digital library (xplore)– acm digital library– springerlink– sciencedirect (elsevier)– wiley interscience– iet (also accessible via ieee)\n\n\nhowever, these libraries have their “specialties”, notably, regarding the searchquery construction. another point to take care of when using such digital librariesis the continuous indexing, i.e., indexes will “evolve” over time, which makes it\n\n\nchecking the result set before conducting']","The following libraries can be considered as standard libraries (or subsets thereof if opting for the restricted approach):

- ieee digital library (xplore)
- acm digital library
- springerlink
- sciencedirect (elsevier)
- wiley interscience
- iet (also accessible via ieee)",simple,"[{'source': 'data\\processed_texts_txt\\On the Pragmatic Design of Literature Studies in Software Engineering An Experience-based Guideline.pdf.txt', 'filename': 'data\\processed_texts_txt\\On the Pragmatic Design of Literature Studies in Software Engineering An Experience-based Guideline.pdf.txt'}]",True
2,What is the purpose of identifying research statements about quality requirements in the study analyzing the perception of practitioners on statements in research about quality requirements?,"[' based on correla-tion between the given answers. their results reveal ambiguities in the way thatiso/iec 9126 is structured in terms of characteristics and sub-characteristics.for example, their results imply that four speciﬁc sub-characteristics actuallymeasure the same intrinsic concept, which is a mixed concept of maintainabilityand portability.one may argue that discussing requirements categorization is an academicgimmick. however, there is empirical evidence that the categorization inﬂuenceshow requirements are elicited, documented, and validated in practice [4, 5, 6, 7].in an earlier work [14], we found that the development process for requirementsof the two classes strongly diﬀers (e.g., in testing). we obtained these ﬁndingsbased on a survey with practitioners to which we will also refer in the workpresented here. we further found that many reasons are based on assumptionsrather than on evidence. as a matter of fact, up to now, there does not exista commonly accepted approach for the qr-speciﬁc elicitation, documentation,and analysis [5, 7]; qrs are usually described vaguely [5, 4], remain often notquantiﬁed [7], and as a result remain diﬃcult to analyze and test [4, 5, 7].furthermore, qrs are often retroﬁtted in the development process or pursuedin parallel with, but separately from, functional requirements [6] and, thus, areimplicitly managed with little or no consequence analysis [7]. this limited focuson qrs can result in the long run in high maintenance costs [7].all these studies indicate, so far, that qrs are not well integrated in practi-cal software development processes and furthermore that several problems areevident with qrs. in this paper, our goal is to analyze the discrepancy betweenperceptions of qrs in academia and practice.\n\n\n2.2. research about perception of research statements in software engineeringin our work presented here, we want to analyze the perception of practi-tioners on statements in research about quality requirements. we call thosestatements research statements. analyzing the appraisal of practitioners withrespect to some normative statements has been targeted by a number of otherauthors as well.devanbu et al. [20], for instance, report on a case study on the prior beliefs ofdevelopers at microsoft, and the relationship of these beliefs to actual empiricaldata on the projects in which these developers work.their results suggestthat programmers do indeed have very strong beliefs on certain topics, thattheir beliefs are primarily formed based on personal experience rather than onﬁndings in empirical research, and that beliefs can vary with each project, but donot necessarily correspond with actual evidence in that project. they concludethat more eﬀort should be taken to disseminate empirical ﬁndings and thatmore research is needed on the relation between belief and evidence in softwarepractice.rainer et al. [21] used content analysis to analyze a group discussion aboutsoftware process improvement (spi) between developers within one companyand compare the respondents opinion with four research papers on spi. the\n\n\n6\n\n\nmain ﬁnding from this analysis is that there is an apparent contradiction be-tween developers saying that they want evidence, and what developers willaccept as evidence. this main ﬁnding is related to issues such as hierarchies ofknowledge, the value of empirical evidence to practitioners, local expertise, anincremental approach to improvement that may develop familiarity with thoseimprovements, and diﬀerences between developers and managers with regardsto their interest in the process. a serious implication follows from the mainﬁnding: even if researchers could demonstrate a strong, reliable relationshipbetween software process improvement and organisational performance, therewould still be the problem of convincing practitioners that the evidence appliesto their particular situation.the work at hand is inspired by the work of devanbu et al. [20], as it isthe ﬁrst work to raise the question of the discrepancy between evidence andbelief in software engineering and its empirical investigation. our work followstheir line of reasoning but concentrates on research statements related to qrs.in addition, we perform an in-depth analysis of the inﬂuence of several contextfactors on the practitioners’ perceptions in order to uncover research statementsthat may be valid in certain contexts only. to the best of our knowledge, thepaper at hands is the ﬁrst attempt to empirically investigate research statementsabout qrs and their perception in practice.\n\n\n3. study design\n\n\nour overall goal is to analyze the extent to which practitioners agree withstatements on quality requirements emerging from academic research. by in-vestigating potential mismatches between academic statements, perceptions', ' ofpractitioners, and the speciﬁc context of practitioners, we hope to be able toidentify research gaps for speciﬁc contexts, potential misconceptions that raisethe need for further investigations, or statements that are only true in certaincontexts. our study consisted of the following steps:\n\n\n1. identify research statements.we identiﬁed and extracted a set of research statements about qualityrequirements by browsing the literature from relevant journals and con-ferences.\n\n\n2. collect feedback via a survey.we integrated all found research statements into an online survey whererespondents from industry should state their general agreement with thestatements. we sent out the survey to a broad spectrum of practitionersthat work with requirements in general.\n\n\n3. analyze the data.given the responses, we applied a statistical model on each research state-ment that relates the level of agreement to speciﬁc context factors (de-scribed in section 3.3). the model allows calculating probabilities of a\n\n\n7\n\n\nhigher agreement or disagreement given a respondent characterized bysome context factors.\n\n\ngiven these steps, our study approach is a form of qualitative survey [22].qualitative surveys particularly study diversity (not distribution) in a popula-tion in a cross-sectional manner. they do not aim at establishing frequencies,means, or other parameters but at determining the diversity of some topic of in-terest within a given population. this type of survey does not count the numberof people with the same characteristic (value of variable) but it establishes themeaningful variation (relevant dimensions and values) within that population.although this type of survey is coined as qualitative survey, it has to be notedthat we use a statistical (i.e., quantitative) model to analyze the answers of thesurvey (see section 3.4).\n\n\n3.1. identiﬁcation of research statements\n\n\nin the context of our study, a research statement is an assertion about qual-ity requirements that has been stated in a high-quality, scientiﬁc publication.research statements usually correspond to observations that single researchers(the authors of the papers) made in a speciﬁc context, even if it is not necessar-ily made explicit in the papers. hence, research statements do not necessarilyneed to be true or commonly accepted by the whole community, but we expectthat the research statements considered in our study to show a certain degree ofscientiﬁc rigor proven by the peer-review process and by a considerable numberof citations.our goal is to use a number of research statements as a vehicle to assessthe diﬀerences and commonalities between the perception of academics andpractitioners on the topic of quality requirements. to this end, we identiﬁedresearch statements on qrs by analyzing existing empirical studies concerningnon-functional requirements or quality requirements. this process was not in-tended to be systematic in the sense of conducting a secondary study such asa systematic literature review, because we did not aim for a complete coverageof all research statements. instead, we analyzed the relevant literature knownto us to extract an exemplary set of research statements covering diﬀerent retopic areas. the selection of the research statements was, in that sense, op-portunistic. most statements were identiﬁed in the introduction and conclusionsections of the considered papers. we further validated and discussed the re-search statements in the team of authors to strengthen our conﬁdence that thestatements are reﬂected correctly. in total, we extracted 21 research statementsabout quality requirements. please further note that although the extractedstatements are based on publications, they are not necessarily taken verbatimand they do not necessarily reﬂect the authors’ opinions. finally, at a laterphase of the study, we compared the identiﬁed research statements also againstrecent publications that we found in major venues on requirements engineeringand software engineering (in particular, the conferences re, refsq, esem,and icse) in the time between 2010 and 2016. more speciﬁcally, we analyzed\n\n\n8\n\n\nall publications categorized as concerning quality requirements in another litera-ture study [23] and looked for statements that either support or oppose researchstatements from our initial list of research statements. table 1 summarizes theresearch statements we consider for this study and adds further publicationssupporting or opposing the statements. for a better overview, we clustered theresearch statements according to the diﬀerent re activities.\n\n\n3.2. subject selection\n\n\nwith our study, we targeted at practitioners who work with requirements.this includes practitioners who write requirements (e.g., requirements engi-neers), practitioners whose work is based on requirements (e.g., developers ortesters), and practitioners who']",The purpose of identifying research statements about quality requirements in the study is to assess the differences and commonalities between the perception of academics and practitioners on the topic of quality requirements.,simple,"[{'source': 'data\\processed_texts_txt\\Views on Quality Requirements in Academia and Practice Commonalities, Differences, and Context-Dependent Grey Areas.pdf.txt', 'filename': 'data\\processed_texts_txt\\Views on Quality Requirements in Academia and Practice Commonalities, Differences, and Context-Dependent Grey Areas.pdf.txt'}, {'source': 'data\\processed_texts_txt\\Views on Quality Requirements in Academia and Practice Commonalities, Differences, and Context-Dependent Grey Areas.pdf.txt', 'filename': 'data\\processed_texts_txt\\Views on Quality Requirements in Academia and Practice Commonalities, Differences, and Context-Dependent Grey Areas.pdf.txt'}]",True
3,What are some identified causes of requirements engineering problems?,"[' newversion of the survey instrument and partially replicated the first survey in 10 countries. we reporton this partial replication in this article and call it “second run” in the following. our goal here is touse the results of this replication to evaluate and further improve the re theory. in [43] importantproblems, causes, and effects have been reported. among others, poor requirements elicitationtechniques and missing completeness checks have been identified as important causes that lead torequirements engineering problems. in this article we focus on re standards and their application,requirements elicitation approaches, and re improvement options. specifically, we want to answerthe following research questions: (i) how are requirements elicited and documented? (ii) how arerequirements changed and aligned with tests? (iii) why and how are re standards applied andtailored? and (iv) how is re improved?\n\n\n1.3contributionin [42], we published the initial theory as well as the design of the used survey instrument anddiscussed preliminary results from the first run conducted in germany. we presented and analysedthe qualitative data regarding problems in practice from the second run of the survey withoutrelating it to the prior theory in [43]. in the present article, we evaluate and propose improvementsto the theory of re practice based mostly on the quantitative analysis of the answers on the statusquo from the second run. more in particular, we present the following contributions:\n\n\n(1) we substantially enhanced our initial theory after the analysis of the results gained fromthe first run in germany and using input from collaborating researchers received duringa thematic workshop held within the isern (international software engineering network)meeting in 2015. the resulting theory includes for each research question a set of propositionsconcerning requirements elicitation, documentation, change and alignment, standards andimprovement with a focus on the involved engineers. we use the propositions in our theoryto test our results during our analysis procedure.\n\n\n(2) we report the full results from 10 countries including the responses from 228 organisationsand a detailed analysis of those results via a calculation of confidence intervals with respectto our theory. this allows a statistically sound interpretation of the answers and a validationof the theory.\n\n\n(3) based on the quantitative results, additional qualitative answers by the respondents andfurther interpretation, we propose corresponding improvements of the underlying theory inthe form of changed or new propositions and explanations.our contribution is thus intended to serve both re practitioners interested in the status quo ofre practice and re researchers interested in theories that aim to describe real-world phenomena ofre practice.\n\n\n1.4outline\n\n\nwe structure the remainder of this article as follows: we start with a discussion of the related workin section 2 on theories and survey research in requirements engineering as well as the backgroundon the napire initiative and then present our current theory on the status quo in requirementsengineering practice in section 3. in section 4, we present the design of the survey which we useto validate the theory. we discuss the results of the survey in section 5 structured by the researchquestions. finally, we summarise and discuss implications and future work in section 6.\n\n\n\n\n\nstatus quo in requirements engineering:5\n\n\n2related workin this section we discuss theories on requirements engineering, survey research related to thescope of our contribution, and introduce the napire initiative as well as previously publishedmaterial in this context in more detail.2\n\n\n2.1theories on requirements engineering\n\n\nsjøberg et al. [56] proposed a number of activities to define software engineering theories, namely(1) defining the constructs of the theory, (2) defining the propositions of the theory, (3) providingexplanations to justify the theory, (4) determining the scope of the theory, as well as (5) testing thetheory through empirical research. in our work, we follow these proposed steps.the literature in the broader area of software engineering provides a broad spectrum on theories.in 2009, for instance, jacobson [25] motivated the need for a theory in software engineeringinitiating the semat initiative (software engineering method and theory) [24]. according tojacobson, software engineering is gravely hampered by (1) the prevalence of fads more typical offashion industry than of an engineering discipline; (2) the lack of a sound, widely accepted theoreticalbasis; (3) the huge number of methods and method variants with differences little understood andartificially magnified; (4) the lack of credible experimental evaluation and validation; and finally(5) the split between industry practice and academic research. napire aims to improve on allthese aspects in the area of requirements engineering. tarpit [26] is an example of a more generaltheory of software engineering derived from four underlying theoretical fields, i.e., (1) languagesand automata, (2) cognitive architecture, (3)']",Poor requirements elicitation techniques and missing completeness checks have been identified as important causes that lead to requirements engineering problems.,simple,"[{'source': 'data\\processed_texts_txt\\Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf.txt', 'filename': 'data\\processed_texts_txt\\Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf.txt'}]",True
4,What is the role of configuration management in the project- and portfolio management unit?,"[' site: http://www.icescrum.org/ \n\n\npr \n\n\nplc \n\n\npublish/ deploy \n\n\nagency \n\n\nproject- and portfolio  management unit \n\n\nquality management unit \n\n\nchange management \n\n\nrelease management \n\n\nconfiguration management \n\n\nquality management \n\n\nproject management \n\n\nexternal researchers \n\n\nspi project \n\n\nchanges \n\n\nactual process \n\n\nassignment \n\n\nsoftware process line (external reference model) \n\n\nv-modell xt bund v-modell xt ref. model \n\n\nrel. and conf. mngt. \n\n\nrel. and conf. mngt. \n\n\nupdate \n\n\nupdate \n\n\nv-modell xt bund \n\n\nv-modell xt ref. model \n\n\nimprove \n\n\nimprove \n\n\nvariant of \n\n\nvariant of \n\n\n1 \n\n\n2 \n\n\n2 \n\n\n1 2 \n\n\nimplemented with subversion \n\n\nimplemented with icescrum \n\n\narspi-iet page 8 \n\n\nexample. this example is extracted from an improvement project in eastern europe in which a new process was defined supporting project management and development processes (cf. table 3, study 2). to ground the process in a proven platform, it was an intensively customised variant of the german v-modell xt. the spi project (figure 5) was conducted in 2012/2013, was executed in three iterations, and took about 12 months. \n\n\n \n\n\nfigure 5 example spi project structure. \n\n\nin the following, we exemplarily describe the project set up and the first two iterations. as arspi relies on an iterative/incremental approach, the first two iterations give an understanding of the tasks, which are then refined and repeated. \n\n\n• spi project set up: the set up serves the tailoring of the artefact model for a particular spi project. few experience-based questions (e.g., for the context, pre-knowledge, and training strategies) need to be an-swered to support the determination of the relevant artefacts and their representation. for instance, figure 5 shows the artefact type process design, which is a simplified artefact that integrates the conceptual- and technical process design artefacts addressing small spi projects. finally, the overall project approach is defined, e.g., by defining milestones, and by creating the project-related manuals such as for project- or quality management procedures. \n\n\n• iteration 1: as shown in figure 5, the first step consists of conducting the analysis leading to the artefact process requirements. after the first analyses, the process design and the process release (as demonstra-tor) are created. the figure shows the first iteration to be shortened, as it does not contain a deployment phase. in this project, the selected approach contained a prototyping work package in which the basic re-quirements should be analysed and prototypically implemented. that is, only a demonstrator should be de-livered as process release, which was then evaluated by the process owners. \n\n\n• iteration 2: in the second iteration, the process design is refined in response to the client’s evaluation and the change requests. in figure 5, we show the evolution of the process design. furthermore, the second it-eration should produce a full process release for initial deployment and validation purposes. in a 4-day workshop, we prepared the delivery and evaluation, and performed the initial training for early adopters. \n\n\nthis example shows how arspi is adopted to a particular spi project. in the beginning of the project, after de-termining the project context, the artefact model is adapted to the specific needs, e.g., artefacts are merged or simplified and optional support artefacts that are considered relevant are selected for creation (e.g., training concept, training plan, and training material). furthermore, based on the life cycle model, a concrete project approach is defined by, e.g., defining milestones, planning iterations, and defining the life cycle phases that are needed for the iterations. as the arspi model precisely defines the artefacts, their structure, and the dependen-cies, process engineers get a set of consistent and complete artefacts for planning and monitoring the spi pro-jects while preserving the necessary degree of flexibility in the way of working. \n\n\n3.3 validating arspi \n\n\nwe developed an evaluation strategy to validate arspi from different angles. a detailed description of the eval-uation strategy and the conducted case studies can be taken from [18]. the backbone of the evaluation strategy is a combination of different empirical instruments applied in academic (internal) as well as in industry-hosted (']",The role of configuration management in the project- and portfolio management unit is not mentioned in the context.,simple,"[{'source': 'data\\processed_texts_txt\\From Pragmatic to Systematic Software Process Improvement An Evaluated Approach.pdf.txt', 'filename': 'data\\processed_texts_txt\\From Pragmatic to Systematic Software Process Improvement An Evaluated Approach.pdf.txt'}]",True
5,What roles can Requirements Smell detection play in quality assurance and how can it be integrated into QA tasks?,"[' for one single smell but alsofor all smells together. This feature supports theidentiﬁcation of candidates for in-depth reviews.\n\n\n5. Requirements Smell detection in the pro-cess of quality assurance\n\n\nThe Requirements Smell detection approach de-scribed in previous sections serves the primary purposeof supporting quality assurance in RE. The detectionprocess itself is, however, not restricted to particu-lar quality assurance tasks, nor does it depend on aparticular (software) process model as we will showin Sect. 6. Hence, a smell detection, similar to thenotion of quality itself, always depends on the viewsin a socio-economic context. Thus, how to integratesmell detection into quality assurance needs to be an-swered according to the particularities of that context.In the following, we therefore brieﬂy outline the rolesmell detection can generally take in the process ofquality assurance. More concrete proposals on howto integrate it into speciﬁc contexts are given in ourcase studies in Sect. 6.\n\n\nWe postulate the applicability of the RequirementsSmell detection in the process of both constructiveand analytical quality assurance (see Fig. 5). Fromthe perspective of a constructive quality assurance,authors can use the smell detection to increase theirawareness of potential smells in their requirementsartifacts and to remove smells before releasing an ar-tifact for, e.g., an inspection. External reviewers inturn, can then use the smell detection to prepare an-alytical, potentially cost-intensive, quality assurancetasks, such as a Fagan inspection [20]. Such an in-spection involves several reviewers and would beneﬁtfrom making potential smells visible in advance. Iter-ative inspection approaches are also known as phasedinspections, as deﬁned by Knight and Myers [43].\n\n\nWe furthermore believe that one major advantageis that the scope of our smell detection is not toenforce resolving a potential smell but to increasethe awareness of the like and to make transparentlater reasoning why certain decisions have been taken.Please note that two diﬀerent roles (e.g. requirementsengineer and QA engineer) can take two diﬀerent view-points on the same smell, respectively its criticalityand whether it should be resolved or not. In addition,a ﬁnding could be unambiguous to the author, butunclear to the target group of readers (represented bythe reviewers). Therefore, one contribution of our tool-supported smell detection is also to actively foster thecommunication between reviewers and authors and toenable continuous feedback between both roles. Forthis reason, we enable stakeholders in Smella to com-\n\n\n15\n\n\nAutomatic \n\n\nSmell Detection\n\n\nConstructive QAAnalytical QA\n\n\nDetectsmells\n\n\nAuthorReviewer\n\n\nFeedback\n\n\nView ﬁndings & Review ﬁndings\n\n\nView ﬁndings & Review ﬁndings\n\n\nCreate / update\n\n\nVisualizesmells\n\n\nFigure 5: A suggestion for applying Requirements Smell detection in QA\n\n\nment on detected smells and make explicit whetherthey need to be resolved or whether and why theyhave been accepted or rejected.\n\n\n6. Evaluation\n\n\nFor a better, empirical understanding of smells inrequirements artifacts, we conducted an exploratorymulti-case study with both industrial and academiccases. We particularly rely on case study researchover other techniques, such as controlled experiments,because we want to evaluate our approach in practicalsettings under realistic conditions. For the designand reporting of the case study, we largely follow theguidelines of Runeson and Höst [63].\n\n\n6.1. Case study design\n\n\nOur overall research objective is as follows:\n\n\nResearch Objective: Analyze whether automaticanalysis of Requirements Smells helps in requirements\n\n\nartifact quality assurance.\n\n\nTo reach this aim, we formulate four research ques-tions (RQ). In the following, we introduce those re-search questions, the procedures for the case andsubjects selection, the data collection and analysis,and the validity procedures.\n\n\n6.1.1. Research questionsRQ 1: How many smells are present in require-ments artifacts? To see if the automatic detectionof smells in requirements artifacts could help in QA,we ﬁrst need to verify that Requirements Smells existin the real world. The answer to this question fostersthe understanding how widespread the smells underanalysis are in industrial and academic requirementsartifacts.RQ 2: How many of these smells are relevant?Not only the number of detected smells is important.If many of the detected smells are false positives andnot relevant for the requirements engineers and devel-opers, it would hinder QA more than it would help.\n\n\n16\n\n\nAs relevancy is a rather broad concept, we break downRQ']","The Requirements Smell detection approach can play multiple roles in quality assurance. From a constructive quality assurance perspective, authors can use smell detection to increase their awareness of potential smells in their requirements artifacts and remove them before releasing the artifact for inspection. External reviewers can also use smell detection to prepare for analytical quality assurance tasks, such as inspections. The scope of smell detection is not to enforce resolving a potential smell, but to increase awareness and facilitate communication between reviewers and authors. Smell detection can be integrated into QA tasks by enabling stakeholders to comment on detected smells and make explicit decisions on whether they need to be resolved or accepted/rejected.",reasoning,"[{'source': 'data\\processed_texts_txt\\Rapid quality assurance with Requirements Smells.pdf.txt', 'filename': 'data\\processed_texts_txt\\Rapid quality assurance with Requirements Smells.pdf.txt'}]",True
6,What is the perception of practitioners regarding the usefulness of requirements smell detection in QA?,"[' diﬀerentparts of a user storyWe considered especially the last explanation for re-jecting ﬁndings (ﬁnding in reason part of a user story)particularly interesting. We had noticed that the rea-son part was often written in a rather imprecise way.To be able to quantify this aspect, we automaticallysplit user stories according to the language patternsand quantiﬁed the distribution of words as well asﬁndings over the diﬀerent parts of user stories.Table 10 shows the results of this analysis. Thenumber of words is roughly distributed as follows: 11%of the words of a user story describe the role, 55% ofthe words describe the feature and 34% describe thereason. Of the 1,082 user stories, 290 had no reasonpart at all. Due to this uneven distribution, similar asin the previous analyses, we normalize the number ofﬁndings by the number of words in each part resultingin the number of ﬁndings per 1,000 words.Only 1% of the ﬁndings are located in the rolepart. In fact, when we inspected these ﬁndings, theywere false positives due to the grammatical problemsdescribed in the previous section. The absence ofﬁndings in this section is expected, as this part ofthe user story only names the role and does not oﬀermany chances for smells as described in Sect. 3.2. Forthe remainder, 46% of the ﬁndings are located in thefeature and 53% are located in the reason part. Inrelation to its size, the diﬀerence is striking: With 64ﬁndings per 1,000 words, the reason has nearly doublethe number of ﬁndings of the feature part and nearly70% more ﬁndings than the average requirement, asIn summary, the reason part of user stories is par-ticularly prone to smells, but the qualitative analysisin RQ 2.2 reveals that practitioners consider ﬁndingsin this section to be less relevant. This investigationcould support further application of RequirementsSmells in practice by helping to prioritize smells ac-cording to their location.\n\n\n6.2.5. RQ 3: Which requirements quality defects canbe detected with smells?For 44 of the 51 requirements artifacts the stu-dents provided technical reviews. We qualitativelyanalyzed the results of 10 randomly selected reviews\n\n\n30\n\n\n(around 20%). The inspected reviews were conductedby 5–7 reviewers (mean: 5.6), took 90 minutes andresulted in 18–69 defects (mean: 38.1). We iteratedthrough the 381 defects documented in the reviewsand evaluated whether the smell detection producedﬁndings indicating these defects. If no smell indicatedthe defect, we openly classiﬁed the defects. We didnot quantify these results, because the resulting num-bers would assume and suggest that the distributionof defects is representative for regular projects, whichwe are unsure about (i.e. because of a high number ofspelling and grammatical issues).The classiﬁcation of the defects and their compari-son with the detected smells resulted in the followinglist of of defects indicated by Requirements Smells:\n\n\nSentence not understandable. In some instances,when the defect suggested changing the sentenceto improve understandability, these sentenceswere highlighted especially by the vague pro-nouns and negative statements smells.\n\n\nImproper legal binding. Various requirements ar-tifacts had issues with improper legal binding.In one case, the reviewers recognized this anddemanded the use of the term must. The loop-holes smell pinpointed at this issue.\n\n\nUnspeciﬁed/unmeasurable NFRs. Varioussmells,especiallythesuperlatives smell,indicated at defects of underspeciﬁcation withinnon-functional requirements.\n\n\nThe remaining defects were not indicated by Re-quirements Smells.\n\n\nInterpretation. The quantitative distribution of de-fects is not necessarily representative for industryprojects and, thus, has not been not analyzed. The re-views clearly show that manual inspection discoveredthe same defects as in the previous research question:Understandability, legally binding terminology andunderspeciﬁed requirements. These are issues with re-gards to representation but also the content describedin the artifact. We argue that these issues are com-mon for requirements artifacts. Requirements Smellscan therefore indicate relevant defects from multiple,\n\n\nindependent sources (manual inspection, interviewswith practitioners, independent manual reviews) formultiple, independent cases.\n\n\nAnswer to RQ 3. Automatic smell detection can pointto issues in both representation (e.g. improper legalbinding) and content (unders', ""peciﬁed/unmeasurableNFRs). The analysis of the reported defects indicatesthat more defects could be automatically detected(see section further discussion on detectability of de-fects described next). Nevertheless, just as for staticcode analysis, we see that automatic analysis can notindicate all defects and thus must be accompanied byreviews [73]. The fourth research question aims atanalyzing this aspect in depth.\n\n\nFurther discussion on detectability of defects. Duringthe analysis, if no smells indicated the defect, weopenly classiﬁed the defects. While discussing theresulting list of defects and the degree to which theyare detectable within the group of authors, we cameup with a classiﬁcation which is broader as initiallyplanned while designing the study. This classiﬁcationconsiders whether a defect:\n\n\n• Already can be detected• Could be detected, but is not implemented yetin our detection\n\n\n• Cannot be detected at the moment, but should besoon\n\n\n• Cannot be detected at all and probably won’t besoonThis classiﬁcation is purely based on our knowledgeof existing related work and our subjective expecta-tions gained during the data analysis process. Theclassiﬁcation yielded in a map visualised in Fig. 11.The ﬁgure is structured in two dimensions: On thevertical axis, we group the defects into defects relatingto the content, and defects relating to representation.Furthermore, on the horizontal axis, we map the itemsaccording to the expected precision and completenesswe believe the detection could be (i.e. the classiﬁ-cation above). The further left an item, the moreprecise and complete we expect a smell detection tobe; the items on the right we assume to be close toimpossible to detect in a general case.\n\n\n31\n\n\nDetected&\n\n\nby&Requirements&Smells\n\n\nSentence not understandable\n\n\nUnspeciﬁed/unmeasurable NFRs\n\n\nImproper legal binding\n\n\nIncorrect information\n\n\nUnintuitive Use Case ﬂow or diagrams\n\n\nLanguage'seman*cs\n\n\nSemantic clones\n\n\nMissing mandatory items\n\n\nTerminology\n\n\nPresenta*on'and'Structure\n\n\nRepresenta5onContent\n\n\nSingularity in UC\n\n\nEncodingUnnatural itemizationsUnintuitive structure of table\n\n\nUnappealing imageUnreadable image\n\n\nUnderspeciﬁed termsUnnecessary terms in glossary\n\n\nNaming violating convention \n\n\nUndeﬁned domain-speciﬁc terms\n\n\nInconsistent usage of terms\n\n\nIncomplete information\n\n\nSpelling\n\n\nGrammar\n\n\nLanguage mixture\n\n\nWrong word (language)\n\n\nSemantically contradicting information\n\n\nDetectable\n\n\nby&Requirements&Smells\n\n\nRather&not&detectable\n\n\nby&Requirements&Smells\n\n\nWrong word (domain)\n\n\nStructural redundancy / Cloning\n\n\nStructurally inconsistent diagrams \n\n\nFigure 11: Findings in requirements reviews, classiﬁed by content/representation and detection\n\n\n32\n\n\nWith the defects that our current approach does notreveal, this research question shows that more defectscould be detected: These are namely defects withterminology, singularity in use cases and structuralissues focusing on the content such as the absenceof mandatory elements in the artifact [37], structuralredundancy [34] or structural inconsistency betweencontent. It remains unclear how far more enhancedlanguage analysis with more sophisticated NLP andontologies can enable to understand language. In anycase, when a defect remains subtle and vague in itsdeﬁnition, such as an unintuitive structuring or design,we only see potential for automation if a defect canbe deﬁned precisely. For problems relating to thedomain itself (e.g. incomplete information about thedomain or incorrect information with regards to thedomain), we consider it impossible to detect issuesunless formalizing the concepts of the domain.\n\n\n6.2.6. RQ 4: How could smells help in the QA pro-cess?\n\n\nAfter the interviews and analysis, we asked all in-volved practitioners whether or not they think re-quirements smell detection is a helpful support, andwhether and how they would integrate it in theircontext. We asked those questions openly and tran-scribed the answers for validation by the intervieweesand later coding. In the following, we report on theresults structured by topics. Where applicable, weprovide the verbatim answers in relation to their cases(A, B or C).\n\n\nOverall Evaluation. In general,all practitionersagreed on the usefulness of the smell detection even ifconsidering diﬀerent""]",All practitioners agreed on the usefulness of requirements smell detection in QA.,reasoning,"[{'source': 'data\\processed_texts_txt\\Rapid quality assurance with Requirements Smells.pdf.txt', 'filename': 'data\\processed_texts_txt\\Rapid quality assurance with Requirements Smells.pdf.txt'}, {'source': 'data\\processed_texts_txt\\Rapid quality assurance with Requirements Smells.pdf.txt', 'filename': 'data\\processed_texts_txt\\Rapid quality assurance with Requirements Smells.pdf.txt'}]",True
7,"What is the objective of the study ""Status Quo in Requirements Engineering: A Theory and a Global Family of Surveys"" in terms of RE theory?","['\nstatus quo in requirements engineering:a theory and a global family of surveys\n\n\nstefan wagner, university of stuttgart, germanydaniel méndez fernández, technical university of munich, germanymichael felderer, university of innsbruck, austria and blekinge institute of technology, swedenantonio vetrò, nexa center for internet & society, dauin, politecnico di torino, italymarcos kalinowski, pontifical catholic university of rio de janeiro, brazilroel wieringa, university of twente, the netherlandsdietmar pfahl, university of tartu, estoniatayana conte, universidade federal do amazonas, brazilmarie-therese christiansson, karlstad university, swedendesmond greer, queen’s university belfast, ukcasper lassenius, aalto university, finland and simulamet, norwaytomi männistö, university of helsinki, finlandmaleknaz nayebi, university of calgary, canadamarkku oivo, university of oulu, finlandbirgit penzenstadler, california state university, long beach, usarafael prikladnicki, pontifícia universidade católica do rio grande do sul, brazilguenther ruhe, university of calgary, canadaandré schekelmann, hochschule niederrhein, germanysagar sen, simula, norwayrodrigo spínola, salvador university - unifacs, brazilahmed tuzcu, zeb.rolfes.schierenbeck.associates gmbh, germanyjose luis de la vara, carlos iii university of madrid, spaindietmar winkler, technische universität wien, cdl-sqi, austria\n\n\nauthors’ addresses: stefan wagner, university of stuttgart, stuttgart, germany, stefan.wagner@iste.uni-stuttgart.de;daniel méndez fernández, technical university of munich, garching, germany, daniel.mendez@tum.de; michael felderer,university of innsbruck, innsbruck, austria, blekinge institute of technology, karlskrona, sweden, michael.felderer@uibk.ac.at; antonio vetrò, nexa center for internet & society, dauin, politecnico di torino, torino, italy, antonio.vetro@polito.it;marcos kalinowski, pontifical catholic university of rio de janeiro, rio de janeiro, brazil, kalinowski@inf.puc-rio.br; roelwieringa, university of twente, enschede, the netherlands, r.j.wieringa@utwente.nl; dietmar pfahl, university of tartu,tartu, estonia, dietmar.pfahl@ut.ee; tayana conte, universidade federal do amazonas, manaus, brazil, tayanaconte@gmail.com; marie-therese christiansson, karlstad university, karlstad, sweden, marie-therese.christiansson@kau.se; desmondgreer, queen’s university belfast, belfast, uk, des.greer@qub.ac.uk; casper lassenius, aalto university, espoo, finland,casper.lassenius@aa.fi, simulamet, oslo, norway, casper@simula.no; tomi männistö, university of helsinki, helsinki,finland, tomi.mannisto@helsinki.fi; maleknaz nayebi, university of calgary, calgary, canada, mnayebi@ucalgary.ca;markku oivo, university of oulu, oulu, finland, markku.oivo@oulu.fi; birgit penzenstadler, california state university,long beach, long beach, usa, birgit.penzenstadler@csulb.edu; rafael prikladnicki, pontifícia universidade cató', '\nstatus quo in requirements engineering:a theory and a global family of surveys\n\n\nstefan wagner, university of stuttgart, germanydaniel méndez fernández, technical university of munich, germanymichael felderer, university of innsbruck, austria and blekinge institute of technology, swedenantonio vetrò, nexa center for internet & society, dauin, politecnico di torino, italymarcos kalinowski, pontifical catholic university of rio de janeiro, brazilroel wieringa, university of twente, the netherlandsdietmar pfahl, university of tartu, estoniatayana conte, universidade federal do amazonas, brazilmarie-therese christiansson, karlstad university, swedendesmond greer, queen’s university belfast, ukcasper lassenius, aalto university, finland and simulamet, norwaytomi männistö, university of helsinki, finlandmaleknaz nayebi, university of calgary, canadamarkku oivo, university of oulu, finlandbirgit penzenstadler, california state university, long beach, usarafael prikladnicki, pontifícia universidade católica do rio grande do sul, brazilguenther ruhe, university of calgary, canadaandré schekelmann, hochschule niederrhein, germanysagar sen, simula, norwayrodrigo spínola, salvador university - unifacs, brazilahmed tuzcu, zeb.rolfes.schierenbeck.associates gmbh, germanyjose luis de la vara, carlos iii university of madrid, spaindietmar winkler, technische universität wien, cdl-sqi, austria\n\n\nauthors’ addresses: stefan wagner, university of stuttgart, stuttgart, germany, stefan.wagner@iste.uni-stuttgart.de;daniel méndez fernández, technical university of munich, garching, germany, daniel.mendez@tum.de; michael felderer,university of innsbruck, innsbruck, austria, blekinge institute of technology, karlskrona, sweden, michael.felderer@uibk.ac.at; antonio vetrò, nexa center for internet & society, dauin, politecnico di torino, torino, italy, antonio.vetro@polito.it;marcos kalinowski, pontifical catholic university of rio de janeiro, rio de janeiro, brazil, kalinowski@inf.puc-rio.br; roelwieringa, university of twente, enschede, the netherlands, r.j.wieringa@utwente.nl; dietmar pfahl, university of tartu,tartu, estonia, dietmar.pfahl@ut.ee; tayana conte, universidade federal do amazonas, manaus, brazil, tayanaconte@gmail.com; marie-therese christiansson, karlstad university, karlstad, sweden, marie-therese.christiansson@kau.se; desmondgreer, queen’s university belfast, belfast, uk, des.greer@qub.ac.uk; casper lassenius, aalto university, espoo, finland,casper.lassenius@aa.fi, simulamet, oslo, norway, casper@simula.no; tomi männistö, university of helsinki, helsinki,finland, tomi.mannisto@helsinki.fi; maleknaz nayebi, university of calgary, calgary, canada, mnayebi@ucalgary.ca;markku oivo, university of oulu, oulu, finland, markku.oivo@oulu.fi; birgit penzenstadler, california state university,long beach, long beach, usa, birgit.penzenstadler@csulb.edu; rafael prikladnicki, pontifícia universidade cató']","The objective of the study ""Status Quo in Requirements Engineering: A Theory and a Global Family of Surveys"" in terms of RE theory is not present in the context",multi_context,"[{'source': 'data\\processed_texts_txt\\Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf.txt', 'filename': 'data\\processed_texts_txt\\Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf.txt'}, {'source': 'data\\processed_texts_txt\\Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf.txt', 'filename': 'data\\processed_texts_txt\\Status Quo in Requirements Engineering A Theory and a Global Family of Surveys.pdf.txt'}]",True
8,"What digital libraries are commonly used in software engineering literature studies, and what criteria are typically applied?","[' inclusion (i) and exclusion (e) criteria for literature studies.\n\n\nno.criterion\n\n\n1ititle, keyword list, and abstract make explicit that the paper is related to [topic].2ithe paper presents [topic]-related contributions, e.g., [topic list].\n\n\n3ethe paper is not in english [or any other language of interest].4ethe paper is not in the domain [domain name(s)].5ethe paper is a tutorial-, workshop-, or poster summary only.6ethe paper relates to [topic] in its related work only.7ethe paper occurs multiple times in the result set.8ethe paper’s full text is not available for download.\n\n\nsimilar as with standard research questions (table 1), we experienced someinclusion and exclusion criteria to be useful in a broad spectrum of studies. thesestandard criteria listed in table 2 allow researchers to obtain an appropriate resultset and to deﬁne their requirements on the objective-dependent relevance of publi-cations retrieved. for instance, experience shows workshop- or tutorial summariescan contain a lot of relevant keywords, but might not necessarily advance the ac-tual body of knowledge. also, since contributions might occur multiple times ormight be out of scope, those have to be eliminated as soon as possible (criterion 7).another important criterion is the eighth, i.e., if the full text is not available, therespective publication is usually of little value (regarding possibilities to analyzethem and eventually draw proper conclusions). in context of a mapping study, thisissue can be compensated to a certain extent as those studies focus on an early,abstract-based analysis. however, when it comes to in-depth analyses, e.g., in asystematic review, the full text needs to be available.finally, kitchenham et al. [22] recommend aligning search strings with theresearch questions. we add to this the suggestion to also align the in-/exclusioncriteria with the research questions. this might result in a number of “duplicated”criteria, i.e., a paper could be relevant to topic a or to topic b if the literature studyaims at synthesizing knowledge thus requiring multiple topics to be addressed andanalyzed together. this furthermore allows for later replication why a speciﬁcpaper was in- or excluded to/from the study.\n\n\n3 as it is also criticized by staples and niazi [51]. in [28], however, we accepted this challenge.it took us about a year just to clean the data and perform the selection procedures. we donot recommend this for replication.\n\n\non the pragmatic design of literature studies in software engineering9\n\n\n2.2 data collection and dataset cleaning\n\n\nonce the study is designed, data can be collected. in that stage, the resultingdata needs to be analyzed, cleaned/harmonized, and prepared for the upcominginvestigations.\n\n\n2.2.1 data collection\n\n\nthe data collection is usually conducted as an automated search using diﬀerentsources. automated data search, however, needs careful preparation and poten-tially extra test runs, as every data source has a slightly diﬀerent format of thequery strings, or constraints regarding the queries’ length and complexity (see alsothe discussion in [1,2,4,22]). in practice, we experienced the design of multiple andoverlapping query strings beneﬁcial. although the search procedure must be exe-cuted several times and produces some overhead, simple queries are usually betteraccepted by the search engines (see sect. 3 for a detailed discussion).\n\n\nappropriate data sources depending on the particular disciplines, several stan-dard databases or collections (so-called baskets4) are available. in the following,we give an exemplary discussion for software engineering. apart from speciﬁcconference- and workshop series (so-called restricted approach [22]), a literaturesearch should address the most common sources. that is, instead of searchingspeciﬁc proceedings of a conference, search queries should be designed to workwith entire digital libraries. for the more general ﬁeld of software engineering, thefollowing libraries can be considered as standard libraries (or subsets thereof ifopting for the restricted approach):\n\n\n– ieee digital library (xplore)– acm digital library– springerlink– sciencedirect (elsevier)– wiley interscience– iet (also accessible via ieee)\n\n\nhowever, these libraries have their “specialties”, notably, regarding the searchquery construction. another point to take care of when using such digital librariesis the continuous indexing, i.e., indexes will “evolve” over time, which makes it\n\n\nchecking the result set before conducting', ' the data collection, we recommend tohave a set of reference publications available. one criterion we found useful forchecking the appropriateness of a search is if the result set contains the expectedreference publications (see also, e.g., [58]). if one expects a particular publicationin the result set, e.g., arising from a preliminary search, but it is not contained inthat set, the revision of the search might be recommendable. options to identify\n\n\n1&subarticlenbr=346\n\n\n10marco kuhrmann et al.\n\n\nprimary search and backup search primary searches should always be conductedusing aforementioned (or comparable) standard libraries. however, for several rea-sons, those libraries do not always contain all relevant publications. for example,contributions relevant to the ﬁeld might result from ph.d. theses that are notpublished in/not indexed by the standard libraries.therefore, we experienced it beneﬁcial to complement the primary search witha backup search utilizing meta-search engines to complete the result set. however,using a meta-search engine must be done carefully. besides the standard meta-search engines5, such as dblp or scopus, google scholar is often used to getresults quickly. however, the quality of search results obtained from such enginesalso depends on search preferences and even trends and, thus, searches might bemuch less repeatable than compared to standard libraries. also, the results mightalso provoke duplicates and introduce extra threats to the validity of a literaturestudy. a ph.d. thesis, for example, can be written in a cumulative manner whereparts of it exist separately as peer-reviewed publications already present in theresult set of the primary search. hence, it is important that the results obtained viameta-search engines are not included into the main result set without crosscheck.to this end, hits produced by such engines should be included in an own category,and such searches should be discussed as part of the threats to validity to increasethe transparency.\n\n\n(data) export practices data obtained from a data source must be stored in away in which it can be used for further analyses. this part can become timeconsuming since diﬀerent databases provide diﬀerent export formats, which lateron need to be joined and integrated. therefore, data should be exported in at leasttwo formats:\n\n\n– a literature management tool of choice, such as bibtex\n\n\n– as plain or (better) comma-separated (csv) text ﬁles\n\n\nthese formats have the advantage that they are easy to process and convert into\n\n\n2.2.2 dataset cleaning\n\n\ncleaning a result set is a demanding, time-consuming task. usually, we ﬁnd twotypes of papers to be removed from the result set (cf. table 2):\n\n\n1. contributions that are out of scope, and2. duplicates.\n\n\nduplicates are easy to ﬁnd and eliminate, yet it is hard to decide which of theduplicates should be eliminated. it often happens that one publication is listedin multiple literature databases (e.g., for cross-indexing reasons). in such cases,it needs to be decided which paper to consider for inclusion into the result set.a pragmatic approach is to include the results from the database that providesthe paper for download and to remove the other occurrences; this needs, however,\n\n\n5 note: apart from serving the backup search, meta-search engines can also be a usefulinstrument in studies that also include (continuous) updates, e.g., to monitor the developmentof a ﬁeld over time [23].\n\n\non the pragmatic design of literature studies in software engineering11\n\n\nfig. 3 example of a word cloud from [28] for visually inspecting the result set. “outliers” tobe used for excluding further papers from the result set are highlighted.\n\n\nto be deﬁned in the exclusion criteria for the sake of transparency. another casefor a duplicate is a conference paper, followed by a journal article, e.g., a specialissue paper. in such cases, it must be decided whether the original or the extendedpublication should be selected for inclusion. a criterion could be to always selectthe higher-valued publication, i.e., journal over conference, as journal articles areexpected to have a higher maturity [37] and level of detail.publications that are out of scope are, on the other hand, easy to remove, yetthey are often hard to identify if part of a large result set. since the result setmight have been created from an automatic search, even out-of-scope publicationsthat met at least one selection criterion could be present. those publications needto be found manually and removed in the cleaning procedures.\n\n\nscoping via word clouds to support the']","The following digital libraries are commonly used in software engineering literature studies: IEEE Digital Library (Xplore), ACM Digital Library, SpringerLink, ScienceDirect (Elsevier), Wiley InterScience, and IET (also accessible via IEEE). The criteria typically applied include relevance to the field, availability of full text, and elimination of duplicates and out-of-scope publications.",multi_context,"[{'source': 'data\\processed_texts_txt\\On the Pragmatic Design of Literature Studies in Software Engineering An Experience-based Guideline.pdf.txt', 'filename': 'data\\processed_texts_txt\\On the Pragmatic Design of Literature Studies in Software Engineering An Experience-based Guideline.pdf.txt'}, {'source': 'data\\processed_texts_txt\\On the Pragmatic Design of Literature Studies in Software Engineering An Experience-based Guideline.pdf.txt', 'filename': 'data\\processed_texts_txt\\On the Pragmatic Design of Literature Studies in Software Engineering An Experience-based Guideline.pdf.txt'}]",True
9,"What are the limitations and threats of case study research in the context of the arspi model and its application in software process improvement and management, and how do the findings support the need for further investigations?","['wide quality- and process management. a description of this setting can be depicted from [18] and section 3.2.1. \n\n\nx x x x \n\n\narspi-iet page 10 \n\n\nno. validation outcomes \n\n\n inst i/e ctx description \n\n\nprocess \n\n\ntemplates \n\n\ntool \n\n\ntraining \n\n\n6 int e i during the construction of the arspi model, we conducted interviews with external partners from industry and academ-ia, who are experienced in spi. the interviews aimed at investigating the completeness of the constructed model, and to figure out improvement potential. a description of the interview and its outcomes can be depicted from [18]. \n\n\nx    \n\n\nlegend:  inst – instrument: exp = experiment, cs = case study, int = interview; i/e – internal/external validation: i = internal, e = external; ctx – context: u = university/academic, i = industry \n\n\n3.3.2 summary of conclusions \n\n\nso far, we developed arspi in an inductive manner complemented with continuous validation and evaluation activities serving its improvement. from the initially conducted studies, we could extract the following findings: \n\n\n• process consumers, e.g., process owners or tool developers, benefit from an artefact-based spi approach as the artefact-based approach allows for, e.g., a precise definition of process entities for tool support or pro-cess enactment [21]. a major finding was that we can rate the success of an spi project by rating the out-come, i.e. we imply a notion of spi quality in relation to the quality of the outcome while abstracting from the way of producing the outcome – which is the fundamental principle of artefact orientation. \n\n\n• process engineers benefit from an artefact-based spi approach by being provided with a clearly structured model serving as reference to design/improve processes [18], [21]. for example, in study 2 (table 3), the evaluation of release 0.9 of the developed process indicated to gaps, which could be directly aligned to change requests; process owners mentioned missing artefacts and 5 missing artefacts could be identified. as figured out in [21], we can rate the quality of spi projects by rating the outcomes. \n\n\n• experts consider arspi useful, as, for instance, it helps to structure spi projects, and to reflect on spi activ-ities [18]. a major finding was the flexibility of the arspi model that allows for tailoring and applying arspi in different contexts, e.g., large and small, and short- and long-term spi projects/programs. \n\n\nhowever, the number and character of the conducted case studies limit our initial findings. for instance, so far, completed case studies mainly address stakeholders related to process management, and, thus, project managers and software developers were not in scope as primary study subjects. however, in a complementing study [20], we could find indication to benefits for these stakeholder groups as well. \n\n\n3.3.3 exemplary results \n\n\nin the studies 3 and 4 (table 3), we aimed at conducting a comparative in-depth analysis of arspi compared to previously used approaches. in the following, we provide insight into the industry-hosted study 4 in which we conducted a completely monitored case study. two industry partners were personally invited to participate in the case study and were asked to rate the arspi approach in relation to their experiences.  \n\n\nfigure 6 illustrates the final rating of the experts as an exemplarily evaluation of arspi (the ratings are based questionnaires and interviews, values are on an 8-point likert scale). expert 1 has experienced 6 medium- to large-sized spi projects, mainly in the context of public administration. expert 2 has conducted about 50 spi and spi-related projects in different industry contexts.  \n\n\nfigure 6 shows that especially expert 2 rates the approach significantly better than the previously experienced ones. he stated that although there were some limitations by the study’s setting, the arspi approach worked “better that everything else compared to what happens in practice right now.” the evaluation of expert 1 shows a different picture. expert 1 also rates structuredness, knowledge transfer, and explicit analysis and design pro-cedures “good” (5 to 6). however, based on his experiences, he gave a low rating for the other criteria resulting from “the way the process engineer applied the model in this case study.”  \n\n\narspi-iet page 11 \n\n\n \n\n\n \n\n\nfigure 6 comparative expert evaluation form study 4 (expert 1: left, expert 2: right). \n\n\nfrom these evaluations, we draw the conclusion that,', ' on the one hand, arspi is considered a useful instrument, which, on the other hand, needs to be extended by more guidance to further improve process engineer support. the observations made in this case study also comply with our arguments for a better education of process en-gineers [22], and also support the need for a comprehensive set of spi success factors, which are subject to current spi-related research. however, as these aspects were not in the focus of the conducted study, the respec-tive findings call for further investigations. \n\n\n4 conclusion \n\n\nin this paper, we presented a model for artefact-based software process improvement & management (called arspi), which emerged from several spi projects. due to the complexity of the spi projects and the context, we experienced the demand for a systematic approach that allows for structuring spi projects, creating reusable process assets, and for checking process requirements, designs, and realisations for consistency. therefore, we extracted best practices and spi artefacts to develop an approach to set up, organise, and perform spi projects. the approach allows for defining a structure for spi project outcomes and gives process engineers the freedom to select concrete methods to analyse, design, and implement processes in relation to the particular situation. our approach thereby provides a reference to organise and manage systematic spi projects/programs while the underlying artefact-based approach does not restrict the actual spi endeavour by normative, solution-driven ways of working that might be alien with the organisational culture. \n\n\nan evaluation strategy combining internal validation in academic and external evaluation in industry context served the determination of strengths and weaknesses. the results from our studies indicate that arspi serves as useful reference defining a structured guidance to systematically set up problem-driven spi projects.  \n\n\na major threat to the external validity and, thus, to the ability to generalise is that, besides inferring our ap-proach from experiences, we applied the approach in four industry projects, and conducted so far two case stud-ies. a threat inherent to case study research is that the boundaries between the project characteristics and the phenomena are unclear whereby it might remain unknown whether certain effects are directly caused by apply-ing arspi or by other unknown side-effects, e.g., a generally more structured way of working. our investiga-tions lay, however, a first and necessary basis to further investigate the effects of applying arspi under realistic conditions. with the instruments and the published material, we also lay the foundation for future replications. these are necessary to get in-depth insights into the benefits and limitations of applying arspi in practice and we postulate that those replications need to be conducted independently. this is also necessary to answer the question whether the success of arspi results from us applying the concepts. to manifest our results, we there-fore need further studies whereas we laid with our contributions at hands the necessary foundation.  \n\n\n0 1 2 3 4 5 6 7 \n\n\nstructuredness \n\n\n(systematic \n\n\napproach) \n\n\nproblemorientation (stakeholder goals) \n\n\ntransparent and \n\n\nreproducible \n\n\ndecisions \n\n\nanalysis and design \n\n\nlead to designed \n\n\nresults \n\n\nefficiency (compared \n\n\nto previous \n\n\nexperience) \n\n\nsufficient information \n\n\nflow/knowledge \n\n\ntransfer \n\n\narspi previous \n\n\n0 1 2 3 4 5 6 7 \n\n\nstructuredness \n\n\n(systematic \n\n\napproach) \n\n\nproblemorientation (stakeholder goals) \n\n\ntransparent and \n\n\nreproducible \n\n\ndecisions \n\n\nanalysis and design \n\n\nlead to designed \n\n\nresults \n\n\nefficiency (compared \n\n\nto previous \n\n\nexperience) \n\n\nsufficient information \n\n\nflow/knowledge \n\n\ntransfer \n\n\narspi previous \n\n\narspi-iet page 12 \n\n\n4.1 impact and implications \n\n\nthe arspi model provides a blueprint for setting up and organising spi projects. the model, its documentation, and templates are available online. arspi is focused on the artefacts needed by process engineers to analyse process requirements, to design and implement processes, and to ship processes and establish a continuous im-provement. since arspi is focused on artefacts, process engineers can directly apply the model to structure spi activities. \n\n\nresearchers and practitioners as well get with our contribution already insights into benefits and shortcomings in spi in general and in artefact-based spi in particular. as we created an experimental setting in which spi activities can be analysed, compared, and evaluated, we actively contributed to the dissemination into academia and practice and']","A major threat to the external validity and, thus, to the ability to generalize is that, besides inferring our approach from experiences, we applied the approach in four industry projects, and conducted so far two case studies. A threat inherent to case study research is that the boundaries between the project characteristics and the phenomena are unclear whereby it might remain unknown whether certain effects are directly caused by applying arspi or by other unknown side-effects, e.g., a generally more structured way of working. Our investigations lay, however, a first and necessary basis to further investigate the effects of applying arspi under realistic conditions. The findings support the need for further investigations to get in-depth insights into the benefits and limitations of applying arspi in practice and to answer the question whether the success of arspi results from us applying the concepts.",reasoning,"[{'source': 'data\\processed_texts_txt\\From Pragmatic to Systematic Software Process Improvement An Evaluated Approach.pdf.txt', 'filename': 'data\\processed_texts_txt\\From Pragmatic to Systematic Software Process Improvement An Evaluated Approach.pdf.txt'}, {'source': 'data\\processed_texts_txt\\From Pragmatic to Systematic Software Process Improvement An Evaluated Approach.pdf.txt', 'filename': 'data\\processed_texts_txt\\From Pragmatic to Systematic Software Process Improvement An Evaluated Approach.pdf.txt'}]",True
