
software & systems modeling (2019) 18:2777–2786https://doi.org/10.1007/s10270-019-00714-3


expert’s voice


artefacts in software engineering: a fundamental positioning


daniel méndez fernández1 · wolfgang böhm1 · andreas vogelsang2 · jakob mund3 · manfred broy1 ·marco kuhrmann4 · thorsten weyer5


received: 31 may 2018 / revised: 29 november 2018 / accepted: 29 november 2018 / published online: 22 january 2019© springer-verlag gmbh germany, part of springer nature 2019


abstractartefacts play a vital role in software and systems development processes. other terms like documents, deliverables, or workproducts are widely used in software development communities instead of the term artefact. in the following, we use theterm ‘artefact’ including all these other terms. despite its relevance, the exact denotation of the term ‘artefact’ is still notclear due to a variety of different understandings of the term and to a careless negligent usage. this often leads to approachesbeing grounded in a fuzzy, unclear understanding of the essential concepts involved. in fact, there does not exist a commonterminology. therefore, it is our goal that the term artefact be standardised so that researchers and practitioners have a commonunderstanding for discussions and contributions. in this position paper, we provide a positioning and critical reﬂection uponthe notion of artefacts in software engineering at different levels of perception and how these relate to each other. we furthercontribute a metamodel that provides a description of an artefact that is independent from any underlying process model.this metamodel deﬁnes artefacts at three levels. abstraction and reﬁnement relations between these levels allow correlatingartefacts to each other and deﬁning the notion of related, reﬁned, and equivalent artefacts. our contribution shall foster thelong overdue and too often underestimated terminological discussion on what artefacts are to provide a common groundwith clearer concepts and principles for future software engineering contributions, such as the design of artefact-orienteddevelopment processes and tools.


keywords software engineering artefacts · metamodelling · propaedeutics · syntax of artefacts · semantics of artefacts ·equivalence of artefacts


b daniel méndez fernándezdaniel.mendez@tum.de


wolfgang böhmboehmw@in.tum.de


andreas vogelsangandreas.vogelsang@tu-berlin.de


jakob mundjmund@tableau.com


manfred broybroy@in.tum.de


marco kuhrmannkuhrmann@acm.org


thorsten weyerthorsten.weyer@paluno.uni-due.de


1technical university of munich, boltzmannstr. 3,85748 garching, germany


2technical university of berlin, ernst-reuter-platz 7,10587 berlin, germany


1 introduction


software development projects, especially when being com-plex, embody a multitude of artefacts that are developed,used, maintained, evolved, and which depend on each other.the ﬁnal software product as such constitutes an artefactas well as the models of the software product, its speciﬁ-cations, safety and security certiﬁcates, project managementplans, user manuals, the code, and many more. in softwareprojects, these artefacts usually manifest themselves in theform of printed or electronic documents in the sense ofcoarse-grained structured collections of information serving


3tableau germany gmbh, maximilianstr. 35, 80539 munich,germany


4clausthal university of technology, wallstr. 6, 38640 goslar,germany


5university of duisburg-essen, gerlingstraße 16,45127 essen, germany


123


2778d. méndez fernández et al.


distinct purposes. even the binaries that make up a softwareproduct are just a complex conglomerate of ﬁles carefullyput together such that they can be executed by computersand, thus, are artefacts. there is another dimension to thisaspect: as artefacts can appear in different representations,for instance, as ﬁles on a computer, as elements of databases,or as printed documents, the question arises if all these are tobe seen as one artefact or if they constitute different artefacts,and if so, how we can describe their relationship. obviously,artefacts play a vital role in software and system develop-ment. nevertheless, what an artefact actually is and how it isstructured, is not obvious and not uniquely deﬁned.infact, softwaredevelopment process models makeexces-sive use of artefacts to describe the products and documenta-tionbeingcreatedduringtheprocess.justfollowingaprocessand neglecting a clear notion of artefacts and their dependen-cies in purely process-driven approaches lead to problemsand difﬁculties that have been recognised for years [3], andthe consequences can be observed in everyday industrialproject settings [13] including, for example, unclear rolesand responsibilities or inconsistent and even incompatiblespeciﬁcation documents provided by different teams.this brings us to a development paradigm known as ‘arte-fact orientation’. any artefact-oriented approach is rooted ina blueprint of the anticipated results and documents (andtheir structure, contents, and dependencies) instead of ablueprint of interconnected activities and method descrip-tions. the actual software development abstracts from theactual processes for creating those results. since softwaresystems as well as their descriptions and documentation canreach a considerable size and diversity, it is essential toadequately structure the set of artefacts produced in a devel-opment process via an artefact model [2,7]. those artefactmodels abstract from speciﬁc development processes whilecapturing the structure and content of the work products and,moreover, the established (modelling) concepts applied tothe respective application domain. artefact models providea basis for a process-agnostic ﬂexible backbone for projectoperation in which the team agrees on the content and thestructure of the artefacts to be created until a speciﬁc pointin time rather than a strict process and their synchronisa-tion [10]. at the same time, artefact models leave open theway of creating the results yet having a clear notion of respon-sibilities assigned to each artefact to be created. for softwareprocesses, artefact orientation has become an indispensabletool to support ﬂexibility in the project lifecycle, precisionin the results, and towards standardisation of terminologywithin and across projects.


problem statementso far, our community still struggleswith a common precise understanding and agreement aboutwhat a software engineering artefact exactly is and which ter-minology to use. without such an understanding, researchers


and practitioners will continue to discuss or even provideconceptual and formal contributions grounded in a fuzzy,unclear, or even contradictory understanding of the essentialconcepts involved.


contribution in this position paper, we suggest a foundationof the term artefact that is independent from the underlyingprocess and provide a conceptual model that captures theessence of artefacts, i.e. the artefact structure and its seman-tics, using a descriptive approach. by taking this descriptiveview, we characterise artefacts independently of the gener-ating development processes. we provide a basis for furtherapplications of the concept of an artefact such as a formalapproach to describe semantic relationships between arte-facts.we also address the problem of artefacts that containidentical semantic information, by introducing the notionof equivalence with respect to artefacts, which cannot onlyoccur through different representations but also by the useof different description techniques for the same content.this notion of equivalence helps understanding the relationsbetweensoftwareengineeringartefacts.fromtheserelations,we can derive, for instance, consistency rules and veriﬁcationobligations.


outline the remainder of the paper is structured as follows:in sect. 2, we present our characterisation of artefacts andexplain the idea using a simple example in sect. 3. section 4addresses the question of equivalence of artefacts. in sect. 5,we discuss related work. finally, we conclude by discussingimpacts and implications of our work in sect. 6.


2 artefacts and levels of perception


as discussed above, in a process-driven setting, the role ofartefacts in the process and the activities used to create ormodify these artefacts inﬂuence the way we see and under-stand them. we decide upon their content and structure byconsidering questions like which methods and descriptiontechniques we may or may not use for artefacts. this opensthe doors for different and sometimes competing perceptionsof artefacts and artefact models resulting in a blurry and over-loaded terminology.wetakeastakeholder-centricview:toextractthemeaningof an artefact from its current representation, a stakeholder1


typically applies different levels of perception. in the fol-lowing, we introduce these levels and the correspondingprocessing steps: the ﬁrst thing that a stakeholder perceiveswhen processing artefacts is their physical representation.


1 in this context, we use the term ‘stakeholder’ to denote humans build-ing artefacts as well as humans making use of artefacts.


123


artefacts in software engineering: a fundamental positioning2779


fig. 1 the different levels ofperception of an artefact


the physical representation of an artefact is, for example, apiece of paper, texts in a text processing system, a ﬁle in a ﬁlesystem, entries in a tool, or a record in a database. to use anartefact, a stakeholder will ﬁrst parse the physical represen-tation to extract the syntactic information (structure) of theartefact. in this step, the stakeholder abstracts from all infor-mation that is only relevant for the physical representation,butirrelevantfortheunderlyingsyntacticstructure.anexam-ple for such irrelevant information is whether the sections ofone document are contained in one ﬁle or distributed acrossseveral ﬁles. typically, a stakeholder differentiates betweenstructures used to arrange information in containers (e.g.sections in a document), and structures used to express asso-ciated chunks of information (e.g. classes in a class diagram).stakeholders typically know several structure types as partof their individual knowledge. their knowledge inﬂuenceshow stakeholders perceive artefacts. while one stakeholdermay recognise a physical representation as a class diagram,another one might only identify boxes, lines, and text.in a second step, the stakeholder interprets the syntacticrepresentation to identify the underlying semantic content,i.e. the ‘meaning’ of the artefact. in this interpretation step,the stakeholder associates the structure with statements aboutthe real world (and its interpretation), statements from a ﬁxedsemantic theory, or a mixture of both. again, this is stronglyinﬂuenced by the stakeholder’s individual knowledge, expe-riences, abilities, and expectations, i.e. the level of expertisein a speciﬁc semantic domain. this context-sensitive mean-ing is also referred to as pragmatism (see also [11]).


remarkably, this analysis of processing artefacts holds forhumans and machines alike. if an artefact is processed by amachine, this machine needs to parse the physical represen-tation to extract an underlying structure and then interpretthe parsed structure to exhibit a speciﬁc behaviour that weconsider as the artefact’s content. artefacts that are specif-ically made for (non-human) applications usually make theunderlying structures explicit (e.g. by a ﬁle name extension).moreover, even the use of a speciﬁc interpreter can be spec-iﬁed (e.g. by using a virtual machine).based on this consideration, we characterise an artefact bythe three levels of perception and the two processing stepsmentioned above as visualised in fig. 1.


level 1—semantic content the content represents themeaning of an artefact. the content is always inter-preted in the context of the individual knowledgeof the stakeholder or the interpreter of the machine(the pragmatism). this individual knowledge con-tains a set of semantic theories and experiencesabout the real world. if this individual knowledgeincludes a semantic theory in which the content canbe interpreted (e.g. via ontologies or mathematicalmodels), the meaning is deﬁned within the semantictheory—the meaning is explicit. otherwise, read-ers interpret the content in their understanding ofthe real world—the meaning remains implicit. thecontentisusuallyinterpretedpartiallybyasemantictheory and partially by the real-world understand-ing of the reader.


123


2780d. méndez fernández et al.


level 2—syntactic structurethe structure of an artefactdescribes how its content is expressed syntactically.the structure often includes a composition of sev-eral subartefacts. a composite structure capturesthis composition (e.g. as in a table of contents ofan artefact). the leaves of this composite structuredeﬁne the lowest granularity of (sub-)artefacts. forthe structure within these leaf artefacts, we distin-guish between different content structures used torepresent the content (e.g. natural language, formallanguage like formulas or programs, ﬁgures, tables,diagrams, or mixtures thereof). different types ofartefact structures can be described by grammars ormetamodels.level 3—physical representationan artefact has a phys-ical representation. if a speciﬁc tool or represen-tation language is used (such as microsoft wordor latex) and the artefact is represented in thatspeciﬁc context of the format, then this may intro-duce new information at the physical representationlevel only (e.g. by adding latex environments) oreven additional ﬁles (e.g. by generating log ﬁlesduring the typesetting process). this is, however,without speciﬁc relevance for the semantic contentof the artefact. the physical representation there-fore induces, to a certain extent, also some syntacticelements, which are not covered in the structure,because they are without any semantic relevance.


the processing steps for artefacts discussed above connectthe three levels:


processing step 1—parsing parsing describes the processof identifying a structure from the physical rep-resentation. the parsing process connects thephysical representation level with the struc-ture. the outcome of the parsing process isthe composite structure of the artefact and therepresentation of the information chunks. theparsing is based on individual knowledge ofthe stakeholder. while one stakeholder mayrecognise a physical representation as a classdiagram, another might only recognise boxes,arrows, and text.processing step 2—interpretation interpretation is theprocess of extracting the content (i.e. the mean-ing) from the structure. it connects the structurewith the content. this results in an under-standing of the meaning in the context of thestakeholder’s knowledge. which interpreter isselected and applied depends on that stake-holder’s knowledge. the structure inﬂuencesthe selection of a speciﬁc interpreter, e.g. for


a certain semantic theory. if the stakeholder isfamiliar with this semantic theory, this theorycan be used to extract the meaning of the arte-fact. otherwise, the stakeholder may interpretthe content in the context of the individual real-world understanding.


3 example for artefacts and levels ofperception


to illustrate this characterisation and its usefulness, we con-sider a small example where a product manager thinks of anew requirement for a vehicle braking system and writes thefollowing note on a piece of paper: ‘the brake shall preventthe vehicle from moving when applied’. by taking this note,the product manager creates an artefact. let us consider thisartefact from the three levels introduced above. the physicalrepresentation of the artefact is the piece of paper on whichthe requirement is written down (see fig. 2, left side). fromthe syntactic point of view, the product manager uses naturallanguage as content structure of the requirement. in this case,the english orthography and grammar deﬁne the syntacticrules of the content’s structure. there is no additional com-posite structure in this simple example since there is onlyone requirement. in the centre of the semantic view is themeaning, the artefact’s semantics that the product managerintends to express. this meaning emerges when the productmanager or some other stakeholder working with the arte-fact interprets the content in the context of her individualknowledge. a person with a different individual knowledgemight associate the same syntactic appearance with a differ-ent meaning.consider now a requirements engineer who is responsiblefor collecting and managing all requirements for a vehi-cle. the requirements engineer talks to the product managerabout the requirement and about its meaning and documentsit in a ﬁle. however, the requirements engineer might ﬁrstrewrite the requirement to express it using a requirementstemplate (constrained natural language). by doing so, therequirements engineer also creates an artefact, which, how-ever, differs from the ﬁrst with respect to the three levelsof perception. please recall that the semantics (meaning) ofboth artefacts is supposed to be the same. the physical rep-resentation of the new artefact is given by a ﬁle that containsthe requirement as text and that is stored in a ﬁle system(see fig. 2, right side). from the syntactic point of view,the requirements engineer uses a requirements template ascontent structure of the artefact. the requirements templatedeﬁnes the constructs and rules of the appearance. morespeciﬁcally, the template provides a metamodel, even if keptimplicit, that deﬁnes syntactically correct terms and, thus,restricts the usage of plain english language. again, there


123


artefacts in software engineering: a fundamental positioning2781


fig. 2 example of two artefacts with the same semantic intention


is currently no additional composite structure. however, therequirements engineer might later add requirements to thisartefact and cluster them according to a composite structure.the requirements template is associated with a speciﬁc inter-pretation in the semantic viewpoint, yielding the pragmaticsof the artefact. this interpretation could now be expressedin predicate logic. this means that the syntactic constructis associated with a logical formula that describes how thesyntax is interpreted. hence, predicate logic forms a domainin the semantic context. considering this logical formula, wesee that there is still room for interpretation. for example, it isnot clear what the predicate ‘applied (brake)’ exactly standsfor (pressing the pedal, electronic activation, etc.). this isstill subject to interpretation based on the individual knowl-edge including experiences, expertise, and expectations, allcontributing to the formation of a mental model. the role thatindividual knowledge plays in the interpretation of a structuregets smaller the more formal the used syntax and its semanticformation is deﬁned (cf. mathematical expressions).by this small example, we already see that one piece ofcontent (the meaning/intention) can be described via several(syntactic) structures, which in turn can each have severalphysical representations. the content is generally interpretedin a speciﬁc context of the stakeholder’s individual knowl-


edge. a summarising view on the concepts is given by themetamodel presented in fig. 3.finally, please note that an unambiguous description ofan artefact’s content using a formal syntax and semantics(e.g. formal logics) is possible to a certain degree, but thereis a trade-off between precision and comprehensibility byhumans of the used syntax. this trade-off strongly dependson the target group of an artefact, i.e. stakeholders, such asdevelopers, who have to comprehend and interpret the arte-fact.


4 relating artefacts: reﬁnement andequivalence


as shown above, we have to consider three levels of percep-tion, which are related by abstractions in the sense that thereare multiple physical representations for one abstract syn-tactic structure and, likewise, multiple syntactic structuresfor one semantic content. however, these abstraction rela-tions should not be mixed up with the distinction betweenan artefact instance and an artefact type (e.g. the artefacttype ‘requirements speciﬁcation’ vs. the artefact instance‘requirements speciﬁcation for vehicle braking system’).this is also why we refrain from relating our levels of per-


123


2782d. méndez fernández et al.


fig. 3 metamodel for artefacts


fig. 4 equivalent artefacts


ception to the levels of abstraction as introduced along objectorientation. when we speak about artefact types, we alsoneed to speak about structure (syntax) types, whereas whenwe speak about artefact instances, we also need to speakabout instances of structures.we now use our introduced abstraction relations (fig. 1)to discuss the notion of artefact reﬁnement and artefactequivalence: to this end, we will take a closer look atthe relations between artefacts and artefact elements atthe different levels of perception by virtue of the exampleillustrated in fig. 4. let us consider two programs, both


incrementing a counter (variable) by one. the ﬁrst pro-gram, called main.c, which is printed out twice, deﬁnesa simple c-function addvalues(int, int), while thesecond program, stored electronically as the ﬁle main.fsand printed out once, speciﬁes the same function, but in thelanguage f#. accordingly, we have four different artefacts.the two printouts of the ﬁrst program are considered equiv-alent in the narrowest sense, since they are equivalent at alllevels of perception. the electronically stored ﬁle main.fsand its printout is equivalent modulo physical representa-tion since equality is restricted to the semantic content and


123


artefacts in software engineering: a fundamental positioning2783


syntactic structure. finally, the printout of the ﬁrst programand the electronically stored main.fs ﬁle (as well as itsprintout) are semantically equivalent, i.e. their equivalence isrestricted to the semantics expressed in the artefact, becausethe semantics of the two programming languages c and f#leave no room for a meaningful different pragmatic interpre-tation. that is, both functions do exactly the same (moduloits ‘syntactic sugar’).according to these deﬁnitions, equivalence is a gradualconcept ranging from an artefact’s content to the physicalrepresentation, with each level of equivalence also requiringthat the artefacts are equivalent at any level above. conse-quently, the equivalence notions all require at least semanticequivalence. conversely, any artefacts with different contentsare not equivalent, regardless of the class of structure or thephysical representation used.as we have seen in the small requirements example insect. 3, the more rigid we are in the description of the syn-tactic structure and the semantic content, the less freedom isleft in the interpretation of the content. by using a templatefor the requirements speciﬁcation, we restrict the usage of theenglish language and by associating the template with a logi-cal formula describing how to interpret the syntactic structurein predicate logic, and we restrict the pragmatism by addingan additional domain in the semantic context. we say that anartefact is reﬁned by restricting the language expressivenessand/or by adding additional domains in the semantic con-text, this way restricting the role individual knowledge playsin the semantic interpretation. hence, the artefacts describ-ing the right side of fig. 2 are reﬁnements of the artefacts onthe left side. however, as pragmatics is inherently subjectivefor human interpretation, to ﬁnd correspondence betweensuch interpretations is still a difﬁcult task (see, e.g. [8] foran overview of representation and comparison techniques).in fact, often we have to compare and relate artefacts andtheir contents that are on different levels of formalisationand precision, such as informal in contrast to formal artefactcontents (for details, see [5]). then, reﬁnement is differentfrom reﬁnement notions as used in the ﬁeld of formal meth-ods. there, reﬁnement is just logical implication. going frominformal to formal description is rather formalisation makinginformal content precise.the notion of reﬁned or equivalent artefacts is useful inpractice. for example, requirement and test artefacts can,in some cases, be understood as semantically equivalent.a requirement that is expressed as a sequence of interac-tions between the system and its environment (for instance,speciﬁed as a sequence diagram) and the corresponding testcase that speciﬁes consecutive stimulations of a system andexpected results by a test script both describe the same con-tent. however, the structures and the physical representationsdiffer. the notion of semantic equivalence helps understand-ing the semantic relations between software engineering


artefacts. from these relations, we can derive consistencyrules and veriﬁcation obligations. moreover, they form thebasis for tracing between artefacts.


5 related work


the paradigm of artefact orientation has gained a lot ofattention during the last years, especially in requirementsengineering as the problems of neglecting artefacts and theirdependencies were recognised. in [12], we provided a meta-model for artefact-oriented requirements engineering whereartefacts deﬁne structure and content of domain-speciﬁcrequirements engineering results. our work concluded withthe following deﬁnition of a requirements engineering arte-fact:


deﬁnition 1 an artefact is a work product that is produced,modiﬁed, or used by a sequence of tasks that have valueto a role. artefacts are subject to quality assurance andversion control and have speciﬁc types. they are hierarchi-cally structured into content items that deﬁne single areas ofresponsibility and that are the output of a single task. eachcontent item encompasses at its lowest level of decomposi-tion:


1. concepts a concept deﬁnes the elements and their depen-dencies of domain-speciﬁc description techniques usedto represent the concern of a content item. concepts havea speciﬁc type and can be decomposed to concept items.the latter differentiation is made if different items of aconcept can be described with different techniques.2. syntax the syntax deﬁnes a concrete language or repre-sentation that can be chosen for a speciﬁc concept.3. method the method (or task) describes the sequence ofsteps that is performed to make use of a concept.


one exemplary instantiation of the metamodel forms rem-ses [4], which provides a process guide for supportingrequirements engineering processes in the automotive indus-try. there, the artefact model provides a basic structure forthe deﬁnition of the artefacts, their assignment to abstractionlevels and content categories, and the relations between theartefacts. it further deﬁnes general control ﬂow dependencieswithin requirements engineering processes. further ﬁelds ofapplications can be found in the broader ﬁeld of softwareengineering process modelling, e.g. for synchronising vari-ous software process models via artefacts as interfaces [10]or for modelling artefact-focused method–neutral softwareprocess improvement models [9].another view on the term ‘artefact’ is provided by silvaet al. [17] who structure artefacts by deﬁning a metamodelthat explicitly lists specifying the basic elements (fragments)


123


2784d. méndez fernández et al.


to create generic software artefacts. the fragments consist ofsimple types such as text and images, complex types whichuse simple types to deﬁne structured information such as dia-grams and tables, as well as speciﬁc types to extend the modelfor process-speciﬁc structures. in their model, artefacts thatare developed in a given software development process aredeﬁned as an instance of an artefact metaclass which addsprocess-speciﬁc semantic that is required to specify the arte-facts present in a given software development process. theirartefact metaclass deﬁnes more than 100 classes to organ-ise artefacts among sections, subsections and other types ofinformation. as the basic elements are derived empiricallyby examining software processes based on the software andsystem engineering process meta-model (spem [15]), suchas rup, but also scrum, their approach is also processdependent as in our own previous work.another example stems from an area known as methodengineering [3] which emerged in response to shortcom-ings also reported by parnas and clements [16] includingthat processes are too often performed mindlessly or evenfaked without awareness of the reasons why a process stepshould (or should not) be executed, and without awarenessof how to structure and specify the results. consequently,artefactswereoftennotreproducible,notmeasurable,incom-plete, and inconsistent with no clear terminology [13]. theunderlying philosophy of method engineering deﬁnes asituation-speciﬁc process by a set of methods to be performedin a particular order by a speciﬁc set of roles. although thisresearch area fostered the discussion on adaptable processes,it still does not cope with the various challenges of today’sproject environments. moreover, there is still no commonagreement on the structure and semantics of artefact-basedmethodologies [12]. as available approaches (e.g. spem-related approaches) further focus on methods and descriptiontechniques as well as the complex dependencies betweenthe methods rather than on clear result structures, contents,and dependencies among the artefacts, project participantsremain unaware of how to create consistent artefacts intheir projects independently of underlying restrictive pro-cesses [9].as discussed in the introductory part of the paper at hands,our previous deﬁnition stems from a process-centric view,same as those of the examples given above, and the deﬁ-nition is thus valid for a process-dependent context only asprocesses (being a series of tasks) are used as a means forthe deﬁnition. secondly, and more importantly, we did notconsider at all the different ways to provide semantics ofthe artefacts. this makes it inherently difﬁcult to transfer theconcept to ﬁelds that are not dependent on speciﬁc processes(e.g. the general area of model-based development).overall, we can observe that different research areas cameup with their own deﬁnition of what constitutes an artefact inorder to examine or transform it at certain levels of percep-


tion. however, not all deﬁnitions are explicit and relationshipbetween the levels of perception often remain vague. forinstance, model versioning and comparison [1] consider amodel as an artefact; unclear is if they refer to a physicalﬁle, a graph according to a certain metamodel or to contentrepresenting an abstraction of some part of reality. more-over, those levels of perception are referred to by differentauthors in the same research area by different names, e.g.static instead of syntactic [14]. the lack of a common vocab-ulary and precise understanding limits the comparability ofdifferent techniques and approaches, as identiﬁed indepen-dently in [6]. closing this gap of a common vocabulary wasin scope of our paper at hands.in a recent paper, broy [5] distinguishes for an artefactbetween logical content, content representation (i.e. its syn-tax), and its physical representation, and deﬁnes the notion ofcontent chunks. content chunks are either elementary partsof an artefact or a set of content chunks. the meaning of acontent chunk is assumed to be represented by logic, whichdeﬁnes a semantic theory deﬁning the meaning of the con-tent chunk. based on this deﬁnition, he introduces formallinks and traces between requirements, functional speciﬁca-tions, and architectures relating the content of the respectiveartefacts. note that the metamodel presented in fig. 3 is intune with this approach. hence, broy’s work constitutes oneapplication on basis of our notion of artefacts and their rela-tionships discussed in the manuscript at hands.


6 conclusion


in this paper, we critically reﬂected on the various interpreta-tions of the term ‘artefact’ in context of software engineeringand discussed its basic concepts by taking different viewsindependent of potentially surrounding processes or relatedconcepts. our discussion leads to a revised deﬁnition of thenotion of an artefact in the context of software engineering:


deﬁnition 2 an artefact is a self-contained work result, hav-ing a context-speciﬁc purpose and constituting a physicalrepresentation, a syntactic structure and a semantic content,forming three levels of perception.


the exact meaning of the semantic content, the pragmatics,depends on the parsing, which extracts the syntactic structureand the way in which a semantic content is ﬁnally interpretedin the individual context of the stakeholder. hence, an artefactis uniquely deﬁned by the three levels of perception whichresult from the application of a given parser and interpreter. agiven process then can deﬁne which artefacts to be producedin the course of a software development project. by takingour descriptive view, however, we could characterise arte-facts independent of their surrounding processes and, thus,


123


artefacts in software engineering: a fundamental positioning2785


provide a clear understanding of the main concepts, in turnsupporting a clear notion of artefact orientation and thosesoftware engineering practices that rely on this notion.researchers and practitioners as well can now in fact relatetheir discussions and various contributions to our ﬁeld in con-text of that term as already shown in [5]. by introducing thenotion of reﬁnement and equivalence, we can now also betterunderstand the relations between software engineering arte-facts and derive, for instance, consistency rules. the notion ofequivalence could be further extended to cover, for instance,settings with different variants and versions of artefacts inthe future.withourpaperathands,wecontributetoacommonunder-standing and hope to support steering the development ofartefact-centric contributions such as ones providing or rely-ing on sets of interdependent software engineering artefacts,i.e. artefact models. having a clear picture of the notion ofartefacts and their relations allows us to embed this conceptinto the broader context of engineering practices includingsoftware process models or, more generally speaking, seam-less engineering processes, which up to now was done basedon domain-speciﬁc, process-dependent, and too often verynarrow views. modelling the relationships between artefactsis therefore a key for a better usage of models in system engi-neering. to achieve this however, further work is required tocover traceability in full generality where semantically richerconcepts for and relationships between artefacts provide arigorous basis for semantic linking and tracing within andbetween artefacts [5].

